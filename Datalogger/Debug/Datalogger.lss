
Datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004af8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00004af8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00010018  2**0
                  CONTENTS
  3 .bss          0000206c  20000018  00004b10  00010018  2**2
                  ALLOC
  4 .stack        00002004  20002084  00006b7c  00010018  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
  7 .debug_info   000546f0  00000000  00000000  0001009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ebe  00000000  00000000  0006478b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d3c4  00000000  00000000  00069649  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008e0  00000000  00000000  00076a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e28  00000000  00000000  000772ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ff21  00000000  00000000  00078115  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001566c  00000000  00000000  00098036  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099949  00000000  00000000  000ad6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000170c  00000000  00000000  00146fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004088 	.word	0x20004088
       4:	00004469 	.word	0x00004469
       8:	00004465 	.word	0x00004465
       c:	00004465 	.word	0x00004465
	...
      2c:	00004465 	.word	0x00004465
	...
      38:	00004465 	.word	0x00004465
      3c:	00004465 	.word	0x00004465
      40:	00004465 	.word	0x00004465
      44:	00004465 	.word	0x00004465
      48:	0000129d 	.word	0x0000129d
      4c:	00003b9d 	.word	0x00003b9d
      50:	00004465 	.word	0x00004465
      54:	00004465 	.word	0x00004465
      58:	000018f5 	.word	0x000018f5
      5c:	00000f51 	.word	0x00000f51
      60:	00004465 	.word	0x00004465
      64:	00004465 	.word	0x00004465
      68:	00004465 	.word	0x00004465
      6c:	00004465 	.word	0x00004465
      70:	00004465 	.word	0x00004465
      74:	00004465 	.word	0x00004465
      78:	00004465 	.word	0x00004465
      7c:	00004465 	.word	0x00004465
      80:	00004465 	.word	0x00004465
      84:	000018c5 	.word	0x000018c5
      88:	000018d5 	.word	0x000018d5
	...
      94:	000018e5 	.word	0x000018e5
      98:	00004465 	.word	0x00004465
      9c:	00004465 	.word	0x00004465
      a0:	00004465 	.word	0x00004465
      a4:	00004465 	.word	0x00004465
      a8:	00004465 	.word	0x00004465
      ac:	00004465 	.word	0x00004465
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000018 	.word	0x20000018
      d4:	00000000 	.word	0x00000000
      d8:	00004af8 	.word	0x00004af8

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00004af8 	.word	0x00004af8
     108:	2000001c 	.word	0x2000001c
     10c:	00004af8 	.word	0x00004af8
     110:	00000000 	.word	0x00000000

00000114 <configure_ADT7420>:
/* @param none
/* @returns none
/************************************************************************/

void configure_ADT7420(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b087      	sub	sp, #28
	// Create an i2c pacekt struct and populate it with the address of the configuration register and the shutdown operating mode value
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer[2] = {TEMP_SENSOR_CONFIG_ADDR,TEMP_SENSOR_CONFIG_OP_MODE_SHDN};
     118:	ac02      	add	r4, sp, #8
     11a:	1c20      	adds	r0, r4, #0
     11c:	491b      	ldr	r1, [pc, #108]	; (18c <configure_ADT7420+0x78>)
     11e:	2202      	movs	r2, #2
     120:	4b1b      	ldr	r3, [pc, #108]	; (190 <configure_ADT7420+0x7c>)
     122:	4798      	blx	r3
	
	i2c_packet.address = TEMP_SENSOR_ADDRESS;
     124:	ab03      	add	r3, sp, #12
     126:	2248      	movs	r2, #72	; 0x48
     128:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     12a:	2200      	movs	r2, #0
     12c:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     12e:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     130:	2102      	movs	r1, #2
     132:	8059      	strh	r1, [r3, #2]
	i2c_packet.data = wr_buffer;
     134:	9404      	str	r4, [sp, #16]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     136:	a901      	add	r1, sp, #4
     138:	2380      	movs	r3, #128	; 0x80
     13a:	700b      	strb	r3, [r1, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     13c:	70ca      	strb	r2, [r1, #3]
	
	// Configure the Micrel switch enable pin
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     13e:	3b7f      	subs	r3, #127	; 0x7f
     140:	704b      	strb	r3, [r1, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
     142:	2302      	movs	r3, #2
     144:	708b      	strb	r3, [r1, #2]
	
	// Enable the sensor
	system_pinmux_pin_set_config(ADT7420_EN_PIN, &config_pinmux);
     146:	200f      	movs	r0, #15
     148:	4b12      	ldr	r3, [pc, #72]	; (194 <configure_ADT7420+0x80>)
     14a:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     14c:	2280      	movs	r2, #128	; 0x80
     14e:	0212      	lsls	r2, r2, #8
     150:	4b11      	ldr	r3, [pc, #68]	; (198 <configure_ADT7420+0x84>)
     152:	619a      	str	r2, [r3, #24]

void configure_ADT7420(void)
{
	// Create an i2c pacekt struct and populate it with the address of the configuration register and the shutdown operating mode value
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     154:	2500      	movs	r5, #0
	// Enable the sensor
	system_pinmux_pin_set_config(ADT7420_EN_PIN, &config_pinmux);
	port_pin_set_output_level(ADT7420_EN_PIN, true);
	
	// Write the packet to the sensor. If we timeout we break with no notification to the calling function
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     156:	4c11      	ldr	r4, [pc, #68]	; (19c <configure_ADT7420+0x88>)
     158:	4f11      	ldr	r7, [pc, #68]	; (1a0 <configure_ADT7420+0x8c>)
     15a:	4e12      	ldr	r6, [pc, #72]	; (1a4 <configure_ADT7420+0x90>)
     15c:	e006      	b.n	16c <configure_ADT7420+0x58>
 		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     15e:	1c6b      	adds	r3, r5, #1
     160:	b29b      	uxth	r3, r3
     162:	4a0e      	ldr	r2, [pc, #56]	; (19c <configure_ADT7420+0x88>)
     164:	8912      	ldrh	r2, [r2, #8]
     166:	42aa      	cmp	r2, r5
     168:	d006      	beq.n	178 <configure_ADT7420+0x64>
     16a:	1c1d      	adds	r5, r3, #0
	// Enable the sensor
	system_pinmux_pin_set_config(ADT7420_EN_PIN, &config_pinmux);
	port_pin_set_output_level(ADT7420_EN_PIN, true);
	
	// Write the packet to the sensor. If we timeout we break with no notification to the calling function
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     16c:	1c20      	adds	r0, r4, #0
     16e:	a903      	add	r1, sp, #12
     170:	47b8      	blx	r7
     172:	7030      	strb	r0, [r6, #0]
     174:	2800      	cmp	r0, #0
     176:	d1f2      	bne.n	15e <configure_ADT7420+0x4a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     178:	2280      	movs	r2, #128	; 0x80
     17a:	0212      	lsls	r2, r2, #8
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <configure_ADT7420+0x84>)
     17e:	615a      	str	r2, [r3, #20]
 		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Shut it back down, and initialize the global temperature array index
	port_pin_set_output_level(ADT7420_EN_PIN, false);
	ucTemperatureArrayPtr = 0;
     180:	2200      	movs	r2, #0
     182:	4b09      	ldr	r3, [pc, #36]	; (1a8 <configure_ADT7420+0x94>)
     184:	701a      	strb	r2, [r3, #0]
}
     186:	b007      	add	sp, #28
     188:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00004a14 	.word	0x00004a14
     190:	00004a01 	.word	0x00004a01
     194:	00004405 	.word	0x00004405
     198:	40002800 	.word	0x40002800
     19c:	20001cb4 	.word	0x20001cb4
     1a0:	00001841 	.word	0x00001841
     1a4:	20001e9e 	.word	0x20001e9e
     1a8:	20001c33 	.word	0x20001c33

000001ac <ADT7420_read_temp>:
/*  @param none
/*  @returns none                                                                     
/************************************************************************/

void ADT7420_read_temp(void)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	4647      	mov	r7, r8
     1b0:	b480      	push	{r7}
     1b2:	b086      	sub	sp, #24
	
	// The timer used throughout the reads/writes ensure that we don't get stuck in an infinite loop if the sensor is unresponsive.
	uint16_t uiTemperature=0;
	struct i2c_master_packet i2c_packet;
	uint16_t uiTimer = 0;
	uint8_t ucDataBuffer[1] = {0};
     1b4:	2200      	movs	r2, #0
     1b6:	ab02      	add	r3, sp, #8
     1b8:	701a      	strb	r2, [r3, #0]
	uint8_t wr_buffer[2] = {0,0};
	
	i2c_packet.address = TEMP_SENSOR_ADDRESS;
     1ba:	ab03      	add	r3, sp, #12
     1bc:	2148      	movs	r1, #72	; 0x48
     1be:	8019      	strh	r1, [r3, #0]
	i2c_packet.ten_bit_address = false;
     1c0:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     1c2:	725a      	strb	r2, [r3, #9]
	i2c_packet.hs_master_code = 0;
     1c4:	729a      	strb	r2, [r3, #10]
	i2c_packet.data_length = 2;
     1c6:	3202      	adds	r2, #2
     1c8:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     1ca:	aa01      	add	r2, sp, #4
     1cc:	9204      	str	r2, [sp, #16]
	wr_buffer[0] = TEMP_SENSOR_CONFIG_ADDR;
     1ce:	2303      	movs	r3, #3
     1d0:	7013      	strb	r3, [r2, #0]
	wr_buffer[1] = TEMP_SENSOR_CONFIG_OP_MODE_OS;
     1d2:	331d      	adds	r3, #29
     1d4:	7053      	strb	r3, [r2, #1]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1d6:	2280      	movs	r2, #128	; 0x80
     1d8:	0212      	lsls	r2, r2, #8
     1da:	4b64      	ldr	r3, [pc, #400]	; (36c <ADT7420_read_temp+0x1c0>)
     1dc:	619a      	str	r2, [r3, #24]
     1de:	4b64      	ldr	r3, [pc, #400]	; (370 <ADT7420_read_temp+0x1c4>)
     1e0:	3b01      	subs	r3, #1
	
	// Turn on the sensor
	port_pin_set_output_level(ADT7420_EN_PIN, true);
	
	// Delay long enough for the chip to fully power up. This is a busy-wait and is not great for energy.
	for(int i = 0; i < 10000; i++);
     1e2:	2b00      	cmp	r3, #0
     1e4:	d1fc      	bne.n	1e0 <ADT7420_read_temp+0x34>
     1e6:	2400      	movs	r4, #0
	
	// Write the packet
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
     1e8:	4d62      	ldr	r5, [pc, #392]	; (374 <ADT7420_read_temp+0x1c8>)
     1ea:	4f63      	ldr	r7, [pc, #396]	; (378 <ADT7420_read_temp+0x1cc>)
     1ec:	4e63      	ldr	r6, [pc, #396]	; (37c <ADT7420_read_temp+0x1d0>)
     1ee:	1c28      	adds	r0, r5, #0
     1f0:	a903      	add	r1, sp, #12
     1f2:	47b8      	blx	r7
     1f4:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     1f6:	1c63      	adds	r3, r4, #1
     1f8:	b29b      	uxth	r3, r3
     1fa:	892a      	ldrh	r2, [r5, #8]
     1fc:	42a2      	cmp	r2, r4
     1fe:	d006      	beq.n	20e <ADT7420_read_temp+0x62>
	}while(status != STATUS_OK);
     200:	4a5e      	ldr	r2, [pc, #376]	; (37c <ADT7420_read_temp+0x1d0>)
     202:	7812      	ldrb	r2, [r2, #0]
	for(int i = 0; i < 10000; i++);
	
	// Write the packet
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     204:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     206:	2a00      	cmp	r2, #0
     208:	d1f1      	bne.n	1ee <ADT7420_read_temp+0x42>
     20a:	4b59      	ldr	r3, [pc, #356]	; (370 <ADT7420_read_temp+0x1c4>)
     20c:	e000      	b.n	210 <ADT7420_read_temp+0x64>
     20e:	4b58      	ldr	r3, [pc, #352]	; (370 <ADT7420_read_temp+0x1c4>)
     210:	3b01      	subs	r3, #1
	
	// Wait for 240 ms for the sampling to complete
	for(int i = 0; i < 10000; i++);
     212:	2b00      	cmp	r3, #0
     214:	d1fc      	bne.n	210 <ADT7420_read_temp+0x64>
	
	uiTimer = 0;
	
	// Set register pointer to upper sensor value byte and write it
	i2c_packet.data_length = 1;
     216:	2201      	movs	r2, #1
     218:	ab03      	add	r3, sp, #12
     21a:	805a      	strh	r2, [r3, #2]
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_MS_ADDR;
     21c:	2200      	movs	r2, #0
     21e:	ab01      	add	r3, sp, #4
     220:	701a      	strb	r2, [r3, #0]
	}while(status != STATUS_OK);
	
	// Wait for 240 ms for the sampling to complete
	for(int i = 0; i < 10000; i++);
	
	uiTimer = 0;
     222:	2400      	movs	r4, #0
	
	// Set register pointer to upper sensor value byte and write it
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_MS_ADDR;
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
     224:	4d53      	ldr	r5, [pc, #332]	; (374 <ADT7420_read_temp+0x1c8>)
     226:	4f54      	ldr	r7, [pc, #336]	; (378 <ADT7420_read_temp+0x1cc>)
     228:	4e54      	ldr	r6, [pc, #336]	; (37c <ADT7420_read_temp+0x1d0>)
     22a:	1c28      	adds	r0, r5, #0
     22c:	a903      	add	r1, sp, #12
     22e:	47b8      	blx	r7
     230:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     232:	1c63      	adds	r3, r4, #1
     234:	b29b      	uxth	r3, r3
     236:	892a      	ldrh	r2, [r5, #8]
     238:	42a2      	cmp	r2, r4
     23a:	d004      	beq.n	246 <ADT7420_read_temp+0x9a>
	}while(status != STATUS_OK);
     23c:	4a4f      	ldr	r2, [pc, #316]	; (37c <ADT7420_read_temp+0x1d0>)
     23e:	7812      	ldrb	r2, [r2, #0]
	// Set register pointer to upper sensor value byte and write it
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_MS_ADDR;
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     240:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     242:	2a00      	cmp	r2, #0
     244:	d1f1      	bne.n	22a <ADT7420_read_temp+0x7e>
	
	uiTimer = 0;
	
	// Read the response from the sensor and store it in the upper byte of the temperature variable
	i2c_packet.data_length = 1;
     246:	ab03      	add	r3, sp, #12
     248:	2201      	movs	r2, #1
     24a:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = ucDataBuffer;
     24c:	aa02      	add	r2, sp, #8
     24e:	9204      	str	r2, [sp, #16]
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
	}while(status != STATUS_OK);
	
	uiTimer = 0;
     250:	2400      	movs	r4, #0
	
	// Read the response from the sensor and store it in the upper byte of the temperature variable
	i2c_packet.data_length = 1;
	i2c_packet.data = ucDataBuffer;
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
     252:	4d48      	ldr	r5, [pc, #288]	; (374 <ADT7420_read_temp+0x1c8>)
     254:	4f4a      	ldr	r7, [pc, #296]	; (380 <ADT7420_read_temp+0x1d4>)
     256:	4e49      	ldr	r6, [pc, #292]	; (37c <ADT7420_read_temp+0x1d0>)
     258:	1c28      	adds	r0, r5, #0
     25a:	a903      	add	r1, sp, #12
     25c:	47b8      	blx	r7
     25e:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     260:	1c63      	adds	r3, r4, #1
     262:	b29b      	uxth	r3, r3
     264:	892a      	ldrh	r2, [r5, #8]
     266:	42a2      	cmp	r2, r4
     268:	d004      	beq.n	274 <ADT7420_read_temp+0xc8>
	}while(status != STATUS_OK);
     26a:	4a44      	ldr	r2, [pc, #272]	; (37c <ADT7420_read_temp+0x1d0>)
     26c:	7812      	ldrb	r2, [r2, #0]
	// Read the response from the sensor and store it in the upper byte of the temperature variable
	i2c_packet.data_length = 1;
	i2c_packet.data = ucDataBuffer;
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     26e:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     270:	2a00      	cmp	r2, #0
     272:	d1f1      	bne.n	258 <ADT7420_read_temp+0xac>
	uiTemperature = ucDataBuffer[0] << 8;
     274:	ab02      	add	r3, sp, #8
     276:	781e      	ldrb	r6, [r3, #0]
     278:	0233      	lsls	r3, r6, #8
     27a:	4698      	mov	r8, r3
	
	uiTimer = 0;
	
	// Set register pointer to lower byte and write it
	i2c_packet.data = wr_buffer;
     27c:	aa03      	add	r2, sp, #12
     27e:	ab01      	add	r3, sp, #4
     280:	9304      	str	r3, [sp, #16]
	i2c_packet.data_length = 1;
     282:	2101      	movs	r1, #1
     284:	8051      	strh	r1, [r2, #2]
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_LS_ADDR;
     286:	2201      	movs	r2, #1
     288:	701a      	strb	r2, [r3, #0]
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
	}while(status != STATUS_OK);
	uiTemperature = ucDataBuffer[0] << 8;
	
	uiTimer = 0;
     28a:	2400      	movs	r4, #0
	// Set register pointer to lower byte and write it
	i2c_packet.data = wr_buffer;
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_LS_ADDR;
	do{
		status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_packet);
     28c:	4d39      	ldr	r5, [pc, #228]	; (374 <ADT7420_read_temp+0x1c8>)
     28e:	4e3d      	ldr	r6, [pc, #244]	; (384 <ADT7420_read_temp+0x1d8>)
     290:	4f3a      	ldr	r7, [pc, #232]	; (37c <ADT7420_read_temp+0x1d0>)
     292:	1c28      	adds	r0, r5, #0
     294:	a903      	add	r1, sp, #12
     296:	47b0      	blx	r6
     298:	7038      	strb	r0, [r7, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     29a:	1c63      	adds	r3, r4, #1
     29c:	b29b      	uxth	r3, r3
     29e:	892a      	ldrh	r2, [r5, #8]
     2a0:	42a2      	cmp	r2, r4
     2a2:	d004      	beq.n	2ae <ADT7420_read_temp+0x102>
	}while(status != STATUS_OK);
     2a4:	4a35      	ldr	r2, [pc, #212]	; (37c <ADT7420_read_temp+0x1d0>)
     2a6:	7812      	ldrb	r2, [r2, #0]
	i2c_packet.data = wr_buffer;
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_LS_ADDR;
	do{
		status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     2a8:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     2aa:	2a00      	cmp	r2, #0
     2ac:	d1f1      	bne.n	292 <ADT7420_read_temp+0xe6>
	i2c_packet.data_length = 1;
     2ae:	ab03      	add	r3, sp, #12
     2b0:	2201      	movs	r2, #1
     2b2:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = ucDataBuffer;
     2b4:	aa02      	add	r2, sp, #8
     2b6:	9204      	str	r2, [sp, #16]
	
	uiTimer = 0;
     2b8:	2400      	movs	r4, #0
	
	// Read the response and store it in the lower byte of the temperature variable
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
     2ba:	4d2e      	ldr	r5, [pc, #184]	; (374 <ADT7420_read_temp+0x1c8>)
     2bc:	4e30      	ldr	r6, [pc, #192]	; (380 <ADT7420_read_temp+0x1d4>)
     2be:	4f2f      	ldr	r7, [pc, #188]	; (37c <ADT7420_read_temp+0x1d0>)
     2c0:	1c28      	adds	r0, r5, #0
     2c2:	a903      	add	r1, sp, #12
     2c4:	47b0      	blx	r6
     2c6:	7038      	strb	r0, [r7, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     2c8:	1c63      	adds	r3, r4, #1
     2ca:	b29b      	uxth	r3, r3
     2cc:	892a      	ldrh	r2, [r5, #8]
     2ce:	42a2      	cmp	r2, r4
     2d0:	d004      	beq.n	2dc <ADT7420_read_temp+0x130>
	}while(status != STATUS_OK);
     2d2:	4a2a      	ldr	r2, [pc, #168]	; (37c <ADT7420_read_temp+0x1d0>)
     2d4:	7812      	ldrb	r2, [r2, #0]
	uiTimer = 0;
	
	// Read the response and store it in the lower byte of the temperature variable
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     2d6:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     2d8:	2a00      	cmp	r2, #0
     2da:	d1f1      	bne.n	2c0 <ADT7420_read_temp+0x114>
	uiTemperature = uiTemperature | ucDataBuffer[0];
     2dc:	ab02      	add	r3, sp, #8
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	4646      	mov	r6, r8
     2e2:	431e      	orrs	r6, r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2e4:	2280      	movs	r2, #128	; 0x80
     2e6:	0212      	lsls	r2, r2, #8
     2e8:	4b20      	ldr	r3, [pc, #128]	; (36c <ADT7420_read_temp+0x1c0>)
     2ea:	615a      	str	r2, [r3, #20]
	
	// Put the sensor in shutdown and store the temperature in the array
	port_pin_set_output_level(ADT7420_EN_PIN, false);
	uiTemperatureArray[ucTemperatureArrayPtr++] = uiTemperature;
     2ec:	4a26      	ldr	r2, [pc, #152]	; (388 <ADT7420_read_temp+0x1dc>)
     2ee:	7813      	ldrb	r3, [r2, #0]
     2f0:	1c59      	adds	r1, r3, #1
     2f2:	7011      	strb	r1, [r2, #0]
     2f4:	005b      	lsls	r3, r3, #1
     2f6:	4a25      	ldr	r2, [pc, #148]	; (38c <ADT7420_read_temp+0x1e0>)
     2f8:	529e      	strh	r6, [r3, r2]
	
	// If the core temperature is below the set threshold then we are inactive, and we assume stationary mode
	//		if the core temperature is above the threshold then we are active, and we assume we are still in stationary mode
	//		otherwise, we do nothing (this case only occurs for thresholds that are not equal)
	// NOTE--Raw Temp*128 is the conversion for positive numbers, if the animal falls below freezing, things may get weird.
	if(128*uiTemperature <= ucInactivityTemperatureThreshold){
     2fa:	01f6      	lsls	r6, r6, #7
     2fc:	4b24      	ldr	r3, [pc, #144]	; (390 <ADT7420_read_temp+0x1e4>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	429e      	cmp	r6, r3
     302:	dc15      	bgt.n	330 <ADT7420_read_temp+0x184>
		
		/* Inactive Mode */
		ucActiveInactive_Mode = INACTIVE_MODE;
     304:	2301      	movs	r3, #1
     306:	4a23      	ldr	r2, [pc, #140]	; (394 <ADT7420_read_temp+0x1e8>)
     308:	7013      	strb	r3, [r2, #0]
		ucMotion_State = STATIONARY_MODE;
     30a:	4a23      	ldr	r2, [pc, #140]	; (398 <ADT7420_read_temp+0x1ec>)
     30c:	7013      	strb	r3, [r2, #0]
		
		// Disable the accelerometer activity interrupt
		ADXL375_disable_interrupt(ADXL375_INT_SRC_ACTIVITY);
     30e:	2010      	movs	r0, #16
     310:	4b22      	ldr	r3, [pc, #136]	; (39c <ADT7420_read_temp+0x1f0>)
     312:	4798      	blx	r3
		
		// We have switched modes, so the temperature data now needs to be marked as a new dataset
		ucTemperatureDataSets++;
     314:	4a22      	ldr	r2, [pc, #136]	; (3a0 <ADT7420_read_temp+0x1f4>)
     316:	7813      	ldrb	r3, [r2, #0]
     318:	3301      	adds	r3, #1
     31a:	b2db      	uxtb	r3, r3
     31c:	7013      	strb	r3, [r2, #0]
		cTemperatureDataSetPtr[ucTemperatureDataSets] = ucTemperatureArrayPtr;
     31e:	4a1a      	ldr	r2, [pc, #104]	; (388 <ADT7420_read_temp+0x1dc>)
     320:	7811      	ldrb	r1, [r2, #0]
     322:	4a20      	ldr	r2, [pc, #128]	; (3a4 <ADT7420_read_temp+0x1f8>)
     324:	54d1      	strb	r1, [r2, r3]
		get_timestamp(ucTemperatureTimestamps[ucTemperatureDataSets]);
     326:	4a20      	ldr	r2, [pc, #128]	; (3a8 <ADT7420_read_temp+0x1fc>)
     328:	5cd0      	ldrb	r0, [r2, r3]
     32a:	4b20      	ldr	r3, [pc, #128]	; (3ac <ADT7420_read_temp+0x200>)
     32c:	4798      	blx	r3
     32e:	e019      	b.n	364 <ADT7420_read_temp+0x1b8>
	}else if(128*uiTemperature > ucActivityTemperatureThreshold){
     330:	4b1f      	ldr	r3, [pc, #124]	; (3b0 <ADT7420_read_temp+0x204>)
     332:	781b      	ldrb	r3, [r3, #0]
     334:	429e      	cmp	r6, r3
     336:	dd15      	ble.n	364 <ADT7420_read_temp+0x1b8>
		
		/* Active Mode */
		ucActiveInactive_Mode = ACTIVE_MODE;
     338:	2200      	movs	r2, #0
     33a:	4b16      	ldr	r3, [pc, #88]	; (394 <ADT7420_read_temp+0x1e8>)
     33c:	701a      	strb	r2, [r3, #0]
		ucMotion_State = STATIONARY_MODE;
     33e:	3201      	adds	r2, #1
     340:	4b15      	ldr	r3, [pc, #84]	; (398 <ADT7420_read_temp+0x1ec>)
     342:	701a      	strb	r2, [r3, #0]
		
		// Re-enable the activity interrupt -- we need to do this because we are exiting inactive mode where the activity interrupt is disabledf
		ADXL375_enable_interrupt(ADXL375_INT_SRC_ACTIVITY);
     344:	2010      	movs	r0, #16
     346:	4b1b      	ldr	r3, [pc, #108]	; (3b4 <ADT7420_read_temp+0x208>)
     348:	4798      	blx	r3
		
		// We have switched modes, so the temperature data now needs to be marked as a new dataset
		ucTemperatureDataSets++;
     34a:	4a15      	ldr	r2, [pc, #84]	; (3a0 <ADT7420_read_temp+0x1f4>)
     34c:	7813      	ldrb	r3, [r2, #0]
     34e:	3301      	adds	r3, #1
     350:	b2db      	uxtb	r3, r3
     352:	7013      	strb	r3, [r2, #0]
		cTemperatureDataSetPtr[ucTemperatureDataSets] = ucTemperatureArrayPtr;
     354:	4a0c      	ldr	r2, [pc, #48]	; (388 <ADT7420_read_temp+0x1dc>)
     356:	7811      	ldrb	r1, [r2, #0]
     358:	4a12      	ldr	r2, [pc, #72]	; (3a4 <ADT7420_read_temp+0x1f8>)
     35a:	54d1      	strb	r1, [r2, r3]
		get_timestamp(ucTemperatureTimestamps[ucTemperatureDataSets]);
     35c:	4a12      	ldr	r2, [pc, #72]	; (3a8 <ADT7420_read_temp+0x1fc>)
     35e:	5cd0      	ldrb	r0, [r2, r3]
     360:	4b12      	ldr	r3, [pc, #72]	; (3ac <ADT7420_read_temp+0x200>)
     362:	4798      	blx	r3
	}
     364:	b006      	add	sp, #24
     366:	bc04      	pop	{r2}
     368:	4690      	mov	r8, r2
     36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     36c:	40002800 	.word	0x40002800
     370:	00002710 	.word	0x00002710
     374:	20001cb4 	.word	0x20001cb4
     378:	00001841 	.word	0x00001841
     37c:	20001e9e 	.word	0x20001e9e
     380:	0000182d 	.word	0x0000182d
     384:	00001855 	.word	0x00001855
     388:	20001c33 	.word	0x20001c33
     38c:	20001ea0 	.word	0x20001ea0
     390:	20001c32 	.word	0x20001c32
     394:	20001e9d 	.word	0x20001e9d
     398:	20001e9c 	.word	0x20001e9c
     39c:	000003b9 	.word	0x000003b9
     3a0:	200000bc 	.word	0x200000bc
     3a4:	20001e54 	.word	0x20001e54
     3a8:	20001d14 	.word	0x20001d14
     3ac:	00002225 	.word	0x00002225
     3b0:	20001462 	.word	0x20001462
     3b4:	00000479 	.word	0x00000479

000003b8 <ADXL375_disable_interrupt>:
/* @params[in] interrupt_src the integer representation of the interrupt source
/* (See ADXL375 datasheet for sources)
/* @returns none
**************************************************************************/
void ADXL375_disable_interrupt(uint8_t interrupt_src)
{
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	4647      	mov	r7, r8
     3bc:	b480      	push	{r7}
     3be:	b084      	sub	sp, #16
     3c0:	4680      	mov	r8, r0
	struct i2c_master_packet i2c_packet;
	uint8_t wr_buffer[2] = {ADXL375_INT_EN_ADDR, interrupt_src};
     3c2:	232e      	movs	r3, #46	; 0x2e
     3c4:	466a      	mov	r2, sp
     3c6:	7013      	strb	r3, [r2, #0]
     3c8:	466b      	mov	r3, sp
     3ca:	7058      	strb	r0, [r3, #1]
	uint16_t timeout = 0;
		
	i2c_packet.address = ADXL375_ADDR;
     3cc:	ab01      	add	r3, sp, #4
     3ce:	2253      	movs	r2, #83	; 0x53
     3d0:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     3d2:	2200      	movs	r2, #0
     3d4:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     3d6:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 1;
     3d8:	3201      	adds	r2, #1
     3da:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     3dc:	466a      	mov	r2, sp
     3de:	9202      	str	r2, [sp, #8]
**************************************************************************/
void ADXL375_disable_interrupt(uint8_t interrupt_src)
{
	struct i2c_master_packet i2c_packet;
	uint8_t wr_buffer[2] = {ADXL375_INT_EN_ADDR, interrupt_src};
	uint16_t timeout = 0;
     3e0:	2600      	movs	r6, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer;
	
	// Write the interrupt enable address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     3e2:	4c21      	ldr	r4, [pc, #132]	; (468 <ADXL375_disable_interrupt+0xb0>)
     3e4:	4d21      	ldr	r5, [pc, #132]	; (46c <ADXL375_disable_interrupt+0xb4>)
     3e6:	4f22      	ldr	r7, [pc, #136]	; (470 <ADXL375_disable_interrupt+0xb8>)
     3e8:	e006      	b.n	3f8 <ADXL375_disable_interrupt+0x40>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     3ea:	1c73      	adds	r3, r6, #1
     3ec:	b29b      	uxth	r3, r3
     3ee:	4a1e      	ldr	r2, [pc, #120]	; (468 <ADXL375_disable_interrupt+0xb0>)
     3f0:	8912      	ldrh	r2, [r2, #8]
     3f2:	42b2      	cmp	r2, r6
     3f4:	d010      	beq.n	418 <ADXL375_disable_interrupt+0x60>
     3f6:	1c1e      	adds	r6, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer;
	
	// Write the interrupt enable address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     3f8:	1c20      	adds	r0, r4, #0
     3fa:	a901      	add	r1, sp, #4
     3fc:	47a8      	blx	r5
     3fe:	7038      	strb	r0, [r7, #0]
     400:	2800      	cmp	r0, #0
     402:	d1f2      	bne.n	3ea <ADXL375_disable_interrupt+0x32>
     404:	2600      	movs	r6, #0
     406:	e008      	b.n	41a <ADXL375_disable_interrupt+0x62>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	timeout = 0;
	// Read back the value from the interrupt enable reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     408:	1c73      	adds	r3, r6, #1
     40a:	b29b      	uxth	r3, r3
     40c:	4a16      	ldr	r2, [pc, #88]	; (468 <ADXL375_disable_interrupt+0xb0>)
     40e:	8912      	ldrh	r2, [r2, #8]
     410:	42b2      	cmp	r2, r6
     412:	d00b      	beq.n	42c <ADXL375_disable_interrupt+0x74>
     414:	1c1e      	adds	r6, r3, #0
     416:	e003      	b.n	420 <ADXL375_disable_interrupt+0x68>
     418:	2600      	movs	r6, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	timeout = 0;
	// Read back the value from the interrupt enable reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     41a:	4c13      	ldr	r4, [pc, #76]	; (468 <ADXL375_disable_interrupt+0xb0>)
     41c:	4d15      	ldr	r5, [pc, #84]	; (474 <ADXL375_disable_interrupt+0xbc>)
     41e:	4f14      	ldr	r7, [pc, #80]	; (470 <ADXL375_disable_interrupt+0xb8>)
     420:	1c20      	adds	r0, r4, #0
     422:	a901      	add	r1, sp, #4
     424:	47a8      	blx	r5
     426:	7038      	strb	r0, [r7, #0]
     428:	2800      	cmp	r0, #0
     42a:	d1ed      	bne.n	408 <ADXL375_disable_interrupt+0x50>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Reset the buffer with the disabled interrupt bit set low
	wr_buffer[1] = wr_buffer[0] & ~interrupt_src;
     42c:	466b      	mov	r3, sp
     42e:	781b      	ldrb	r3, [r3, #0]
     430:	4642      	mov	r2, r8
     432:	4393      	bics	r3, r2
     434:	466a      	mov	r2, sp
     436:	7053      	strb	r3, [r2, #1]
	wr_buffer[0] = ADXL375_INT_EN_ADDR;
     438:	232e      	movs	r3, #46	; 0x2e
     43a:	7013      	strb	r3, [r2, #0]
	timeout = 0;
     43c:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     43e:	4c0a      	ldr	r4, [pc, #40]	; (468 <ADXL375_disable_interrupt+0xb0>)
     440:	4f0a      	ldr	r7, [pc, #40]	; (46c <ADXL375_disable_interrupt+0xb4>)
     442:	4e0b      	ldr	r6, [pc, #44]	; (470 <ADXL375_disable_interrupt+0xb8>)
     444:	e006      	b.n	454 <ADXL375_disable_interrupt+0x9c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     446:	1c6b      	adds	r3, r5, #1
     448:	b29b      	uxth	r3, r3
     44a:	4a07      	ldr	r2, [pc, #28]	; (468 <ADXL375_disable_interrupt+0xb0>)
     44c:	8912      	ldrh	r2, [r2, #8]
     44e:	42aa      	cmp	r2, r5
     450:	d006      	beq.n	460 <ADXL375_disable_interrupt+0xa8>
     452:	1c1d      	adds	r5, r3, #0
	// Reset the buffer with the disabled interrupt bit set low
	wr_buffer[1] = wr_buffer[0] & ~interrupt_src;
	wr_buffer[0] = ADXL375_INT_EN_ADDR;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     454:	1c20      	adds	r0, r4, #0
     456:	a901      	add	r1, sp, #4
     458:	47b8      	blx	r7
     45a:	7030      	strb	r0, [r6, #0]
     45c:	2800      	cmp	r0, #0
     45e:	d1f2      	bne.n	446 <ADXL375_disable_interrupt+0x8e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     460:	b004      	add	sp, #16
     462:	bc04      	pop	{r2}
     464:	4690      	mov	r8, r2
     466:	bdf0      	pop	{r4, r5, r6, r7, pc}
     468:	20001cb4 	.word	0x20001cb4
     46c:	00001841 	.word	0x00001841
     470:	20001e9e 	.word	0x20001e9e
     474:	0000182d 	.word	0x0000182d

00000478 <ADXL375_enable_interrupt>:
/* @params[in] interrupt_src the integer representation of the interrupt source
/* (See ADXL375 datasheet for sources)
/* @returns none
**************************************************************************/
void ADXL375_enable_interrupt(uint8_t interrupt_src)
{
     478:	b5f0      	push	{r4, r5, r6, r7, lr}
     47a:	4647      	mov	r7, r8
     47c:	b480      	push	{r7}
     47e:	b084      	sub	sp, #16
     480:	4680      	mov	r8, r0
	struct i2c_master_packet i2c_packet;
	uint8_t wr_buffer[2] = {ADXL375_INT_EN_ADDR, interrupt_src};
     482:	232e      	movs	r3, #46	; 0x2e
     484:	466a      	mov	r2, sp
     486:	7013      	strb	r3, [r2, #0]
     488:	466b      	mov	r3, sp
     48a:	7058      	strb	r0, [r3, #1]
	uint16_t timeout = 0;
	
	i2c_packet.address = ADXL375_ADDR;
     48c:	ab01      	add	r3, sp, #4
     48e:	2253      	movs	r2, #83	; 0x53
     490:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     492:	2200      	movs	r2, #0
     494:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     496:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 1;
     498:	3201      	adds	r2, #1
     49a:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     49c:	466a      	mov	r2, sp
     49e:	9202      	str	r2, [sp, #8]
**************************************************************************/
void ADXL375_enable_interrupt(uint8_t interrupt_src)
{
	struct i2c_master_packet i2c_packet;
	uint8_t wr_buffer[2] = {ADXL375_INT_EN_ADDR, interrupt_src};
	uint16_t timeout = 0;
     4a0:	2600      	movs	r6, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer;
	
	// Write the interrupt enable address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     4a2:	4c22      	ldr	r4, [pc, #136]	; (52c <ADXL375_enable_interrupt+0xb4>)
     4a4:	4d22      	ldr	r5, [pc, #136]	; (530 <ADXL375_enable_interrupt+0xb8>)
     4a6:	4f23      	ldr	r7, [pc, #140]	; (534 <ADXL375_enable_interrupt+0xbc>)
     4a8:	e006      	b.n	4b8 <ADXL375_enable_interrupt+0x40>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     4aa:	1c73      	adds	r3, r6, #1
     4ac:	b29b      	uxth	r3, r3
     4ae:	4a1f      	ldr	r2, [pc, #124]	; (52c <ADXL375_enable_interrupt+0xb4>)
     4b0:	8912      	ldrh	r2, [r2, #8]
     4b2:	42b2      	cmp	r2, r6
     4b4:	d010      	beq.n	4d8 <ADXL375_enable_interrupt+0x60>
     4b6:	1c1e      	adds	r6, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer;
	
	// Write the interrupt enable address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     4b8:	1c20      	adds	r0, r4, #0
     4ba:	a901      	add	r1, sp, #4
     4bc:	47a8      	blx	r5
     4be:	7038      	strb	r0, [r7, #0]
     4c0:	2800      	cmp	r0, #0
     4c2:	d1f2      	bne.n	4aa <ADXL375_enable_interrupt+0x32>
     4c4:	2600      	movs	r6, #0
     4c6:	e008      	b.n	4da <ADXL375_enable_interrupt+0x62>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	timeout = 0;
	// Read back the value from the interrupt enable reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     4c8:	1c73      	adds	r3, r6, #1
     4ca:	b29b      	uxth	r3, r3
     4cc:	4a17      	ldr	r2, [pc, #92]	; (52c <ADXL375_enable_interrupt+0xb4>)
     4ce:	8912      	ldrh	r2, [r2, #8]
     4d0:	42b2      	cmp	r2, r6
     4d2:	d00b      	beq.n	4ec <ADXL375_enable_interrupt+0x74>
     4d4:	1c1e      	adds	r6, r3, #0
     4d6:	e003      	b.n	4e0 <ADXL375_enable_interrupt+0x68>
     4d8:	2600      	movs	r6, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	timeout = 0;
	// Read back the value from the interrupt enable reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     4da:	4c14      	ldr	r4, [pc, #80]	; (52c <ADXL375_enable_interrupt+0xb4>)
     4dc:	4d16      	ldr	r5, [pc, #88]	; (538 <ADXL375_enable_interrupt+0xc0>)
     4de:	4f15      	ldr	r7, [pc, #84]	; (534 <ADXL375_enable_interrupt+0xbc>)
     4e0:	1c20      	adds	r0, r4, #0
     4e2:	a901      	add	r1, sp, #4
     4e4:	47a8      	blx	r5
     4e6:	7038      	strb	r0, [r7, #0]
     4e8:	2800      	cmp	r0, #0
     4ea:	d1ed      	bne.n	4c8 <ADXL375_enable_interrupt+0x50>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Reset the buffer with the enabled interrupt bit set high
	wr_buffer[1] = wr_buffer[0] | interrupt_src;
     4ec:	466b      	mov	r3, sp
     4ee:	781b      	ldrb	r3, [r3, #0]
     4f0:	4645      	mov	r5, r8
     4f2:	431d      	orrs	r5, r3
     4f4:	466b      	mov	r3, sp
     4f6:	705d      	strb	r5, [r3, #1]
	wr_buffer[0] = ADXL375_INT_EN_ADDR;
     4f8:	232e      	movs	r3, #46	; 0x2e
     4fa:	466a      	mov	r2, sp
     4fc:	7013      	strb	r3, [r2, #0]
	timeout = 0;
     4fe:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     500:	4c0a      	ldr	r4, [pc, #40]	; (52c <ADXL375_enable_interrupt+0xb4>)
     502:	4f0b      	ldr	r7, [pc, #44]	; (530 <ADXL375_enable_interrupt+0xb8>)
     504:	4e0b      	ldr	r6, [pc, #44]	; (534 <ADXL375_enable_interrupt+0xbc>)
     506:	e006      	b.n	516 <ADXL375_enable_interrupt+0x9e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     508:	1c6b      	adds	r3, r5, #1
     50a:	b29b      	uxth	r3, r3
     50c:	4a07      	ldr	r2, [pc, #28]	; (52c <ADXL375_enable_interrupt+0xb4>)
     50e:	8912      	ldrh	r2, [r2, #8]
     510:	42aa      	cmp	r2, r5
     512:	d006      	beq.n	522 <ADXL375_enable_interrupt+0xaa>
     514:	1c1d      	adds	r5, r3, #0
	// Reset the buffer with the enabled interrupt bit set high
	wr_buffer[1] = wr_buffer[0] | interrupt_src;
	wr_buffer[0] = ADXL375_INT_EN_ADDR;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     516:	1c20      	adds	r0, r4, #0
     518:	a901      	add	r1, sp, #4
     51a:	47b8      	blx	r7
     51c:	7030      	strb	r0, [r6, #0]
     51e:	2800      	cmp	r0, #0
     520:	d1f2      	bne.n	508 <ADXL375_enable_interrupt+0x90>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     522:	b004      	add	sp, #16
     524:	bc04      	pop	{r2}
     526:	4690      	mov	r8, r2
     528:	bdf0      	pop	{r4, r5, r6, r7, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	20001cb4 	.word	0x20001cb4
     530:	00001841 	.word	0x00001841
     534:	20001e9e 	.word	0x20001e9e
     538:	0000182d 	.word	0x0000182d

0000053c <ADXL375_set_activity_thresh>:
/* @param[in] y, indicates whether the y axis should be considered for interrupts
/* @param[in] z, indicates whether the z axis should be considered for interrupts
/* @returns none
/************************************************************************/
void ADXL375_set_activity_thresh(int8_t threshold, bool x, bool y, bool z)
{
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b087      	sub	sp, #28
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer1[2] = {ADXL375_THRESH_ACT_ADDR, threshold};
     540:	ac02      	add	r4, sp, #8
     542:	2524      	movs	r5, #36	; 0x24
     544:	7025      	strb	r5, [r4, #0]
     546:	7060      	strb	r0, [r4, #1]
	uint8_t wr_buffer2[2] = {ADXL375_ACT_INACT_CTL_ADDR, (x ? ADXL375_ACT_INACT_ACT_X_EN : 0x00) | (y ? ADXL375_ACT_INACT_ACT_Y_EN : 0x00) | (z ? ADXL375_ACT_INACT_ACT_Z_EN : 0x00)};
     548:	2427      	movs	r4, #39	; 0x27
     54a:	a801      	add	r0, sp, #4
     54c:	7004      	strb	r4, [r0, #0]
     54e:	1e48      	subs	r0, r1, #1
     550:	4181      	sbcs	r1, r0
     552:	0188      	lsls	r0, r1, #6
     554:	1c11      	adds	r1, r2, #0
     556:	1e4a      	subs	r2, r1, #1
     558:	4191      	sbcs	r1, r2
     55a:	0149      	lsls	r1, r1, #5
     55c:	4301      	orrs	r1, r0
     55e:	1e5a      	subs	r2, r3, #1
     560:	4193      	sbcs	r3, r2
     562:	011b      	lsls	r3, r3, #4
     564:	430b      	orrs	r3, r1
     566:	aa01      	add	r2, sp, #4
     568:	7053      	strb	r3, [r2, #1]
	
	i2c_packet.address = ADXL375_ADDR;
     56a:	ab03      	add	r3, sp, #12
     56c:	2253      	movs	r2, #83	; 0x53
     56e:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     570:	2200      	movs	r2, #0
     572:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     574:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     576:	3202      	adds	r2, #2
     578:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer1;
     57a:	aa02      	add	r2, sp, #8
     57c:	9204      	str	r2, [sp, #16]
/************************************************************************/
void ADXL375_set_activity_thresh(int8_t threshold, bool x, bool y, bool z)
{
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     57e:	2500      	movs	r5, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     580:	4c2d      	ldr	r4, [pc, #180]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     582:	4f2e      	ldr	r7, [pc, #184]	; (63c <ADXL375_set_activity_thresh+0x100>)
     584:	4e2e      	ldr	r6, [pc, #184]	; (640 <ADXL375_set_activity_thresh+0x104>)
     586:	e006      	b.n	596 <ADXL375_set_activity_thresh+0x5a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     588:	1c6b      	adds	r3, r5, #1
     58a:	b29b      	uxth	r3, r3
     58c:	4a2a      	ldr	r2, [pc, #168]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     58e:	8912      	ldrh	r2, [r2, #8]
     590:	42aa      	cmp	r2, r5
     592:	d006      	beq.n	5a2 <ADXL375_set_activity_thresh+0x66>
     594:	1c1d      	adds	r5, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     596:	1c20      	adds	r0, r4, #0
     598:	a903      	add	r1, sp, #12
     59a:	47b8      	blx	r7
     59c:	7030      	strb	r0, [r6, #0]
     59e:	2800      	cmp	r0, #0
     5a0:	d1f2      	bne.n	588 <ADXL375_set_activity_thresh+0x4c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the activity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
     5a2:	ab03      	add	r3, sp, #12
     5a4:	2201      	movs	r2, #1
     5a6:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer2;
     5a8:	aa01      	add	r2, sp, #4
     5aa:	9204      	str	r2, [sp, #16]
	timeout = 0;
     5ac:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     5ae:	4c22      	ldr	r4, [pc, #136]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     5b0:	4f22      	ldr	r7, [pc, #136]	; (63c <ADXL375_set_activity_thresh+0x100>)
     5b2:	4e23      	ldr	r6, [pc, #140]	; (640 <ADXL375_set_activity_thresh+0x104>)
     5b4:	e006      	b.n	5c4 <ADXL375_set_activity_thresh+0x88>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     5b6:	1c6b      	adds	r3, r5, #1
     5b8:	b29b      	uxth	r3, r3
     5ba:	4a1f      	ldr	r2, [pc, #124]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     5bc:	8912      	ldrh	r2, [r2, #8]
     5be:	42aa      	cmp	r2, r5
     5c0:	d010      	beq.n	5e4 <ADXL375_set_activity_thresh+0xa8>
     5c2:	1c1d      	adds	r5, r3, #0
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the activity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer2;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     5c4:	1c20      	adds	r0, r4, #0
     5c6:	a903      	add	r1, sp, #12
     5c8:	47b8      	blx	r7
     5ca:	7030      	strb	r0, [r6, #0]
     5cc:	2800      	cmp	r0, #0
     5ce:	d1f2      	bne.n	5b6 <ADXL375_set_activity_thresh+0x7a>
     5d0:	2500      	movs	r5, #0
     5d2:	e008      	b.n	5e6 <ADXL375_set_activity_thresh+0xaa>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     5d4:	1c6b      	adds	r3, r5, #1
     5d6:	b29b      	uxth	r3, r3
     5d8:	4a17      	ldr	r2, [pc, #92]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     5da:	8912      	ldrh	r2, [r2, #8]
     5dc:	42aa      	cmp	r2, r5
     5de:	d00b      	beq.n	5f8 <ADXL375_set_activity_thresh+0xbc>
     5e0:	1c1d      	adds	r5, r3, #0
     5e2:	e003      	b.n	5ec <ADXL375_set_activity_thresh+0xb0>
     5e4:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     5e6:	4c14      	ldr	r4, [pc, #80]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     5e8:	4f16      	ldr	r7, [pc, #88]	; (644 <ADXL375_set_activity_thresh+0x108>)
     5ea:	4e15      	ldr	r6, [pc, #84]	; (640 <ADXL375_set_activity_thresh+0x104>)
     5ec:	1c20      	adds	r0, r4, #0
     5ee:	a903      	add	r1, sp, #12
     5f0:	47b8      	blx	r7
     5f2:	7030      	strb	r0, [r6, #0]
     5f4:	2800      	cmp	r0, #0
     5f6:	d1ed      	bne.n	5d4 <ADXL375_set_activity_thresh+0x98>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	wr_buffer2[1] |= wr_buffer2[0];
     5f8:	ab01      	add	r3, sp, #4
     5fa:	7819      	ldrb	r1, [r3, #0]
     5fc:	785a      	ldrb	r2, [r3, #1]
     5fe:	430a      	orrs	r2, r1
     600:	705a      	strb	r2, [r3, #1]
	wr_buffer2[0] = ADXL375_ACT_INACT_CTL_ADDR;
     602:	2227      	movs	r2, #39	; 0x27
     604:	701a      	strb	r2, [r3, #0]
	
	i2c_packet.data_length = 2;
     606:	aa03      	add	r2, sp, #12
     608:	2102      	movs	r1, #2
     60a:	8051      	strh	r1, [r2, #2]
	i2c_packet.data = wr_buffer2;
     60c:	9304      	str	r3, [sp, #16]
	timeout = 0;
     60e:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     610:	4c09      	ldr	r4, [pc, #36]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     612:	4f0a      	ldr	r7, [pc, #40]	; (63c <ADXL375_set_activity_thresh+0x100>)
     614:	4e0a      	ldr	r6, [pc, #40]	; (640 <ADXL375_set_activity_thresh+0x104>)
     616:	e006      	b.n	626 <ADXL375_set_activity_thresh+0xea>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     618:	1c6b      	adds	r3, r5, #1
     61a:	b29b      	uxth	r3, r3
     61c:	4a06      	ldr	r2, [pc, #24]	; (638 <ADXL375_set_activity_thresh+0xfc>)
     61e:	8912      	ldrh	r2, [r2, #8]
     620:	42aa      	cmp	r2, r5
     622:	d006      	beq.n	632 <ADXL375_set_activity_thresh+0xf6>
     624:	1c1d      	adds	r5, r3, #0
	wr_buffer2[0] = ADXL375_ACT_INACT_CTL_ADDR;
	
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer2;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     626:	1c20      	adds	r0, r4, #0
     628:	a903      	add	r1, sp, #12
     62a:	47b8      	blx	r7
     62c:	7030      	strb	r0, [r6, #0]
     62e:	2800      	cmp	r0, #0
     630:	d1f2      	bne.n	618 <ADXL375_set_activity_thresh+0xdc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     632:	b007      	add	sp, #28
     634:	bdf0      	pop	{r4, r5, r6, r7, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	20001cb4 	.word	0x20001cb4
     63c:	00001841 	.word	0x00001841
     640:	20001e9e 	.word	0x20001e9e
     644:	0000182d 	.word	0x0000182d

00000648 <ADXL375_set_inactivity_thresh>:
/* @param[in] y, indicates whether the y axis should be considered for interrupts
/* @param[in] z, indicates whether the z axis should be considered for interrupts
/* @returns none
/************************************************************************/
void ADXL375_set_inactivity_thresh(int8_t threshold, uint8_t duration, bool x, bool y, bool z)
{
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	b087      	sub	sp, #28
     64c:	ac0c      	add	r4, sp, #48	; 0x30
     64e:	7824      	ldrb	r4, [r4, #0]
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer1[2] = {ADXL375_THRESH_INACT_ADDR, threshold};
     650:	ad02      	add	r5, sp, #8
     652:	2625      	movs	r6, #37	; 0x25
     654:	702e      	strb	r6, [r5, #0]
     656:	7068      	strb	r0, [r5, #1]
	uint8_t wr_buffer2[2] = {ADXL375_TIME_INACT_ADDR, duration};
     658:	a801      	add	r0, sp, #4
     65a:	2526      	movs	r5, #38	; 0x26
     65c:	7005      	strb	r5, [r0, #0]
     65e:	7041      	strb	r1, [r0, #1]
	uint8_t wr_buffer3[2] = {ADXL375_ACT_INACT_CTL_ADDR, (x ? ADXL375_ACT_INACT_INACT_X_EN : 0x00) | (y ? ADXL375_ACT_INACT_INACT_Y_EN : 0x00) | (z ? ADXL375_ACT_INACT_INACT_Z_EN : 0x00)};
     660:	2127      	movs	r1, #39	; 0x27
     662:	4668      	mov	r0, sp
     664:	7001      	strb	r1, [r0, #0]
     666:	1e51      	subs	r1, r2, #1
     668:	418a      	sbcs	r2, r1
     66a:	0092      	lsls	r2, r2, #2
     66c:	1c19      	adds	r1, r3, #0
     66e:	1e4b      	subs	r3, r1, #1
     670:	4199      	sbcs	r1, r3
     672:	0049      	lsls	r1, r1, #1
     674:	4322      	orrs	r2, r4
     676:	1c13      	adds	r3, r2, #0
     678:	430b      	orrs	r3, r1
     67a:	7043      	strb	r3, [r0, #1]

	i2c_packet.address = ADXL375_ADDR;
     67c:	ab03      	add	r3, sp, #12
     67e:	2253      	movs	r2, #83	; 0x53
     680:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     682:	2200      	movs	r2, #0
     684:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     686:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     688:	3202      	adds	r2, #2
     68a:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer1;
     68c:	aa02      	add	r2, sp, #8
     68e:	9204      	str	r2, [sp, #16]
/* @returns none
/************************************************************************/
void ADXL375_set_inactivity_thresh(int8_t threshold, uint8_t duration, bool x, bool y, bool z)
{
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     690:	2500      	movs	r5, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;

	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     692:	4c38      	ldr	r4, [pc, #224]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     694:	4f38      	ldr	r7, [pc, #224]	; (778 <ADXL375_set_inactivity_thresh+0x130>)
     696:	4e39      	ldr	r6, [pc, #228]	; (77c <ADXL375_set_inactivity_thresh+0x134>)
     698:	e006      	b.n	6a8 <ADXL375_set_inactivity_thresh+0x60>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     69a:	1c6b      	adds	r3, r5, #1
     69c:	b29b      	uxth	r3, r3
     69e:	4a35      	ldr	r2, [pc, #212]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     6a0:	8912      	ldrh	r2, [r2, #8]
     6a2:	42aa      	cmp	r2, r5
     6a4:	d006      	beq.n	6b4 <ADXL375_set_inactivity_thresh+0x6c>
     6a6:	1c1d      	adds	r5, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;

	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     6a8:	1c20      	adds	r0, r4, #0
     6aa:	a903      	add	r1, sp, #12
     6ac:	47b8      	blx	r7
     6ae:	7030      	strb	r0, [r6, #0]
     6b0:	2800      	cmp	r0, #0
     6b2:	d1f2      	bne.n	69a <ADXL375_set_inactivity_thresh+0x52>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}

	i2c_packet.data = wr_buffer2;
     6b4:	ab01      	add	r3, sp, #4
     6b6:	9304      	str	r3, [sp, #16]
	timeout = 0;
     6b8:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     6ba:	4c2e      	ldr	r4, [pc, #184]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     6bc:	4f2e      	ldr	r7, [pc, #184]	; (778 <ADXL375_set_inactivity_thresh+0x130>)
     6be:	4e2f      	ldr	r6, [pc, #188]	; (77c <ADXL375_set_inactivity_thresh+0x134>)
     6c0:	e006      	b.n	6d0 <ADXL375_set_inactivity_thresh+0x88>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     6c2:	1c6b      	adds	r3, r5, #1
     6c4:	b29b      	uxth	r3, r3
     6c6:	4a2b      	ldr	r2, [pc, #172]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     6c8:	8912      	ldrh	r2, [r2, #8]
     6ca:	42aa      	cmp	r2, r5
     6cc:	d006      	beq.n	6dc <ADXL375_set_inactivity_thresh+0x94>
     6ce:	1c1d      	adds	r5, r3, #0
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}

	i2c_packet.data = wr_buffer2;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     6d0:	1c20      	adds	r0, r4, #0
     6d2:	a903      	add	r1, sp, #12
     6d4:	47b8      	blx	r7
     6d6:	7030      	strb	r0, [r6, #0]
     6d8:	2800      	cmp	r0, #0
     6da:	d1f2      	bne.n	6c2 <ADXL375_set_inactivity_thresh+0x7a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the inactivity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
     6dc:	ab03      	add	r3, sp, #12
     6de:	2201      	movs	r2, #1
     6e0:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer3;
     6e2:	466a      	mov	r2, sp
     6e4:	9204      	str	r2, [sp, #16]
	timeout = 0;
     6e6:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     6e8:	4c22      	ldr	r4, [pc, #136]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     6ea:	4f23      	ldr	r7, [pc, #140]	; (778 <ADXL375_set_inactivity_thresh+0x130>)
     6ec:	4e23      	ldr	r6, [pc, #140]	; (77c <ADXL375_set_inactivity_thresh+0x134>)
     6ee:	e006      	b.n	6fe <ADXL375_set_inactivity_thresh+0xb6>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     6f0:	1c6b      	adds	r3, r5, #1
     6f2:	b29b      	uxth	r3, r3
     6f4:	4a1f      	ldr	r2, [pc, #124]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     6f6:	8912      	ldrh	r2, [r2, #8]
     6f8:	42aa      	cmp	r2, r5
     6fa:	d010      	beq.n	71e <ADXL375_set_inactivity_thresh+0xd6>
     6fc:	1c1d      	adds	r5, r3, #0
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the inactivity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer3;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     6fe:	1c20      	adds	r0, r4, #0
     700:	a903      	add	r1, sp, #12
     702:	47b8      	blx	r7
     704:	7030      	strb	r0, [r6, #0]
     706:	2800      	cmp	r0, #0
     708:	d1f2      	bne.n	6f0 <ADXL375_set_inactivity_thresh+0xa8>
     70a:	2500      	movs	r5, #0
     70c:	e008      	b.n	720 <ADXL375_set_inactivity_thresh+0xd8>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     70e:	1c6b      	adds	r3, r5, #1
     710:	b29b      	uxth	r3, r3
     712:	4a18      	ldr	r2, [pc, #96]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     714:	8912      	ldrh	r2, [r2, #8]
     716:	42aa      	cmp	r2, r5
     718:	d00b      	beq.n	732 <ADXL375_set_inactivity_thresh+0xea>
     71a:	1c1d      	adds	r5, r3, #0
     71c:	e003      	b.n	726 <ADXL375_set_inactivity_thresh+0xde>
     71e:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     720:	4c14      	ldr	r4, [pc, #80]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     722:	4f17      	ldr	r7, [pc, #92]	; (780 <ADXL375_set_inactivity_thresh+0x138>)
     724:	4e15      	ldr	r6, [pc, #84]	; (77c <ADXL375_set_inactivity_thresh+0x134>)
     726:	1c20      	adds	r0, r4, #0
     728:	a903      	add	r1, sp, #12
     72a:	47b8      	blx	r7
     72c:	7030      	strb	r0, [r6, #0]
     72e:	2800      	cmp	r0, #0
     730:	d1ed      	bne.n	70e <ADXL375_set_inactivity_thresh+0xc6>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	wr_buffer3[1] |= wr_buffer3[0];
     732:	466b      	mov	r3, sp
     734:	781a      	ldrb	r2, [r3, #0]
     736:	785b      	ldrb	r3, [r3, #1]
     738:	4313      	orrs	r3, r2
     73a:	466a      	mov	r2, sp
     73c:	7053      	strb	r3, [r2, #1]
	wr_buffer3[0] = ADXL375_ACT_INACT_CTL_ADDR;
     73e:	2327      	movs	r3, #39	; 0x27
     740:	7013      	strb	r3, [r2, #0]
	
	i2c_packet.data_length = 2;
     742:	ab03      	add	r3, sp, #12
     744:	2202      	movs	r2, #2
     746:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer3;
     748:	466a      	mov	r2, sp
     74a:	9204      	str	r2, [sp, #16]
	timeout = 0;
     74c:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     74e:	4c09      	ldr	r4, [pc, #36]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     750:	4f09      	ldr	r7, [pc, #36]	; (778 <ADXL375_set_inactivity_thresh+0x130>)
     752:	4e0a      	ldr	r6, [pc, #40]	; (77c <ADXL375_set_inactivity_thresh+0x134>)
     754:	e006      	b.n	764 <ADXL375_set_inactivity_thresh+0x11c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     756:	1c6b      	adds	r3, r5, #1
     758:	b29b      	uxth	r3, r3
     75a:	4a06      	ldr	r2, [pc, #24]	; (774 <ADXL375_set_inactivity_thresh+0x12c>)
     75c:	8912      	ldrh	r2, [r2, #8]
     75e:	42aa      	cmp	r2, r5
     760:	d006      	beq.n	770 <ADXL375_set_inactivity_thresh+0x128>
     762:	1c1d      	adds	r5, r3, #0
	wr_buffer3[0] = ADXL375_ACT_INACT_CTL_ADDR;
	
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer3;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     764:	1c20      	adds	r0, r4, #0
     766:	a903      	add	r1, sp, #12
     768:	47b8      	blx	r7
     76a:	7030      	strb	r0, [r6, #0]
     76c:	2800      	cmp	r0, #0
     76e:	d1f2      	bne.n	756 <ADXL375_set_inactivity_thresh+0x10e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	

}
     770:	b007      	add	sp, #28
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
     774:	20001cb4 	.word	0x20001cb4
     778:	00001841 	.word	0x00001841
     77c:	20001e9e 	.word	0x20001e9e
     780:	0000182d 	.word	0x0000182d

00000784 <ADXL375_begin_sampling>:
/* @brief ADXL375_begin_sampling starts sampling on the ADXL375
/* @params none
/* @returns none
/************************************************************************/
void ADXL375_begin_sampling(void)
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	b087      	sub	sp, #28
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	// Set the output data rate for 12.5 Hz (Closest to 10 available) and set for low power mode ("somewhat more noisy" -- datasheet).
	uint8_t wr_buffer[2] = {ADXL375_BW_RATE_ADDR, ADXL375_BW_RATE_LOW_PWR | 0x07};
     788:	ad02      	add	r5, sp, #8
     78a:	4c1e      	ldr	r4, [pc, #120]	; (804 <ADXL375_begin_sampling+0x80>)
     78c:	1c28      	adds	r0, r5, #0
     78e:	1c21      	adds	r1, r4, #0
     790:	2202      	movs	r2, #2
     792:	4e1d      	ldr	r6, [pc, #116]	; (808 <ADXL375_begin_sampling+0x84>)
     794:	47b0      	blx	r6
	uint8_t wr_buffer2[2] = {ADXL375_POWER_CTL_ADDR, ADXL375_POWER_CTL_MEASUSRE};	
     796:	1d21      	adds	r1, r4, #4
     798:	a801      	add	r0, sp, #4
     79a:	2202      	movs	r2, #2
     79c:	47b0      	blx	r6
	
	i2c_packet.address = ADXL375_ADDR;
     79e:	ab03      	add	r3, sp, #12
     7a0:	2253      	movs	r2, #83	; 0x53
     7a2:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     7a4:	2200      	movs	r2, #0
     7a6:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     7a8:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     7aa:	3202      	adds	r2, #2
     7ac:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     7ae:	9504      	str	r5, [sp, #16]
/************************************************************************/
void ADXL375_begin_sampling(void)
{
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     7b0:	2400      	movs	r4, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	// Write the datarate buffer
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     7b2:	4d16      	ldr	r5, [pc, #88]	; (80c <ADXL375_begin_sampling+0x88>)
     7b4:	4f16      	ldr	r7, [pc, #88]	; (810 <ADXL375_begin_sampling+0x8c>)
     7b6:	4e17      	ldr	r6, [pc, #92]	; (814 <ADXL375_begin_sampling+0x90>)
     7b8:	e006      	b.n	7c8 <ADXL375_begin_sampling+0x44>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     7ba:	1c63      	adds	r3, r4, #1
     7bc:	b29b      	uxth	r3, r3
     7be:	4a13      	ldr	r2, [pc, #76]	; (80c <ADXL375_begin_sampling+0x88>)
     7c0:	8912      	ldrh	r2, [r2, #8]
     7c2:	42a2      	cmp	r2, r4
     7c4:	d007      	beq.n	7d6 <ADXL375_begin_sampling+0x52>
     7c6:	1c1c      	adds	r4, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	// Write the datarate buffer
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     7c8:	1c28      	adds	r0, r5, #0
     7ca:	a903      	add	r1, sp, #12
     7cc:	47b8      	blx	r7
     7ce:	7030      	strb	r0, [r6, #0]
     7d0:	2800      	cmp	r0, #0
     7d2:	d1f2      	bne.n	7ba <ADXL375_begin_sampling+0x36>
     7d4:	e000      	b.n	7d8 <ADXL375_begin_sampling+0x54>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     7d6:	1c1c      	adds	r4, r3, #0
	}
	
	// Write the measurement mode buffer
	i2c_packet.data = wr_buffer2;
     7d8:	ab01      	add	r3, sp, #4
     7da:	9304      	str	r3, [sp, #16]
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     7dc:	4d0b      	ldr	r5, [pc, #44]	; (80c <ADXL375_begin_sampling+0x88>)
     7de:	4f0c      	ldr	r7, [pc, #48]	; (810 <ADXL375_begin_sampling+0x8c>)
     7e0:	4e0c      	ldr	r6, [pc, #48]	; (814 <ADXL375_begin_sampling+0x90>)
     7e2:	e006      	b.n	7f2 <ADXL375_begin_sampling+0x6e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     7e4:	1c63      	adds	r3, r4, #1
     7e6:	b29b      	uxth	r3, r3
     7e8:	4a08      	ldr	r2, [pc, #32]	; (80c <ADXL375_begin_sampling+0x88>)
     7ea:	8912      	ldrh	r2, [r2, #8]
     7ec:	42a2      	cmp	r2, r4
     7ee:	d006      	beq.n	7fe <ADXL375_begin_sampling+0x7a>
     7f0:	1c1c      	adds	r4, r3, #0
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Write the measurement mode buffer
	i2c_packet.data = wr_buffer2;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     7f2:	1c28      	adds	r0, r5, #0
     7f4:	a903      	add	r1, sp, #12
     7f6:	47b8      	blx	r7
     7f8:	7030      	strb	r0, [r6, #0]
     7fa:	2800      	cmp	r0, #0
     7fc:	d1f2      	bne.n	7e4 <ADXL375_begin_sampling+0x60>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
}
     7fe:	b007      	add	sp, #28
     800:	bdf0      	pop	{r4, r5, r6, r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	00004a18 	.word	0x00004a18
     808:	00004a01 	.word	0x00004a01
     80c:	20001cb4 	.word	0x20001cb4
     810:	00001841 	.word	0x00001841
     814:	20001e9e 	.word	0x20001e9e

00000818 <ADXL375_end_sampling>:
/* @brief ADXL375_end_sampling ends sampling on the ADXL375 (enters standby mode)
/* @params none
/* @returns none
/************************************************************************/
void ADXL375_end_sampling(void)
{
     818:	b5f0      	push	{r4, r5, r6, r7, lr}
     81a:	b085      	sub	sp, #20
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer[2] = {ADXL375_POWER_CTL_ADDR, ~ADXL375_POWER_CTL_MEASUSRE};	
     81c:	4668      	mov	r0, sp
     81e:	4911      	ldr	r1, [pc, #68]	; (864 <ADXL375_end_sampling+0x4c>)
     820:	3108      	adds	r1, #8
     822:	2202      	movs	r2, #2
     824:	4b10      	ldr	r3, [pc, #64]	; (868 <ADXL375_end_sampling+0x50>)
     826:	4798      	blx	r3
	
	i2c_packet.address = ADXL375_ADDR;
     828:	ab01      	add	r3, sp, #4
     82a:	2253      	movs	r2, #83	; 0x53
     82c:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     82e:	2200      	movs	r2, #0
     830:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     832:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     834:	3202      	adds	r2, #2
     836:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     838:	466a      	mov	r2, sp
     83a:	9202      	str	r2, [sp, #8]
/************************************************************************/
void ADXL375_end_sampling(void)
{
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     83c:	2500      	movs	r5, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     83e:	4c0b      	ldr	r4, [pc, #44]	; (86c <ADXL375_end_sampling+0x54>)
     840:	4f0b      	ldr	r7, [pc, #44]	; (870 <ADXL375_end_sampling+0x58>)
     842:	4e0c      	ldr	r6, [pc, #48]	; (874 <ADXL375_end_sampling+0x5c>)
     844:	e006      	b.n	854 <ADXL375_end_sampling+0x3c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     846:	1c6b      	adds	r3, r5, #1
     848:	b29b      	uxth	r3, r3
     84a:	4a08      	ldr	r2, [pc, #32]	; (86c <ADXL375_end_sampling+0x54>)
     84c:	8912      	ldrh	r2, [r2, #8]
     84e:	42aa      	cmp	r2, r5
     850:	d006      	beq.n	860 <ADXL375_end_sampling+0x48>
     852:	1c1d      	adds	r5, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     854:	1c20      	adds	r0, r4, #0
     856:	a901      	add	r1, sp, #4
     858:	47b8      	blx	r7
     85a:	7030      	strb	r0, [r6, #0]
     85c:	2800      	cmp	r0, #0
     85e:	d1f2      	bne.n	846 <ADXL375_end_sampling+0x2e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     860:	b005      	add	sp, #20
     862:	bdf0      	pop	{r4, r5, r6, r7, pc}
     864:	00004a18 	.word	0x00004a18
     868:	00004a01 	.word	0x00004a01
     86c:	20001cb4 	.word	0x20001cb4
     870:	00001841 	.word	0x00001841
     874:	20001e9e 	.word	0x20001e9e

00000878 <ADXL375_calibrate>:
/* when this function is called. That ensures accurate calibration
/* @params none
/* @returns none                                                                   
/************************************************************************/
void ADXL375_calibrate(void)
{
     878:	b5f0      	push	{r4, r5, r6, r7, lr}
     87a:	464f      	mov	r7, r9
     87c:	b480      	push	{r7}
     87e:	b088      	sub	sp, #32
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer[3] = {ADXL375_DATAX0, ADXL375_DATAY0, ADXL375_DATAZ0};
     880:	a804      	add	r0, sp, #16
     882:	498a      	ldr	r1, [pc, #552]	; (aac <ADXL375_calibrate+0x234>)
     884:	310c      	adds	r1, #12
     886:	2203      	movs	r2, #3
     888:	4b89      	ldr	r3, [pc, #548]	; (ab0 <ADXL375_calibrate+0x238>)
     88a:	4798      	blx	r3
	uint8_t wr_buffer2 = ADXL375_FIFO_STATUS_ADDR;
     88c:	210f      	movs	r1, #15
     88e:	4469      	add	r1, sp
     890:	2339      	movs	r3, #57	; 0x39
     892:	700b      	strb	r3, [r1, #0]
	int8_t data[6];
	volatile int8_t avgs[3] = {0, 0, 0};
     894:	ab01      	add	r3, sp, #4
     896:	2200      	movs	r2, #0
     898:	701a      	strb	r2, [r3, #0]
     89a:	705a      	strb	r2, [r3, #1]
     89c:	709a      	strb	r2, [r3, #2]
	int8_t wr_buffer3[2];
	
	i2c_packet.address = ADXL375_ADDR;
     89e:	ab05      	add	r3, sp, #20
     8a0:	2053      	movs	r0, #83	; 0x53
     8a2:	8018      	strh	r0, [r3, #0]
	i2c_packet.ten_bit_address = false;
     8a4:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     8a6:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 1;
     8a8:	3201      	adds	r2, #1
     8aa:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = &wr_buffer2;
     8ac:	9106      	str	r1, [sp, #24]
	
	ADXL375_begin_sampling();
     8ae:	4b81      	ldr	r3, [pc, #516]	; (ab4 <ADXL375_calibrate+0x23c>)
     8b0:	4798      	blx	r3
     8b2:	4b81      	ldr	r3, [pc, #516]	; (ab8 <ADXL375_calibrate+0x240>)
     8b4:	3b01      	subs	r3, #1
	// Wait for some samples
 	for(int i = 0; i < 65535; i++);
     8b6:	2b00      	cmp	r3, #0
     8b8:	d1fc      	bne.n	8b4 <ADXL375_calibrate+0x3c>
	ADXL375_end_sampling();
     8ba:	4b80      	ldr	r3, [pc, #512]	; (abc <ADXL375_calibrate+0x244>)
     8bc:	4798      	blx	r3
     8be:	4b7e      	ldr	r3, [pc, #504]	; (ab8 <ADXL375_calibrate+0x240>)
     8c0:	3b01      	subs	r3, #1
	// Make sure some time has passed so that the data can be moved from the fifo to the regs
	for(int i = 0; i < 65535; i++);
     8c2:	2b00      	cmp	r3, #0
     8c4:	d1fc      	bne.n	8c0 <ADXL375_calibrate+0x48>
     8c6:	2400      	movs	r4, #0
	
	// Write the fifo status reg address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8c8:	4d7d      	ldr	r5, [pc, #500]	; (ac0 <ADXL375_calibrate+0x248>)
     8ca:	4f7e      	ldr	r7, [pc, #504]	; (ac4 <ADXL375_calibrate+0x24c>)
     8cc:	4e7e      	ldr	r6, [pc, #504]	; (ac8 <ADXL375_calibrate+0x250>)
     8ce:	e006      	b.n	8de <ADXL375_calibrate+0x66>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     8d0:	1c63      	adds	r3, r4, #1
     8d2:	b29b      	uxth	r3, r3
     8d4:	4a7a      	ldr	r2, [pc, #488]	; (ac0 <ADXL375_calibrate+0x248>)
     8d6:	8912      	ldrh	r2, [r2, #8]
     8d8:	42a2      	cmp	r2, r4
     8da:	d00f      	beq.n	8fc <ADXL375_calibrate+0x84>
     8dc:	1c1c      	adds	r4, r3, #0
	ADXL375_end_sampling();
	// Make sure some time has passed so that the data can be moved from the fifo to the regs
	for(int i = 0; i < 65535; i++);
	
	// Write the fifo status reg address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8de:	1c28      	adds	r0, r5, #0
     8e0:	a905      	add	r1, sp, #20
     8e2:	47b8      	blx	r7
     8e4:	7030      	strb	r0, [r6, #0]
     8e6:	2800      	cmp	r0, #0
     8e8:	d1f2      	bne.n	8d0 <ADXL375_calibrate+0x58>
     8ea:	e008      	b.n	8fe <ADXL375_calibrate+0x86>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Read back the value from the fifo status reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     8ec:	1c63      	adds	r3, r4, #1
     8ee:	b29b      	uxth	r3, r3
     8f0:	4a73      	ldr	r2, [pc, #460]	; (ac0 <ADXL375_calibrate+0x248>)
     8f2:	8912      	ldrh	r2, [r2, #8]
     8f4:	42a2      	cmp	r2, r4
     8f6:	d00c      	beq.n	912 <ADXL375_calibrate+0x9a>
     8f8:	1c1c      	adds	r4, r3, #0
     8fa:	e003      	b.n	904 <ADXL375_calibrate+0x8c>
	// Make sure some time has passed so that the data can be moved from the fifo to the regs
	for(int i = 0; i < 65535; i++);
	
	// Write the fifo status reg address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     8fc:	1c1c      	adds	r4, r3, #0
	}
	
	// Read back the value from the fifo status reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8fe:	4d70      	ldr	r5, [pc, #448]	; (ac0 <ADXL375_calibrate+0x248>)
     900:	4f72      	ldr	r7, [pc, #456]	; (acc <ADXL375_calibrate+0x254>)
     902:	4e71      	ldr	r6, [pc, #452]	; (ac8 <ADXL375_calibrate+0x250>)
     904:	1c28      	adds	r0, r5, #0
     906:	a905      	add	r1, sp, #20
     908:	47b8      	blx	r7
     90a:	7030      	strb	r0, [r6, #0]
     90c:	2800      	cmp	r0, #0
     90e:	d1ed      	bne.n	8ec <ADXL375_calibrate+0x74>
     910:	e000      	b.n	914 <ADXL375_calibrate+0x9c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     912:	1c1c      	adds	r4, r3, #0
	}
	
	i2c_packet.data_length = 3;
     914:	ab05      	add	r3, sp, #20
     916:	2203      	movs	r2, #3
     918:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     91a:	aa04      	add	r2, sp, #16
     91c:	9206      	str	r2, [sp, #24]
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     91e:	4d68      	ldr	r5, [pc, #416]	; (ac0 <ADXL375_calibrate+0x248>)
     920:	4f68      	ldr	r7, [pc, #416]	; (ac4 <ADXL375_calibrate+0x24c>)
     922:	4e69      	ldr	r6, [pc, #420]	; (ac8 <ADXL375_calibrate+0x250>)
     924:	e006      	b.n	934 <ADXL375_calibrate+0xbc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     926:	1c63      	adds	r3, r4, #1
     928:	b29b      	uxth	r3, r3
     92a:	4a65      	ldr	r2, [pc, #404]	; (ac0 <ADXL375_calibrate+0x248>)
     92c:	8912      	ldrh	r2, [r2, #8]
     92e:	42a2      	cmp	r2, r4
     930:	d007      	beq.n	942 <ADXL375_calibrate+0xca>
     932:	1c1c      	adds	r4, r3, #0
	}
	
	i2c_packet.data_length = 3;
	i2c_packet.data = wr_buffer;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     934:	1c28      	adds	r0, r5, #0
     936:	a905      	add	r1, sp, #20
     938:	47b8      	blx	r7
     93a:	7030      	strb	r0, [r6, #0]
     93c:	2800      	cmp	r0, #0
     93e:	d1f2      	bne.n	926 <ADXL375_calibrate+0xae>
     940:	e000      	b.n	944 <ADXL375_calibrate+0xcc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     942:	1c1c      	adds	r4, r3, #0
	}
	
	i2c_packet.data_length = 3;
     944:	ab05      	add	r3, sp, #20
     946:	2203      	movs	r2, #3
     948:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = data;
     94a:	aa02      	add	r2, sp, #8
     94c:	9206      	str	r2, [sp, #24]
	for(int i = 0; i < wr_buffer2; i++){
     94e:	230f      	movs	r3, #15
     950:	446b      	add	r3, sp
     952:	781b      	ldrb	r3, [r3, #0]
     954:	4699      	mov	r9, r3
     956:	2500      	movs	r5, #0
     958:	2b00      	cmp	r3, #0
     95a:	dc08      	bgt.n	96e <ADXL375_calibrate+0xf6>
     95c:	e029      	b.n	9b2 <ADXL375_calibrate+0x13a>
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     95e:	1c63      	adds	r3, r4, #1
     960:	b29b      	uxth	r3, r3
     962:	4a57      	ldr	r2, [pc, #348]	; (ac0 <ADXL375_calibrate+0x248>)
     964:	8912      	ldrh	r2, [r2, #8]
     966:	42a2      	cmp	r2, r4
     968:	d00a      	beq.n	980 <ADXL375_calibrate+0x108>
     96a:	1c1c      	adds	r4, r3, #0
     96c:	e001      	b.n	972 <ADXL375_calibrate+0xfa>
	}
	
	i2c_packet.data_length = 3;
	i2c_packet.data = data;
	for(int i = 0; i < wr_buffer2; i++){
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     96e:	4f57      	ldr	r7, [pc, #348]	; (acc <ADXL375_calibrate+0x254>)
     970:	4e55      	ldr	r6, [pc, #340]	; (ac8 <ADXL375_calibrate+0x250>)
     972:	4853      	ldr	r0, [pc, #332]	; (ac0 <ADXL375_calibrate+0x248>)
     974:	a905      	add	r1, sp, #20
     976:	47b8      	blx	r7
     978:	7030      	strb	r0, [r6, #0]
     97a:	2800      	cmp	r0, #0
     97c:	d1ef      	bne.n	95e <ADXL375_calibrate+0xe6>
     97e:	e000      	b.n	982 <ADXL375_calibrate+0x10a>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     980:	1c1c      	adds	r4, r3, #0
		}
		avgs[0] += (data[0]);
     982:	ab01      	add	r3, sp, #4
     984:	7818      	ldrb	r0, [r3, #0]
     986:	a902      	add	r1, sp, #8
     988:	780a      	ldrb	r2, [r1, #0]
     98a:	1882      	adds	r2, r0, r2
     98c:	b2d2      	uxtb	r2, r2
     98e:	701a      	strb	r2, [r3, #0]
		avgs[1] += (data[1]);
     990:	7858      	ldrb	r0, [r3, #1]
     992:	784a      	ldrb	r2, [r1, #1]
     994:	1882      	adds	r2, r0, r2
     996:	b2d2      	uxtb	r2, r2
     998:	705a      	strb	r2, [r3, #1]
		avgs[2] += (data[2]);
     99a:	7898      	ldrb	r0, [r3, #2]
     99c:	788a      	ldrb	r2, [r1, #2]
     99e:	1882      	adds	r2, r0, r2
     9a0:	b2d2      	uxtb	r2, r2
     9a2:	709a      	strb	r2, [r3, #2]
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data_length = 3;
	i2c_packet.data = data;
	for(int i = 0; i < wr_buffer2; i++){
     9a4:	3501      	adds	r5, #1
     9a6:	230f      	movs	r3, #15
     9a8:	446b      	add	r3, sp
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	4699      	mov	r9, r3
     9ae:	42ab      	cmp	r3, r5
     9b0:	dcdf      	bgt.n	972 <ADXL375_calibrate+0xfa>
		}
		avgs[0] += (data[0]);
		avgs[1] += (data[1]);
		avgs[2] += (data[2]);
	}
	avgs[0] /= wr_buffer2;
     9b2:	ad01      	add	r5, sp, #4
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	b240      	sxtb	r0, r0
     9b8:	4e45      	ldr	r6, [pc, #276]	; (ad0 <ADXL375_calibrate+0x258>)
     9ba:	4649      	mov	r1, r9
     9bc:	47b0      	blx	r6
     9be:	b2c0      	uxtb	r0, r0
     9c0:	7028      	strb	r0, [r5, #0]
	avgs[1] /= wr_buffer2;
     9c2:	7868      	ldrb	r0, [r5, #1]
     9c4:	b240      	sxtb	r0, r0
     9c6:	4649      	mov	r1, r9
     9c8:	47b0      	blx	r6
     9ca:	b2c0      	uxtb	r0, r0
     9cc:	7068      	strb	r0, [r5, #1]
	avgs[2] /= wr_buffer2;
     9ce:	78a8      	ldrb	r0, [r5, #2]
     9d0:	b240      	sxtb	r0, r0
     9d2:	4649      	mov	r1, r9
     9d4:	47b0      	blx	r6
     9d6:	b2c0      	uxtb	r0, r0
     9d8:	70a8      	strb	r0, [r5, #2]
	
	
	i2c_packet.data_length = 2;
     9da:	ab05      	add	r3, sp, #20
     9dc:	2202      	movs	r2, #2
     9de:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = &wr_buffer3;
     9e0:	466a      	mov	r2, sp
     9e2:	9206      	str	r2, [sp, #24]
	
	wr_buffer3[0] = ADXL375_OFSX_ADDR;
     9e4:	231e      	movs	r3, #30
     9e6:	7013      	strb	r3, [r2, #0]
	wr_buffer3[1] = avgs[0];
     9e8:	782b      	ldrb	r3, [r5, #0]
     9ea:	7053      	strb	r3, [r2, #1]
	
	// Write offset x
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     9ec:	4d34      	ldr	r5, [pc, #208]	; (ac0 <ADXL375_calibrate+0x248>)
     9ee:	4f35      	ldr	r7, [pc, #212]	; (ac4 <ADXL375_calibrate+0x24c>)
     9f0:	4e35      	ldr	r6, [pc, #212]	; (ac8 <ADXL375_calibrate+0x250>)
     9f2:	e006      	b.n	a02 <ADXL375_calibrate+0x18a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     9f4:	1c63      	adds	r3, r4, #1
     9f6:	b29b      	uxth	r3, r3
     9f8:	4a31      	ldr	r2, [pc, #196]	; (ac0 <ADXL375_calibrate+0x248>)
     9fa:	8912      	ldrh	r2, [r2, #8]
     9fc:	42a2      	cmp	r2, r4
     9fe:	d006      	beq.n	a0e <ADXL375_calibrate+0x196>
     a00:	1c1c      	adds	r4, r3, #0
	
	wr_buffer3[0] = ADXL375_OFSX_ADDR;
	wr_buffer3[1] = avgs[0];
	
	// Write offset x
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a02:	1c28      	adds	r0, r5, #0
     a04:	a905      	add	r1, sp, #20
     a06:	47b8      	blx	r7
     a08:	7030      	strb	r0, [r6, #0]
     a0a:	2800      	cmp	r0, #0
     a0c:	d1f2      	bne.n	9f4 <ADXL375_calibrate+0x17c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Write offset y
	i2c_packet.data_length = 2;
     a0e:	2202      	movs	r2, #2
     a10:	ab05      	add	r3, sp, #20
     a12:	805a      	strh	r2, [r3, #2]
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
     a14:	231f      	movs	r3, #31
     a16:	466a      	mov	r2, sp
     a18:	7013      	strb	r3, [r2, #0]
	wr_buffer3[1] = avgs[1];
     a1a:	ab01      	add	r3, sp, #4
     a1c:	785b      	ldrb	r3, [r3, #1]
     a1e:	7053      	strb	r3, [r2, #1]
	timeout = 0;
     a20:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a22:	4c27      	ldr	r4, [pc, #156]	; (ac0 <ADXL375_calibrate+0x248>)
     a24:	4f27      	ldr	r7, [pc, #156]	; (ac4 <ADXL375_calibrate+0x24c>)
     a26:	4e28      	ldr	r6, [pc, #160]	; (ac8 <ADXL375_calibrate+0x250>)
     a28:	e006      	b.n	a38 <ADXL375_calibrate+0x1c0>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a2a:	1c6b      	adds	r3, r5, #1
     a2c:	b29b      	uxth	r3, r3
     a2e:	4a24      	ldr	r2, [pc, #144]	; (ac0 <ADXL375_calibrate+0x248>)
     a30:	8912      	ldrh	r2, [r2, #8]
     a32:	42aa      	cmp	r2, r5
     a34:	d006      	beq.n	a44 <ADXL375_calibrate+0x1cc>
     a36:	1c1d      	adds	r5, r3, #0
	// Write offset y
	i2c_packet.data_length = 2;
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
	wr_buffer3[1] = avgs[1];
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a38:	1c20      	adds	r0, r4, #0
     a3a:	a905      	add	r1, sp, #20
     a3c:	47b8      	blx	r7
     a3e:	7030      	strb	r0, [r6, #0]
     a40:	2800      	cmp	r0, #0
     a42:	d1f2      	bne.n	a2a <ADXL375_calibrate+0x1b2>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}

	// Write offset y
	wr_buffer3[0] = ADXL375_OFSZ_ADDR;
     a44:	2320      	movs	r3, #32
     a46:	466a      	mov	r2, sp
     a48:	7013      	strb	r3, [r2, #0]
	wr_buffer3[1] = avgs[2];
     a4a:	ab01      	add	r3, sp, #4
     a4c:	789b      	ldrb	r3, [r3, #2]
     a4e:	7053      	strb	r3, [r2, #1]
	timeout = 0;
     a50:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a52:	4c1b      	ldr	r4, [pc, #108]	; (ac0 <ADXL375_calibrate+0x248>)
     a54:	4f1b      	ldr	r7, [pc, #108]	; (ac4 <ADXL375_calibrate+0x24c>)
     a56:	4e1c      	ldr	r6, [pc, #112]	; (ac8 <ADXL375_calibrate+0x250>)
     a58:	e006      	b.n	a68 <ADXL375_calibrate+0x1f0>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a5a:	1c6b      	adds	r3, r5, #1
     a5c:	b29b      	uxth	r3, r3
     a5e:	4a18      	ldr	r2, [pc, #96]	; (ac0 <ADXL375_calibrate+0x248>)
     a60:	8912      	ldrh	r2, [r2, #8]
     a62:	42aa      	cmp	r2, r5
     a64:	d006      	beq.n	a74 <ADXL375_calibrate+0x1fc>
     a66:	1c1d      	adds	r5, r3, #0

	// Write offset y
	wr_buffer3[0] = ADXL375_OFSZ_ADDR;
	wr_buffer3[1] = avgs[2];
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a68:	1c20      	adds	r0, r4, #0
     a6a:	a905      	add	r1, sp, #20
     a6c:	47b8      	blx	r7
     a6e:	7030      	strb	r0, [r6, #0]
     a70:	2800      	cmp	r0, #0
     a72:	d1f2      	bne.n	a5a <ADXL375_calibrate+0x1e2>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Write offset y
	i2c_packet.data_length = 1;
     a74:	2201      	movs	r2, #1
     a76:	ab05      	add	r3, sp, #20
     a78:	805a      	strh	r2, [r3, #2]
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
     a7a:	231f      	movs	r3, #31
     a7c:	466a      	mov	r2, sp
     a7e:	7013      	strb	r3, [r2, #0]
	timeout = 0;
     a80:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a82:	4c0f      	ldr	r4, [pc, #60]	; (ac0 <ADXL375_calibrate+0x248>)
     a84:	4f0f      	ldr	r7, [pc, #60]	; (ac4 <ADXL375_calibrate+0x24c>)
     a86:	4e10      	ldr	r6, [pc, #64]	; (ac8 <ADXL375_calibrate+0x250>)
     a88:	e006      	b.n	a98 <ADXL375_calibrate+0x220>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a8a:	1c6b      	adds	r3, r5, #1
     a8c:	b29b      	uxth	r3, r3
     a8e:	4a0c      	ldr	r2, [pc, #48]	; (ac0 <ADXL375_calibrate+0x248>)
     a90:	8912      	ldrh	r2, [r2, #8]
     a92:	42aa      	cmp	r2, r5
     a94:	d006      	beq.n	aa4 <ADXL375_calibrate+0x22c>
     a96:	1c1d      	adds	r5, r3, #0
	
	// Write offset y
	i2c_packet.data_length = 1;
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a98:	1c20      	adds	r0, r4, #0
     a9a:	a905      	add	r1, sp, #20
     a9c:	47b8      	blx	r7
     a9e:	7030      	strb	r0, [r6, #0]
     aa0:	2800      	cmp	r0, #0
     aa2:	d1f2      	bne.n	a8a <ADXL375_calibrate+0x212>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     aa4:	b008      	add	sp, #32
     aa6:	bc04      	pop	{r2}
     aa8:	4691      	mov	r9, r2
     aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aac:	00004a18 	.word	0x00004a18
     ab0:	00004a01 	.word	0x00004a01
     ab4:	00000785 	.word	0x00000785
     ab8:	0000ffff 	.word	0x0000ffff
     abc:	00000819 	.word	0x00000819
     ac0:	20001cb4 	.word	0x20001cb4
     ac4:	00001841 	.word	0x00001841
     ac8:	20001e9e 	.word	0x20001e9e
     acc:	0000182d 	.word	0x0000182d
     ad0:	0000473d 	.word	0x0000473d

00000ad4 <configure_ADXL375>:
/* @brief configure_ADXL375 function to configure the ADXL375 accelerometer
/* @params none
/* @returns none
**************************************************************************/
void configure_ADXL375(void)
{
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad6:	b08d      	sub	sp, #52	; 0x34
	// All buffers are separate for readability
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	// FIFO Stream mode (ring buffer) and 32 data points
	uint8_t wr_buffer1[2] = {ADXL375_FIFO_ADDR, ADXL375_FIFO_STREAM | 0x1F};
     ad8:	ae08      	add	r6, sp, #32
     ada:	4c70      	ldr	r4, [pc, #448]	; (c9c <configure_ADXL375+0x1c8>)
     adc:	1c21      	adds	r1, r4, #0
     ade:	3110      	adds	r1, #16
     ae0:	1c30      	adds	r0, r6, #0
     ae2:	2202      	movs	r2, #2
     ae4:	4d6e      	ldr	r5, [pc, #440]	; (ca0 <configure_ADXL375+0x1cc>)
     ae6:	47a8      	blx	r5
	// Map interrupts for act, watermark, and inact to int1
	uint8_t wr_buffer4[2] = {ADXL375_INT_MAP_ADDR, (~ADXL375_INT_MAP_ACTIVITY & ~ADXL375_INT_SRC_WATERMARK & ~ADXL375_INT_SRC_INACTIVITY) & 0xFF};
     ae8:	1c21      	adds	r1, r4, #0
     aea:	3114      	adds	r1, #20
     aec:	a807      	add	r0, sp, #28
     aee:	2202      	movs	r2, #2
     af0:	47a8      	blx	r5
	// Enable interrupts for activity, inactivity, and watermark
	uint8_t wr_buffer5[2] = {ADXL375_INT_EN_ADDR, ADXL375_INT_EN_WATERMARK | ADXL375_INT_EN_ACTIVITY};
     af2:	1c21      	adds	r1, r4, #0
     af4:	3118      	adds	r1, #24
     af6:	a806      	add	r0, sp, #24
     af8:	2202      	movs	r2, #2
     afa:	47a8      	blx	r5
	// Set the part to measure and sleep
	// Realistically, this should be sleep and standby, but the part doesn't wake from standby
	// FIX: change ADXL375 for ADXL362
	uint8_t wr_buffer6[2] = {ADXL375_POWER_CTL_ADDR, ADXL375_POWER_CTL_SLEEP | ADXL375_POWER_CTL_MEASUSRE};
     afc:	1c21      	adds	r1, r4, #0
     afe:	311c      	adds	r1, #28
     b00:	a805      	add	r0, sp, #20
     b02:	2202      	movs	r2, #2
     b04:	47a8      	blx	r5
	//Set low power mode
	uint8_t wr_buffer7[2] = {ADXL375_BW_RATE_ADDR, ADXL375_BW_RATE_LOW_PWR};
     b06:	1c21      	adds	r1, r4, #0
     b08:	3120      	adds	r1, #32
     b0a:	a804      	add	r0, sp, #16
     b0c:	2202      	movs	r2, #2
     b0e:	47a8      	blx	r5
	
	
	// Calibrate the sensor before configuring anything else
	ADXL375_calibrate();
     b10:	4b64      	ldr	r3, [pc, #400]	; (ca4 <configure_ADXL375+0x1d0>)
     b12:	4798      	blx	r3
	
	ADXL375_set_activity_thresh(4, true, true, true);
     b14:	2004      	movs	r0, #4
     b16:	2101      	movs	r1, #1
     b18:	2201      	movs	r2, #1
     b1a:	2301      	movs	r3, #1
     b1c:	4c62      	ldr	r4, [pc, #392]	; (ca8 <configure_ADXL375+0x1d4>)
     b1e:	47a0      	blx	r4
	ADXL375_set_inactivity_thresh(3, 5, true, true, true);
     b20:	2301      	movs	r3, #1
     b22:	9300      	str	r3, [sp, #0]
     b24:	2003      	movs	r0, #3
     b26:	2105      	movs	r1, #5
     b28:	2201      	movs	r2, #1
     b2a:	4c60      	ldr	r4, [pc, #384]	; (cac <configure_ADXL375+0x1d8>)
     b2c:	47a0      	blx	r4
	
	i2c_packet.address = ADXL375_ADDR;
     b2e:	ab09      	add	r3, sp, #36	; 0x24
     b30:	2253      	movs	r2, #83	; 0x53
     b32:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     b34:	2200      	movs	r2, #0
     b36:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     b38:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     b3a:	3202      	adds	r2, #2
     b3c:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer1;
     b3e:	960a      	str	r6, [sp, #40]	; 0x28
**************************************************************************/
void configure_ADXL375(void)
{
	// All buffers are separate for readability
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     b40:	2500      	movs	r5, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	/* Write each packet one at a time, bad for efficiency, but good for readability */
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     b42:	4c5b      	ldr	r4, [pc, #364]	; (cb0 <configure_ADXL375+0x1dc>)
     b44:	4f5b      	ldr	r7, [pc, #364]	; (cb4 <configure_ADXL375+0x1e0>)
     b46:	4e5c      	ldr	r6, [pc, #368]	; (cb8 <configure_ADXL375+0x1e4>)
     b48:	e006      	b.n	b58 <configure_ADXL375+0x84>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     b4a:	1c6b      	adds	r3, r5, #1
     b4c:	b29b      	uxth	r3, r3
     b4e:	4a58      	ldr	r2, [pc, #352]	; (cb0 <configure_ADXL375+0x1dc>)
     b50:	8912      	ldrh	r2, [r2, #8]
     b52:	42aa      	cmp	r2, r5
     b54:	d006      	beq.n	b64 <configure_ADXL375+0x90>
     b56:	1c1d      	adds	r5, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	/* Write each packet one at a time, bad for efficiency, but good for readability */
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     b58:	1c20      	adds	r0, r4, #0
     b5a:	a909      	add	r1, sp, #36	; 0x24
     b5c:	47b8      	blx	r7
     b5e:	7030      	strb	r0, [r6, #0]
     b60:	2800      	cmp	r0, #0
     b62:	d1f2      	bne.n	b4a <configure_ADXL375+0x76>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer4;
     b64:	ab07      	add	r3, sp, #28
     b66:	930a      	str	r3, [sp, #40]	; 0x28
	timeout = 0;
     b68:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     b6a:	4c51      	ldr	r4, [pc, #324]	; (cb0 <configure_ADXL375+0x1dc>)
     b6c:	4f51      	ldr	r7, [pc, #324]	; (cb4 <configure_ADXL375+0x1e0>)
     b6e:	4e52      	ldr	r6, [pc, #328]	; (cb8 <configure_ADXL375+0x1e4>)
     b70:	e006      	b.n	b80 <configure_ADXL375+0xac>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     b72:	1c6b      	adds	r3, r5, #1
     b74:	b29b      	uxth	r3, r3
     b76:	4a4e      	ldr	r2, [pc, #312]	; (cb0 <configure_ADXL375+0x1dc>)
     b78:	8912      	ldrh	r2, [r2, #8]
     b7a:	42aa      	cmp	r2, r5
     b7c:	d006      	beq.n	b8c <configure_ADXL375+0xb8>
     b7e:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer4;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     b80:	1c20      	adds	r0, r4, #0
     b82:	a909      	add	r1, sp, #36	; 0x24
     b84:	47b8      	blx	r7
     b86:	7030      	strb	r0, [r6, #0]
     b88:	2800      	cmp	r0, #0
     b8a:	d1f2      	bne.n	b72 <configure_ADXL375+0x9e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer5;
     b8c:	ab06      	add	r3, sp, #24
     b8e:	930a      	str	r3, [sp, #40]	; 0x28
	timeout = 0;
     b90:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     b92:	4c47      	ldr	r4, [pc, #284]	; (cb0 <configure_ADXL375+0x1dc>)
     b94:	4f47      	ldr	r7, [pc, #284]	; (cb4 <configure_ADXL375+0x1e0>)
     b96:	4e48      	ldr	r6, [pc, #288]	; (cb8 <configure_ADXL375+0x1e4>)
     b98:	e006      	b.n	ba8 <configure_ADXL375+0xd4>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     b9a:	1c6b      	adds	r3, r5, #1
     b9c:	b29b      	uxth	r3, r3
     b9e:	4a44      	ldr	r2, [pc, #272]	; (cb0 <configure_ADXL375+0x1dc>)
     ba0:	8912      	ldrh	r2, [r2, #8]
     ba2:	42aa      	cmp	r2, r5
     ba4:	d006      	beq.n	bb4 <configure_ADXL375+0xe0>
     ba6:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer5;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     ba8:	1c20      	adds	r0, r4, #0
     baa:	a909      	add	r1, sp, #36	; 0x24
     bac:	47b8      	blx	r7
     bae:	7030      	strb	r0, [r6, #0]
     bb0:	2800      	cmp	r0, #0
     bb2:	d1f2      	bne.n	b9a <configure_ADXL375+0xc6>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer6;
     bb4:	ab05      	add	r3, sp, #20
     bb6:	930a      	str	r3, [sp, #40]	; 0x28
	timeout = 0;
     bb8:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     bba:	4c3d      	ldr	r4, [pc, #244]	; (cb0 <configure_ADXL375+0x1dc>)
     bbc:	4f3d      	ldr	r7, [pc, #244]	; (cb4 <configure_ADXL375+0x1e0>)
     bbe:	4e3e      	ldr	r6, [pc, #248]	; (cb8 <configure_ADXL375+0x1e4>)
     bc0:	e006      	b.n	bd0 <configure_ADXL375+0xfc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     bc2:	1c6b      	adds	r3, r5, #1
     bc4:	b29b      	uxth	r3, r3
     bc6:	4a3a      	ldr	r2, [pc, #232]	; (cb0 <configure_ADXL375+0x1dc>)
     bc8:	8912      	ldrh	r2, [r2, #8]
     bca:	42aa      	cmp	r2, r5
     bcc:	d006      	beq.n	bdc <configure_ADXL375+0x108>
     bce:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer6;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     bd0:	1c20      	adds	r0, r4, #0
     bd2:	a909      	add	r1, sp, #36	; 0x24
     bd4:	47b8      	blx	r7
     bd6:	7030      	strb	r0, [r6, #0]
     bd8:	2800      	cmp	r0, #0
     bda:	d1f2      	bne.n	bc2 <configure_ADXL375+0xee>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer7;
     bdc:	ab04      	add	r3, sp, #16
     bde:	930a      	str	r3, [sp, #40]	; 0x28
	timeout = 0;
     be0:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     be2:	4c33      	ldr	r4, [pc, #204]	; (cb0 <configure_ADXL375+0x1dc>)
     be4:	4f33      	ldr	r7, [pc, #204]	; (cb4 <configure_ADXL375+0x1e0>)
     be6:	4e34      	ldr	r6, [pc, #208]	; (cb8 <configure_ADXL375+0x1e4>)
     be8:	e006      	b.n	bf8 <configure_ADXL375+0x124>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     bea:	1c6b      	adds	r3, r5, #1
     bec:	b29b      	uxth	r3, r3
     bee:	4a30      	ldr	r2, [pc, #192]	; (cb0 <configure_ADXL375+0x1dc>)
     bf0:	8912      	ldrh	r2, [r2, #8]
     bf2:	42aa      	cmp	r2, r5
     bf4:	d006      	beq.n	c04 <configure_ADXL375+0x130>
     bf6:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer7;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     bf8:	1c20      	adds	r0, r4, #0
     bfa:	a909      	add	r1, sp, #36	; 0x24
     bfc:	47b8      	blx	r7
     bfe:	7030      	strb	r0, [r6, #0]
     c00:	2800      	cmp	r0, #0
     c02:	d1f2      	bne.n	bea <configure_ADXL375+0x116>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c04:	a903      	add	r1, sp, #12
     c06:	2400      	movs	r4, #0
     c08:	704c      	strb	r4, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c0a:	70cc      	strb	r4, [r1, #3]
	
		
	// Set up the interrupt pin
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = PINMUX_PA16A_EIC_EXTINT0;
     c0c:	700c      	strb	r4, [r1, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c0e:	708c      	strb	r4, [r1, #2]
	
	system_pinmux_pin_set_config(ADXL375_INT_PIN, &config_pinmux);
     c10:	2010      	movs	r0, #16
     c12:	4b2a      	ldr	r3, [pc, #168]	; (cbc <configure_ADXL375+0x1e8>)
     c14:	4798      	blx	r3
	uint32_t pin_index = (gpio_pin % 32);

	if (mode == SYSTEM_PINMUX_PIN_SAMPLE_ONDEMAND) {
		port->CTRL.reg |= (1 << pin_index);
	} else {
		port->CTRL.reg &= ~(1 << pin_index);
     c16:	4a2a      	ldr	r2, [pc, #168]	; (cc0 <configure_ADXL375+0x1ec>)
     c18:	6a51      	ldr	r1, [r2, #36]	; 0x24
     c1a:	4b2a      	ldr	r3, [pc, #168]	; (cc4 <configure_ADXL375+0x1f0>)
     c1c:	400b      	ands	r3, r1
     c1e:	6253      	str	r3, [r2, #36]	; 0x24
	system_pinmux_pin_set_input_sample_mode(ADXL375_INT_PIN, SYSTEM_PINMUX_PIN_SAMPLE_CONTINUOUS);
	
	// Disable the EIC so we can write regs
	REG_EIC_CTRLA = 0;
     c20:	4b29      	ldr	r3, [pc, #164]	; (cc8 <configure_ADXL375+0x1f4>)
     c22:	701c      	strb	r4, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
     c24:	4929      	ldr	r1, [pc, #164]	; (ccc <configure_ADXL375+0x1f8>)
     c26:	2202      	movs	r2, #2
     c28:	680b      	ldr	r3, [r1, #0]
     c2a:	421a      	tst	r2, r3
     c2c:	d1fc      	bne.n	c28 <configure_ADXL375+0x154>
	
	// Enable interrupts on EXTINT[0]
	REG_EIC_INTENSET |= 0x01;
     c2e:	4b28      	ldr	r3, [pc, #160]	; (cd0 <configure_ADXL375+0x1fc>)
     c30:	681a      	ldr	r2, [r3, #0]
     c32:	2101      	movs	r1, #1
     c34:	430a      	orrs	r2, r1
     c36:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_INTENSET & 0x01)) return;
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	4219      	tst	r1, r3
     c3c:	d02c      	beq.n	c98 <configure_ADXL375+0x1c4>
	
	// Turn filtering off and set detection for falling edge for EXTINT[1]
	REG_EIC_CONFIG0 &= ~0x8;
     c3e:	4b25      	ldr	r3, [pc, #148]	; (cd4 <configure_ADXL375+0x200>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	3107      	adds	r1, #7
     c44:	438a      	bics	r2, r1
     c46:	601a      	str	r2, [r3, #0]
	REG_EIC_CONFIG0 |= 0x4;
     c48:	681a      	ldr	r2, [r3, #0]
     c4a:	3904      	subs	r1, #4
     c4c:	430a      	orrs	r2, r1
     c4e:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_CONFIG0 & 0x4) && (REG_EIC_CONFIG0 & 0x8)) return;
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	4219      	tst	r1, r3
     c54:	d103      	bne.n	c5e <configure_ADXL375+0x18a>
     c56:	4b1f      	ldr	r3, [pc, #124]	; (cd4 <configure_ADXL375+0x200>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	071b      	lsls	r3, r3, #28
     c5c:	d41c      	bmi.n	c98 <configure_ADXL375+0x1c4>
	
	// Enable asynchronous interrupts for EXTINT[1]
	REG_EIC_ASYNCH |= 0x00000001;
     c5e:	4b1e      	ldr	r3, [pc, #120]	; (cd8 <configure_ADXL375+0x204>)
     c60:	681a      	ldr	r2, [r3, #0]
     c62:	2101      	movs	r1, #1
     c64:	430a      	orrs	r2, r1
     c66:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_ASYNCH & 0x01)) return;
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	4219      	tst	r1, r3
     c6c:	d014      	beq.n	c98 <configure_ADXL375+0x1c4>
	
	// register the callback function
	if(!(extint_register_callback(ADXL375_ISR_Handler, 0, EXTINT_CALLBACK_TYPE_DETECT) == STATUS_OK)) return;
     c6e:	481b      	ldr	r0, [pc, #108]	; (cdc <configure_ADXL375+0x208>)
     c70:	2100      	movs	r1, #0
     c72:	2200      	movs	r2, #0
     c74:	4b1a      	ldr	r3, [pc, #104]	; (ce0 <configure_ADXL375+0x20c>)
     c76:	4798      	blx	r3
     c78:	2800      	cmp	r0, #0
     c7a:	d10d      	bne.n	c98 <configure_ADXL375+0x1c4>
	
	// Enable the EIC
	REG_EIC_CTRLA = 0x02;
     c7c:	2202      	movs	r2, #2
     c7e:	4b12      	ldr	r3, [pc, #72]	; (cc8 <configure_ADXL375+0x1f4>)
     c80:	701a      	strb	r2, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
     c82:	4912      	ldr	r1, [pc, #72]	; (ccc <configure_ADXL375+0x1f8>)
     c84:	680b      	ldr	r3, [r1, #0]
     c86:	421a      	tst	r2, r3
     c88:	d1fc      	bne.n	c84 <configure_ADXL375+0x1b0>
	
	// Set the buffer index pointer to 0
	uiAccelerometerMatrixPtr = 0;
     c8a:	2200      	movs	r2, #0
     c8c:	4b15      	ldr	r3, [pc, #84]	; (ce4 <configure_ADXL375+0x210>)
     c8e:	801a      	strh	r2, [r3, #0]
	ADXL375_inactive_interrupts = 0;
     c90:	4b15      	ldr	r3, [pc, #84]	; (ce8 <configure_ADXL375+0x214>)
     c92:	701a      	strb	r2, [r3, #0]
	ADXL375_buffer_full_count = 0;
     c94:	4b15      	ldr	r3, [pc, #84]	; (cec <configure_ADXL375+0x218>)
     c96:	701a      	strb	r2, [r3, #0]
	
	
}
     c98:	b00d      	add	sp, #52	; 0x34
     c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c9c:	00004a18 	.word	0x00004a18
     ca0:	00004a01 	.word	0x00004a01
     ca4:	00000879 	.word	0x00000879
     ca8:	0000053d 	.word	0x0000053d
     cac:	00000649 	.word	0x00000649
     cb0:	20001cb4 	.word	0x20001cb4
     cb4:	00001841 	.word	0x00001841
     cb8:	20001e9e 	.word	0x20001e9e
     cbc:	00004405 	.word	0x00004405
     cc0:	40002800 	.word	0x40002800
     cc4:	fffeffff 	.word	0xfffeffff
     cc8:	40002400 	.word	0x40002400
     ccc:	40002404 	.word	0x40002404
     cd0:	40002410 	.word	0x40002410
     cd4:	4000241c 	.word	0x4000241c
     cd8:	40002418 	.word	0x40002418
     cdc:	00000dc1 	.word	0x00000dc1
     ce0:	00003b71 	.word	0x00003b71
     ce4:	20001454 	.word	0x20001454
     ce8:	20001c37 	.word	0x20001c37
     cec:	20001c35 	.word	0x20001c35

00000cf0 <ADXL375_read_samples>:
/* @param[in,out] data, pointer to data array of 3*length
/* @param[in] length, number of bytes to read out per axis
/* @returns none
/************************************************************************/
void ADXL375_read_samples(uint8_t* data, uint8_t length)
{
     cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf2:	465f      	mov	r7, fp
     cf4:	464e      	mov	r6, r9
     cf6:	4645      	mov	r5, r8
     cf8:	b4e0      	push	{r5, r6, r7}
     cfa:	b088      	sub	sp, #32
     cfc:	1c04      	adds	r4, r0, #0
     cfe:	1c0d      	adds	r5, r1, #0
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t tempBuffer[6];
	uint8_t wr_buffer[6] = {ADXL375_DATAX0, ADXL375_DATAX1, ADXL375_DATAY0, ADXL375_DATAY1, ADXL375_DATAZ0, ADXL375_DATAZ1};
     d00:	a801      	add	r0, sp, #4
     d02:	4929      	ldr	r1, [pc, #164]	; (da8 <ADXL375_read_samples+0xb8>)
     d04:	3124      	adds	r1, #36	; 0x24
     d06:	2206      	movs	r2, #6
     d08:	4b28      	ldr	r3, [pc, #160]	; (dac <ADXL375_read_samples+0xbc>)
     d0a:	4798      	blx	r3
	
	i2c_packet.address = ADXL375_ADDR;
     d0c:	ab05      	add	r3, sp, #20
     d0e:	2253      	movs	r2, #83	; 0x53
     d10:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     d12:	2200      	movs	r2, #0
     d14:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     d16:	725a      	strb	r2, [r3, #9]
	
	for(int i = 0; i < length; i++){
     d18:	2d00      	cmp	r5, #0
     d1a:	dd3f      	ble.n	d9c <ADXL375_read_samples+0xac>
     d1c:	46a3      	mov	fp, r4
     d1e:	46a1      	mov	r9, r4
     d20:	44a9      	add	r9, r5
     d22:	2400      	movs	r4, #0
		// Write the registers that should be read out
		i2c_packet.data_length = 6;
		i2c_packet.data = wr_buffer;
		while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     d24:	4e22      	ldr	r6, [pc, #136]	; (db0 <ADXL375_read_samples+0xc0>)
     d26:	4f23      	ldr	r7, [pc, #140]	; (db4 <ADXL375_read_samples+0xc4>)
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	
	for(int i = 0; i < length; i++){
		// Write the registers that should be read out
		i2c_packet.data_length = 6;
     d28:	ab05      	add	r3, sp, #20
     d2a:	2206      	movs	r2, #6
     d2c:	805a      	strh	r2, [r3, #2]
		i2c_packet.data = wr_buffer;
     d2e:	aa01      	add	r2, sp, #4
     d30:	9206      	str	r2, [sp, #24]
		while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     d32:	e006      	b.n	d42 <ADXL375_read_samples+0x52>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     d34:	1c63      	adds	r3, r4, #1
     d36:	b29b      	uxth	r3, r3
     d38:	4a1f      	ldr	r2, [pc, #124]	; (db8 <ADXL375_read_samples+0xc8>)
     d3a:	8912      	ldrh	r2, [r2, #8]
     d3c:	42a2      	cmp	r2, r4
     d3e:	d007      	beq.n	d50 <ADXL375_read_samples+0x60>
     d40:	1c1c      	adds	r4, r3, #0
	
	for(int i = 0; i < length; i++){
		// Write the registers that should be read out
		i2c_packet.data_length = 6;
		i2c_packet.data = wr_buffer;
		while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     d42:	481d      	ldr	r0, [pc, #116]	; (db8 <ADXL375_read_samples+0xc8>)
     d44:	a905      	add	r1, sp, #20
     d46:	47b0      	blx	r6
     d48:	7038      	strb	r0, [r7, #0]
     d4a:	2800      	cmp	r0, #0
     d4c:	d1f2      	bne.n	d34 <ADXL375_read_samples+0x44>
     d4e:	e000      	b.n	d52 <ADXL375_read_samples+0x62>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     d50:	1c1c      	adds	r4, r3, #0
		}
		// Perform the readout
		i2c_packet.data_length = 6;
     d52:	ab05      	add	r3, sp, #20
     d54:	2206      	movs	r2, #6
     d56:	805a      	strh	r2, [r3, #2]
		i2c_packet.data = tempBuffer;
     d58:	aa03      	add	r2, sp, #12
     d5a:	9206      	str	r2, [sp, #24]
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     d5c:	4b17      	ldr	r3, [pc, #92]	; (dbc <ADXL375_read_samples+0xcc>)
     d5e:	4698      	mov	r8, r3
     d60:	4d14      	ldr	r5, [pc, #80]	; (db4 <ADXL375_read_samples+0xc4>)
     d62:	e006      	b.n	d72 <ADXL375_read_samples+0x82>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     d64:	1c63      	adds	r3, r4, #1
     d66:	b29b      	uxth	r3, r3
     d68:	4a13      	ldr	r2, [pc, #76]	; (db8 <ADXL375_read_samples+0xc8>)
     d6a:	8912      	ldrh	r2, [r2, #8]
     d6c:	42a2      	cmp	r2, r4
     d6e:	d007      	beq.n	d80 <ADXL375_read_samples+0x90>
     d70:	1c1c      	adds	r4, r3, #0
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
		}
		// Perform the readout
		i2c_packet.data_length = 6;
		i2c_packet.data = tempBuffer;
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     d72:	4811      	ldr	r0, [pc, #68]	; (db8 <ADXL375_read_samples+0xc8>)
     d74:	a905      	add	r1, sp, #20
     d76:	47c0      	blx	r8
     d78:	7028      	strb	r0, [r5, #0]
     d7a:	2800      	cmp	r0, #0
     d7c:	d1f2      	bne.n	d64 <ADXL375_read_samples+0x74>
     d7e:	e000      	b.n	d82 <ADXL375_read_samples+0x92>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     d80:	1c1c      	adds	r4, r3, #0
		}
		data[i]		= tempBuffer[1];
     d82:	ab03      	add	r3, sp, #12
     d84:	785a      	ldrb	r2, [r3, #1]
     d86:	4659      	mov	r1, fp
     d88:	700a      	strb	r2, [r1, #0]
		data[i+1]	= tempBuffer[3];
     d8a:	78da      	ldrb	r2, [r3, #3]
     d8c:	704a      	strb	r2, [r1, #1]
		data[i+2]	= tempBuffer[5];
     d8e:	795b      	ldrb	r3, [r3, #5]
     d90:	708b      	strb	r3, [r1, #2]
     d92:	2301      	movs	r3, #1
     d94:	469c      	mov	ip, r3
     d96:	44e3      	add	fp, ip
	
	i2c_packet.address = ADXL375_ADDR;
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	
	for(int i = 0; i < length; i++){
     d98:	45cb      	cmp	fp, r9
     d9a:	d1c5      	bne.n	d28 <ADXL375_read_samples+0x38>
		}
		data[i]		= tempBuffer[1];
		data[i+1]	= tempBuffer[3];
		data[i+2]	= tempBuffer[5];
	}
     d9c:	b008      	add	sp, #32
     d9e:	bc1c      	pop	{r2, r3, r4}
     da0:	4690      	mov	r8, r2
     da2:	4699      	mov	r9, r3
     da4:	46a3      	mov	fp, r4
     da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     da8:	00004a18 	.word	0x00004a18
     dac:	00004a01 	.word	0x00004a01
     db0:	00001841 	.word	0x00001841
     db4:	20001e9e 	.word	0x20001e9e
     db8:	20001cb4 	.word	0x20001cb4
     dbc:	0000182d 	.word	0x0000182d

00000dc0 <ADXL375_ISR_Handler>:
/* When INT1 pin on the ADXL375 is triggered, this function is called.
/* @params none
/* @returns none
**************************************************************************/
void ADXL375_ISR_Handler(void)
{
     dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc2:	b085      	sub	sp, #20
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t buffer = ADXL375_INT_SRC_ADDR;
     dc4:	466b      	mov	r3, sp
     dc6:	1cda      	adds	r2, r3, #3
     dc8:	2330      	movs	r3, #48	; 0x30
     dca:	7013      	strb	r3, [r2, #0]
	
	i2c_packet.address = ADXL375_ADDR;
     dcc:	ab01      	add	r3, sp, #4
     dce:	2153      	movs	r1, #83	; 0x53
     dd0:	8019      	strh	r1, [r3, #0]
	i2c_packet.ten_bit_address = false;
     dd2:	2100      	movs	r1, #0
     dd4:	7219      	strb	r1, [r3, #8]
	i2c_packet.high_speed = false;
     dd6:	7259      	strb	r1, [r3, #9]
	i2c_packet.data_length = 1;
     dd8:	3101      	adds	r1, #1
     dda:	8059      	strh	r1, [r3, #2]
	i2c_packet.data = &buffer;
     ddc:	9202      	str	r2, [sp, #8]
/* @returns none
**************************************************************************/
void ADXL375_ISR_Handler(void)
{
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     dde:	2400      	movs	r4, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = &buffer;
	
	// Check the interrupt source value
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     de0:	4d45      	ldr	r5, [pc, #276]	; (ef8 <ADXL375_ISR_Handler+0x138>)
     de2:	4f46      	ldr	r7, [pc, #280]	; (efc <ADXL375_ISR_Handler+0x13c>)
     de4:	4e46      	ldr	r6, [pc, #280]	; (f00 <ADXL375_ISR_Handler+0x140>)
     de6:	e006      	b.n	df6 <ADXL375_ISR_Handler+0x36>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     de8:	1c63      	adds	r3, r4, #1
     dea:	b29b      	uxth	r3, r3
     dec:	4a42      	ldr	r2, [pc, #264]	; (ef8 <ADXL375_ISR_Handler+0x138>)
     dee:	8912      	ldrh	r2, [r2, #8]
     df0:	42a2      	cmp	r2, r4
     df2:	d00f      	beq.n	e14 <ADXL375_ISR_Handler+0x54>
     df4:	1c1c      	adds	r4, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = &buffer;
	
	// Check the interrupt source value
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     df6:	1c28      	adds	r0, r5, #0
     df8:	a901      	add	r1, sp, #4
     dfa:	47b8      	blx	r7
     dfc:	7030      	strb	r0, [r6, #0]
     dfe:	2800      	cmp	r0, #0
     e00:	d1f2      	bne.n	de8 <ADXL375_ISR_Handler+0x28>
     e02:	e008      	b.n	e16 <ADXL375_ISR_Handler+0x56>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     e04:	1c63      	adds	r3, r4, #1
     e06:	b29b      	uxth	r3, r3
     e08:	4a3b      	ldr	r2, [pc, #236]	; (ef8 <ADXL375_ISR_Handler+0x138>)
     e0a:	8912      	ldrh	r2, [r2, #8]
     e0c:	42a2      	cmp	r2, r4
     e0e:	d00b      	beq.n	e28 <ADXL375_ISR_Handler+0x68>
     e10:	1c1c      	adds	r4, r3, #0
     e12:	e003      	b.n	e1c <ADXL375_ISR_Handler+0x5c>
	i2c_packet.data_length = 1;
	i2c_packet.data = &buffer;
	
	// Check the interrupt source value
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     e14:	1c1c      	adds	r4, r3, #0
	}
	
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     e16:	4d38      	ldr	r5, [pc, #224]	; (ef8 <ADXL375_ISR_Handler+0x138>)
     e18:	4f3a      	ldr	r7, [pc, #232]	; (f04 <ADXL375_ISR_Handler+0x144>)
     e1a:	4e39      	ldr	r6, [pc, #228]	; (f00 <ADXL375_ISR_Handler+0x140>)
     e1c:	1c28      	adds	r0, r5, #0
     e1e:	a901      	add	r1, sp, #4
     e20:	47b8      	blx	r7
     e22:	7030      	strb	r0, [r6, #0]
     e24:	2800      	cmp	r0, #0
     e26:	d1ed      	bne.n	e04 <ADXL375_ISR_Handler+0x44>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	// If the source of the interrupt was movement, handle it.
	if(buffer & ADXL375_INT_SRC_ACTIVITY){
     e28:	466b      	mov	r3, sp
     e2a:	3303      	adds	r3, #3
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	06db      	lsls	r3, r3, #27
     e30:	d55a      	bpl.n	ee8 <ADXL375_ISR_Handler+0x128>
		// If we are in inactive mode, then switch to active mode
		ucMotion_State = MOTION_MODE;
     e32:	2200      	movs	r2, #0
     e34:	4b34      	ldr	r3, [pc, #208]	; (f08 <ADXL375_ISR_Handler+0x148>)
     e36:	701a      	strb	r2, [r3, #0]
		// We have switched modes, so the temperature data needs to be marked as a new set
		ucTemperatureDataSets++;
     e38:	4a34      	ldr	r2, [pc, #208]	; (f0c <ADXL375_ISR_Handler+0x14c>)
     e3a:	7813      	ldrb	r3, [r2, #0]
     e3c:	3301      	adds	r3, #1
     e3e:	b2db      	uxtb	r3, r3
     e40:	7013      	strb	r3, [r2, #0]
		cTemperatureDataSetPtr[ucTemperatureDataSets] = ucTemperatureArrayPtr;
     e42:	4a33      	ldr	r2, [pc, #204]	; (f10 <ADXL375_ISR_Handler+0x150>)
     e44:	7811      	ldrb	r1, [r2, #0]
     e46:	4a33      	ldr	r2, [pc, #204]	; (f14 <ADXL375_ISR_Handler+0x154>)
     e48:	54d1      	strb	r1, [r2, r3]
		get_timestamp(ucTemperatureTimestamps[ucTemperatureDataSets]);
     e4a:	4a33      	ldr	r2, [pc, #204]	; (f18 <ADXL375_ISR_Handler+0x158>)
     e4c:	5cd0      	ldrb	r0, [r2, r3]
     e4e:	4b33      	ldr	r3, [pc, #204]	; (f1c <ADXL375_ISR_Handler+0x15c>)
     e50:	4798      	blx	r3
		// Re-enable the inactivity interrupt in case it was disabled previously (this happens when the animal is stationary and the inactive interrupt is triggered more than once)
		ADXL375_enable_interrupt(ADXL375_INT_SRC_INACTIVITY);
     e52:	2008      	movs	r0, #8
     e54:	4b32      	ldr	r3, [pc, #200]	; (f20 <ADXL375_ISR_Handler+0x160>)
     e56:	4798      	blx	r3
		// Movement interrupt triggered, enter 12.5 Hz sampling mode
		ADXL375_begin_sampling();		
     e58:	4b32      	ldr	r3, [pc, #200]	; (f24 <ADXL375_ISR_Handler+0x164>)
     e5a:	4798      	blx	r3
     e5c:	e044      	b.n	ee8 <ADXL375_ISR_Handler+0x128>
	}
	// If the source of the interrupt is from the the FIFO filling up
	if(buffer & ADXL375_INT_SRC_WATERMARK){
     e5e:	2520      	movs	r5, #32
		// FIFO is full, read it out
		// We know that 32 points are in the FIFO since thats the size we set it to
		for(int i = 0; i < 32; i++){
			
			ADXL375_read_samples(ucAccelerometerMatrix + uiAccelerometerMatrixPtr, 1);
     e60:	4c31      	ldr	r4, [pc, #196]	; (f28 <ADXL375_ISR_Handler+0x168>)
     e62:	4f32      	ldr	r7, [pc, #200]	; (f2c <ADXL375_ISR_Handler+0x16c>)
     e64:	4e32      	ldr	r6, [pc, #200]	; (f30 <ADXL375_ISR_Handler+0x170>)
     e66:	8820      	ldrh	r0, [r4, #0]
     e68:	19c0      	adds	r0, r0, r7
     e6a:	2101      	movs	r1, #1
     e6c:	47b0      	blx	r6
			// Three consecutive data points make up one accelerometer data point so point to the next empty location in mem
			uiAccelerometerMatrixPtr += 4;
     e6e:	8823      	ldrh	r3, [r4, #0]
     e70:	3304      	adds	r3, #4
     e72:	8023      	strh	r3, [r4, #0]
     e74:	3d01      	subs	r5, #1
	}
	// If the source of the interrupt is from the the FIFO filling up
	if(buffer & ADXL375_INT_SRC_WATERMARK){
		// FIFO is full, read it out
		// We know that 32 points are in the FIFO since thats the size we set it to
		for(int i = 0; i < 32; i++){
     e76:	2d00      	cmp	r5, #0
     e78:	d1f5      	bne.n	e66 <ADXL375_ISR_Handler+0xa6>
			// Three consecutive data points make up one accelerometer data point so point to the next empty location in mem
			uiAccelerometerMatrixPtr += 4;
		}
		// If we have taken 2 sets of samples, then stop (5.12 seconds worth of data)
		// This section is optional depending upon if ADXL362 also has inactivity
		if(ADXL375_buffer_full_count >= 2){
     e7a:	4b2e      	ldr	r3, [pc, #184]	; (f34 <ADXL375_ISR_Handler+0x174>)
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b01      	cmp	r3, #1
     e80:	d90f      	bls.n	ea2 <ADXL375_ISR_Handler+0xe2>
			 ADXL375_end_sampling();
     e82:	4b2d      	ldr	r3, [pc, #180]	; (f38 <ADXL375_ISR_Handler+0x178>)
     e84:	4798      	blx	r3
			 uiAccelerometerDataSets++;
     e86:	4a2d      	ldr	r2, [pc, #180]	; (f3c <ADXL375_ISR_Handler+0x17c>)
     e88:	8813      	ldrh	r3, [r2, #0]
     e8a:	3301      	adds	r3, #1
     e8c:	b29b      	uxth	r3, r3
     e8e:	8013      	strh	r3, [r2, #0]
			 iAccelerometerDataSetPtr[uiAccelerometerDataSets] = uiAccelerometerMatrixPtr;
     e90:	0059      	lsls	r1, r3, #1
     e92:	4a25      	ldr	r2, [pc, #148]	; (f28 <ADXL375_ISR_Handler+0x168>)
     e94:	8810      	ldrh	r0, [r2, #0]
     e96:	4a2a      	ldr	r2, [pc, #168]	; (f40 <ADXL375_ISR_Handler+0x180>)
     e98:	5288      	strh	r0, [r1, r2]
			 get_timestamp(ucAccelTimestamps[uiAccelerometerDataSets]);
     e9a:	4a2a      	ldr	r2, [pc, #168]	; (f44 <ADXL375_ISR_Handler+0x184>)
     e9c:	5cd0      	ldrb	r0, [r2, r3]
     e9e:	4b1f      	ldr	r3, [pc, #124]	; (f1c <ADXL375_ISR_Handler+0x15c>)
     ea0:	4798      	blx	r3
		}
	}
	// If the source of the interrupt was from inactivity
	if(buffer & ADXL375_INT_SRC_INACTIVITY){
     ea2:	466b      	mov	r3, sp
     ea4:	3303      	adds	r3, #3
     ea6:	781b      	ldrb	r3, [r3, #0]
     ea8:	071b      	lsls	r3, r3, #28
     eaa:	d523      	bpl.n	ef4 <ADXL375_ISR_Handler+0x134>
		// If we are in active, and we have had greater than 3 interrupts, then switch to inactvie mode
		// 3 Interrupts yields 12.75 minutes (255/60 is 4.25 minutes per interrupt--255 is the number of seconds to wait for inactivity)
		if(++ADXL375_inactive_interrupts >= 3){
     eac:	4a26      	ldr	r2, [pc, #152]	; (f48 <ADXL375_ISR_Handler+0x188>)
     eae:	7813      	ldrb	r3, [r2, #0]
     eb0:	3301      	adds	r3, #1
     eb2:	b2db      	uxtb	r3, r3
     eb4:	7013      	strb	r3, [r2, #0]
     eb6:	2b02      	cmp	r3, #2
     eb8:	d912      	bls.n	ee0 <ADXL375_ISR_Handler+0x120>
			ucMotion_State = STATIONARY_MODE;
     eba:	2201      	movs	r2, #1
     ebc:	4b12      	ldr	r3, [pc, #72]	; (f08 <ADXL375_ISR_Handler+0x148>)
     ebe:	701a      	strb	r2, [r3, #0]
			// Also need to stop the accel
			ADXL375_end_sampling();
     ec0:	4b1d      	ldr	r3, [pc, #116]	; (f38 <ADXL375_ISR_Handler+0x178>)
     ec2:	4798      	blx	r3
			uiAccelerometerDataSets++;
     ec4:	4a1d      	ldr	r2, [pc, #116]	; (f3c <ADXL375_ISR_Handler+0x17c>)
     ec6:	8813      	ldrh	r3, [r2, #0]
     ec8:	3301      	adds	r3, #1
     eca:	b29b      	uxth	r3, r3
     ecc:	8013      	strh	r3, [r2, #0]
			iAccelerometerDataSetPtr[uiAccelerometerDataSets] = uiAccelerometerMatrixPtr;
     ece:	0059      	lsls	r1, r3, #1
     ed0:	4a15      	ldr	r2, [pc, #84]	; (f28 <ADXL375_ISR_Handler+0x168>)
     ed2:	8810      	ldrh	r0, [r2, #0]
     ed4:	4a1a      	ldr	r2, [pc, #104]	; (f40 <ADXL375_ISR_Handler+0x180>)
     ed6:	5288      	strh	r0, [r1, r2]
			get_timestamp(ucAccelTimestamps[uiAccelerometerDataSets]);
     ed8:	4a1a      	ldr	r2, [pc, #104]	; (f44 <ADXL375_ISR_Handler+0x184>)
     eda:	5cd0      	ldrb	r0, [r2, r3]
     edc:	4b0f      	ldr	r3, [pc, #60]	; (f1c <ADXL375_ISR_Handler+0x15c>)
     ede:	4798      	blx	r3
		}
		// We are now stationary, so disable the inactive interrupt
		ADXL375_disable_interrupt(ADXL375_INT_EN_INACTIVITY);
     ee0:	2008      	movs	r0, #8
     ee2:	4b1a      	ldr	r3, [pc, #104]	; (f4c <ADXL375_ISR_Handler+0x18c>)
     ee4:	4798      	blx	r3
     ee6:	e005      	b.n	ef4 <ADXL375_ISR_Handler+0x134>
		ADXL375_enable_interrupt(ADXL375_INT_SRC_INACTIVITY);
		// Movement interrupt triggered, enter 12.5 Hz sampling mode
		ADXL375_begin_sampling();		
	}
	// If the source of the interrupt is from the the FIFO filling up
	if(buffer & ADXL375_INT_SRC_WATERMARK){
     ee8:	466b      	mov	r3, sp
     eea:	3303      	adds	r3, #3
     eec:	781b      	ldrb	r3, [r3, #0]
     eee:	079b      	lsls	r3, r3, #30
     ef0:	d4b5      	bmi.n	e5e <ADXL375_ISR_Handler+0x9e>
     ef2:	e7d6      	b.n	ea2 <ADXL375_ISR_Handler+0xe2>
			get_timestamp(ucAccelTimestamps[uiAccelerometerDataSets]);
		}
		// We are now stationary, so disable the inactive interrupt
		ADXL375_disable_interrupt(ADXL375_INT_EN_INACTIVITY);
	}
}
     ef4:	b005      	add	sp, #20
     ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef8:	20001cb4 	.word	0x20001cb4
     efc:	00001841 	.word	0x00001841
     f00:	20001e9e 	.word	0x20001e9e
     f04:	0000182d 	.word	0x0000182d
     f08:	20001e9c 	.word	0x20001e9c
     f0c:	200000bc 	.word	0x200000bc
     f10:	20001c33 	.word	0x20001c33
     f14:	20001e54 	.word	0x20001e54
     f18:	20001d14 	.word	0x20001d14
     f1c:	00002225 	.word	0x00002225
     f20:	00000479 	.word	0x00000479
     f24:	00000785 	.word	0x00000785
     f28:	20001454 	.word	0x20001454
     f2c:	200000d0 	.word	0x200000d0
     f30:	00000cf1 	.word	0x00000cf1
     f34:	20001c35 	.word	0x20001c35
     f38:	00000819 	.word	0x00000819
     f3c:	20001cc0 	.word	0x20001cc0
     f40:	20001464 	.word	0x20001464
     f44:	200004b8 	.word	0x200004b8
     f48:	20001c37 	.word	0x20001c37
     f4c:	000003b9 	.word	0x000003b9

00000f50 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     f50:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     f52:	4b0c      	ldr	r3, [pc, #48]	; (f84 <EVSYS_Handler+0x34>)
     f54:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     f56:	2186      	movs	r1, #134	; 0x86
     f58:	05c9      	lsls	r1, r1, #23
     f5a:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     f5c:	6898      	ldr	r0, [r3, #8]
     f5e:	4302      	orrs	r2, r0
     f60:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     f62:	4b09      	ldr	r3, [pc, #36]	; (f88 <EVSYS_Handler+0x38>)
     f64:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     f66:	2c00      	cmp	r4, #0
     f68:	d005      	beq.n	f76 <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     f6a:	6820      	ldr	r0, [r4, #0]
     f6c:	6863      	ldr	r3, [r4, #4]
     f6e:	4798      	blx	r3
		current_hook = current_hook->next;
     f70:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
     f72:	2c00      	cmp	r4, #0
     f74:	d1f9      	bne.n	f6a <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     f76:	4b03      	ldr	r3, [pc, #12]	; (f84 <EVSYS_Handler+0x34>)
     f78:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     f7a:	689a      	ldr	r2, [r3, #8]
     f7c:	438a      	bics	r2, r1
     f7e:	609a      	str	r2, [r3, #8]
}
     f80:	bd10      	pop	{r4, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	20000000 	.word	0x20000000
     f88:	0fff0fff 	.word	0x0fff0fff

00000f8c <_system_events_init>:

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     f8c:	4906      	ldr	r1, [pc, #24]	; (fa8 <_system_events_init+0x1c>)
     f8e:	6a0b      	ldr	r3, [r1, #32]
     f90:	2201      	movs	r2, #1
     f92:	4313      	orrs	r3, r2
     f94:	620b      	str	r3, [r1, #32]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     f96:	2386      	movs	r3, #134	; 0x86
     f98:	05db      	lsls	r3, r3, #23
     f9a:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     f9c:	1c19      	adds	r1, r3, #0
     f9e:	780b      	ldrb	r3, [r1, #0]
     fa0:	4213      	tst	r3, r2
     fa2:	d1fc      	bne.n	f9e <_system_events_init+0x12>
	}
}
     fa4:	4770      	bx	lr
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	40000400 	.word	0x40000400

00000fac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     fac:	4a06      	ldr	r2, [pc, #24]	; (fc8 <_extint_enable+0x1c>)
     fae:	7811      	ldrb	r1, [r2, #0]
     fb0:	2302      	movs	r3, #2
     fb2:	430b      	orrs	r3, r1
     fb4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     fb6:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     fb8:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     fba:	6853      	ldr	r3, [r2, #4]
     fbc:	4219      	tst	r1, r3
     fbe:	d1fc      	bne.n	fba <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     fc0:	6853      	ldr	r3, [r2, #4]
     fc2:	4218      	tst	r0, r3
     fc4:	d1f9      	bne.n	fba <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     fc6:	4770      	bx	lr
     fc8:	40002400 	.word	0x40002400

00000fcc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     fcc:	b500      	push	{lr}
     fce:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     fd0:	4a18      	ldr	r2, [pc, #96]	; (1034 <_system_extint_init+0x68>)
     fd2:	6953      	ldr	r3, [r2, #20]
     fd4:	2180      	movs	r1, #128	; 0x80
     fd6:	0089      	lsls	r1, r1, #2
     fd8:	430b      	orrs	r3, r1
     fda:	6153      	str	r3, [r2, #20]

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     fdc:	a901      	add	r1, sp, #4
     fde:	2302      	movs	r3, #2
     fe0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     fe2:	2003      	movs	r0, #3
     fe4:	4b14      	ldr	r3, [pc, #80]	; (1038 <_system_extint_init+0x6c>)
     fe6:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     fe8:	2003      	movs	r0, #3
     fea:	4b14      	ldr	r3, [pc, #80]	; (103c <_system_extint_init+0x70>)
     fec:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     fee:	4a14      	ldr	r2, [pc, #80]	; (1040 <_system_extint_init+0x74>)
     ff0:	7811      	ldrb	r1, [r2, #0]
     ff2:	2301      	movs	r3, #1
     ff4:	430b      	orrs	r3, r1
     ff6:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     ff8:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     ffa:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     ffc:	6853      	ldr	r3, [r2, #4]
     ffe:	4219      	tst	r1, r3
    1000:	d1fc      	bne.n	ffc <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1002:	6853      	ldr	r3, [r2, #4]
    1004:	4218      	tst	r0, r3
    1006:	d009      	beq.n	101c <_system_extint_init+0x50>
    1008:	e7f8      	b.n	ffc <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    100a:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    100c:	428b      	cmp	r3, r1
    100e:	d1fc      	bne.n	100a <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1010:	2208      	movs	r2, #8
    1012:	4b0c      	ldr	r3, [pc, #48]	; (1044 <_system_extint_init+0x78>)
    1014:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1016:	4b0c      	ldr	r3, [pc, #48]	; (1048 <_system_extint_init+0x7c>)
    1018:	4798      	blx	r3
    101a:	e009      	b.n	1030 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    101c:	4a08      	ldr	r2, [pc, #32]	; (1040 <_system_extint_init+0x74>)
    101e:	7813      	ldrb	r3, [r2, #0]
    1020:	2110      	movs	r1, #16
    1022:	438b      	bics	r3, r1
    1024:	7013      	strb	r3, [r2, #0]
    1026:	4b09      	ldr	r3, [pc, #36]	; (104c <_system_extint_init+0x80>)
    1028:	1c19      	adds	r1, r3, #0
    102a:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    102c:	2200      	movs	r2, #0
    102e:	e7ec      	b.n	100a <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    1030:	b003      	add	sp, #12
    1032:	bd00      	pop	{pc}
    1034:	40000400 	.word	0x40000400
    1038:	00004309 	.word	0x00004309
    103c:	000042a1 	.word	0x000042a1
    1040:	40002400 	.word	0x40002400
    1044:	e000e100 	.word	0xe000e100
    1048:	00000fad 	.word	0x00000fad
    104c:	20001f30 	.word	0x20001f30

00001050 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1050:	6802      	ldr	r2, [r0, #0]
    1052:	2104      	movs	r1, #4
    1054:	4b07      	ldr	r3, [pc, #28]	; (1074 <rtc_calendar_enable+0x24>)
    1056:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1058:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    105a:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    105c:	2b00      	cmp	r3, #0
    105e:	d1fc      	bne.n	105a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
    1060:	8811      	ldrh	r1, [r2, #0]
    1062:	3302      	adds	r3, #2
    1064:	430b      	orrs	r3, r1
    1066:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1068:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    106a:	6913      	ldr	r3, [r2, #16]
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
    106c:	2b00      	cmp	r3, #0
    106e:	d1fc      	bne.n	106a <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
    1070:	4770      	bx	lr
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	e000e100 	.word	0xe000e100

00001078 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    1078:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    107a:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    107c:	2404      	movs	r4, #4
    107e:	2380      	movs	r3, #128	; 0x80
    1080:	4907      	ldr	r1, [pc, #28]	; (10a0 <rtc_calendar_disable+0x28>)
    1082:	50cc      	str	r4, [r1, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1084:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    1086:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1088:	2b00      	cmp	r3, #0
    108a:	d1fc      	bne.n	1086 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
    108c:	8813      	ldrh	r3, [r2, #0]
    108e:	2102      	movs	r1, #2
    1090:	438b      	bics	r3, r1
    1092:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1094:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    1096:	6913      	ldr	r3, [r2, #16]
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
    1098:	2b00      	cmp	r3, #0
    109a:	d1fc      	bne.n	1096 <rtc_calendar_disable+0x1e>
		/* Wait for synchronization */
	}
}
    109c:	bd10      	pop	{r4, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	e000e100 	.word	0xe000e100

000010a4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    10a4:	b538      	push	{r3, r4, r5, lr}
    10a6:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10a8:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    10aa:	4b09      	ldr	r3, [pc, #36]	; (10d0 <rtc_calendar_reset+0x2c>)
    10ac:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    10ae:	2300      	movs	r3, #0
    10b0:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
    10b2:	8663      	strh	r3, [r4, #50]	; 0x32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10b4:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    10b6:	6913      	ldr	r3, [r2, #16]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    10b8:	2b00      	cmp	r3, #0
    10ba:	d1fc      	bne.n	10b6 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
    10bc:	882a      	ldrh	r2, [r5, #0]
    10be:	3301      	adds	r3, #1
    10c0:	4313      	orrs	r3, r2
    10c2:	802b      	strh	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10c4:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    10c6:	6913      	ldr	r3, [r2, #16]
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;

	while (rtc_calendar_is_syncing(module)) {
    10c8:	2b00      	cmp	r3, #0
    10ca:	d1fc      	bne.n	10c6 <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
    10cc:	bd38      	pop	{r3, r4, r5, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	00001079 	.word	0x00001079

000010d4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    10d4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    10d6:	88cb      	ldrh	r3, [r1, #6]
    10d8:	88c2      	ldrh	r2, [r0, #6]
    10da:	1a9b      	subs	r3, r3, r2
    10dc:	069a      	lsls	r2, r3, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    10de:	790b      	ldrb	r3, [r1, #4]
    10e0:	045c      	lsls	r4, r3, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    10e2:	794b      	ldrb	r3, [r1, #5]
    10e4:	059b      	lsls	r3, r3, #22
    10e6:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    10e8:	788c      	ldrb	r4, [r1, #2]
    10ea:	0324      	lsls	r4, r4, #12
    10ec:	4323      	orrs	r3, r4
    10ee:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    10f0:	7902      	ldrb	r2, [r0, #4]
    10f2:	2a00      	cmp	r2, #0
    10f4:	d105      	bne.n	1102 <rtc_calendar_time_to_register_value+0x2e>
    10f6:	78ca      	ldrb	r2, [r1, #3]
    10f8:	2a00      	cmp	r2, #0
    10fa:	d002      	beq.n	1102 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
    10fc:	2280      	movs	r2, #128	; 0x80
    10fe:	0252      	lsls	r2, r2, #9
    1100:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1102:	7848      	ldrb	r0, [r1, #1]
    1104:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1106:	780a      	ldrb	r2, [r1, #0]
    1108:	4310      	orrs	r0, r2
    110a:	4318      	orrs	r0, r3

	return register_value;
}
    110c:	bd10      	pop	{r4, pc}
    110e:	46c0      	nop			; (mov r8, r8)

00001110 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1110:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1112:	0e8c      	lsrs	r4, r1, #26
    1114:	88c3      	ldrh	r3, [r0, #6]
    1116:	18e3      	adds	r3, r4, r3
    1118:	80d3      	strh	r3, [r2, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    111a:	018b      	lsls	r3, r1, #6
    111c:	0f1b      	lsrs	r3, r3, #28
    111e:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1120:	028b      	lsls	r3, r1, #10
    1122:	0edb      	lsrs	r3, r3, #27
    1124:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1126:	7903      	ldrb	r3, [r0, #4]
    1128:	2b00      	cmp	r3, #0
    112a:	d003      	beq.n	1134 <rtc_calendar_register_value_to_time+0x24>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    112c:	03cb      	lsls	r3, r1, #15
    112e:	0edb      	lsrs	r3, r3, #27
    1130:	7093      	strb	r3, [r2, #2]
    1132:	e005      	b.n	1140 <rtc_calendar_register_value_to_time+0x30>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    1134:	040b      	lsls	r3, r1, #16
				(RTC_MODE2_CLOCK_HOUR_Msk & ~(0x10u << RTC_MODE2_CLOCK_HOUR_Pos))) >>
    1136:	0f1b      	lsrs	r3, r3, #28
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    1138:	7093      	strb	r3, [r2, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~(0x10u << RTC_MODE2_CLOCK_HOUR_Pos))) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & (0x10u << RTC_MODE2_CLOCK_HOUR_Pos)) != 0);
    113a:	03cb      	lsls	r3, r1, #15
    113c:	0fdb      	lsrs	r3, r3, #31
    113e:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1140:	050b      	lsls	r3, r1, #20
    1142:	0e9b      	lsrs	r3, r3, #26
    1144:	7053      	strb	r3, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1146:	233f      	movs	r3, #63	; 0x3f
    1148:	4019      	ands	r1, r3
    114a:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    114c:	bd10      	pop	{r4, pc}
    114e:	46c0      	nop			; (mov r8, r8)

00001150 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1150:	b538      	push	{r3, r4, r5, lr}
    1152:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1154:	6805      	ldr	r5, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    1156:	4b05      	ldr	r3, [pc, #20]	; (116c <rtc_calendar_set_time+0x1c>)
    1158:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    115a:	692b      	ldr	r3, [r5, #16]

	Rtc *const rtc_module = module->hw;

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);

	while (rtc_calendar_is_syncing(module)) {
    115c:	2b00      	cmp	r3, #0
    115e:	d1fc      	bne.n	115a <rtc_calendar_set_time+0xa>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    1160:	61a8      	str	r0, [r5, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1162:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    1164:	6913      	ldr	r3, [r2, #16]
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
    1166:	2b00      	cmp	r3, #0
    1168:	d1fc      	bne.n	1164 <rtc_calendar_set_time+0x14>
		/* Wait for synchronization */
	}
}
    116a:	bd38      	pop	{r3, r4, r5, pc}
    116c:	000010d5 	.word	0x000010d5

00001170 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1170:	b508      	push	{r3, lr}
    1172:	1c0a      	adds	r2, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1174:	6801      	ldr	r1, [r0, #0]
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    1176:	690b      	ldr	r3, [r1, #16]
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	while (rtc_calendar_is_syncing(module)) {
    1178:	2b00      	cmp	r3, #0
    117a:	d1fc      	bne.n	1176 <rtc_calendar_get_time+0x6>
		/* Wait for synchronization */
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    117c:	6989      	ldr	r1, [r1, #24]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    117e:	4b01      	ldr	r3, [pc, #4]	; (1184 <rtc_calendar_get_time+0x14>)
    1180:	4798      	blx	r3
}
    1182:	bd08      	pop	{r3, pc}
    1184:	00001111 	.word	0x00001111

00001188 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    118a:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    118c:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    118e:	2a01      	cmp	r2, #1
    1190:	d815      	bhi.n	11be <rtc_calendar_set_alarm+0x36>
    1192:	1c14      	adds	r4, r2, #0
    1194:	1c0d      	adds	r5, r1, #0
    1196:	1c07      	adds	r7, r0, #0
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1198:	4b0a      	ldr	r3, [pc, #40]	; (11c4 <rtc_calendar_set_alarm+0x3c>)
    119a:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    119c:	6933      	ldr	r3, [r6, #16]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
    119e:	2b00      	cmp	r3, #0
    11a0:	d1fc      	bne.n	119c <rtc_calendar_set_alarm+0x14>
    11a2:	00e2      	lsls	r2, r4, #3
    11a4:	18b2      	adds	r2, r6, r2
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    11a6:	6210      	str	r0, [r2, #32]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11a8:	6839      	ldr	r1, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    11aa:	690b      	ldr	r3, [r1, #16]
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
    11ac:	2b00      	cmp	r3, #0
    11ae:	d1fc      	bne.n	11aa <rtc_calendar_set_alarm+0x22>
			/* Wait for synchronization */
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    11b0:	7a29      	ldrb	r1, [r5, #8]
    11b2:	3324      	adds	r3, #36	; 0x24
    11b4:	54d1      	strb	r1, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11b6:	683a      	ldr	r2, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
    11b8:	6913      	ldr	r3, [r2, #16]
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	while (rtc_calendar_is_syncing(module)) {
    11ba:	2b00      	cmp	r3, #0
    11bc:	d1fc      	bne.n	11b8 <rtc_calendar_set_alarm+0x30>
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
    11be:	1c18      	adds	r0, r3, #0
    11c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	000010d5 	.word	0x000010d5

000011c8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    11c8:	b538      	push	{r3, r4, r5, lr}
    11ca:	1c05      	adds	r5, r0, #0
    11cc:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    11ce:	6001      	str	r1, [r0, #0]
    11d0:	4a13      	ldr	r2, [pc, #76]	; (1220 <rtc_calendar_init+0x58>)
    11d2:	6953      	ldr	r3, [r2, #20]
    11d4:	2180      	movs	r1, #128	; 0x80
    11d6:	0049      	lsls	r1, r1, #1
    11d8:	430b      	orrs	r3, r1
    11da:	6153      	str	r3, [r2, #20]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    11dc:	2200      	movs	r2, #0
    11de:	4b11      	ldr	r3, [pc, #68]	; (1224 <rtc_calendar_init+0x5c>)
    11e0:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    11e2:	4b11      	ldr	r3, [pc, #68]	; (1228 <rtc_calendar_init+0x60>)
    11e4:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    11e6:	78e3      	ldrb	r3, [r4, #3]
    11e8:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
    11ea:	88a3      	ldrh	r3, [r4, #4]
    11ec:	80eb      	strh	r3, [r5, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    11ee:	4b0f      	ldr	r3, [pc, #60]	; (122c <rtc_calendar_init+0x64>)
    11f0:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11f2:	682a      	ldr	r2, [r5, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
    11f4:	8823      	ldrh	r3, [r4, #0]
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
	}
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    11f6:	78e1      	ldrb	r1, [r4, #3]
    11f8:	2900      	cmp	r1, #0
    11fa:	d002      	beq.n	1202 <rtc_calendar_init+0x3a>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
    11fc:	2108      	movs	r1, #8
    11fe:	430b      	orrs	r3, r1
    1200:	e001      	b.n	1206 <rtc_calendar_init+0x3e>
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
    1202:	2148      	movs	r1, #72	; 0x48
    1204:	430b      	orrs	r3, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    1206:	78a1      	ldrb	r1, [r4, #2]
    1208:	2900      	cmp	r1, #0
    120a:	d001      	beq.n	1210 <rtc_calendar_init+0x48>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
    120c:	2180      	movs	r1, #128	; 0x80
    120e:	430b      	orrs	r3, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
    1210:	8013      	strh	r3, [r2, #0]

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1212:	1da1      	adds	r1, r4, #6
    1214:	1c28      	adds	r0, r5, #0
    1216:	2200      	movs	r2, #0
    1218:	4b05      	ldr	r3, [pc, #20]	; (1230 <rtc_calendar_init+0x68>)
    121a:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
    121c:	bd38      	pop	{r3, r4, r5, pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	40000400 	.word	0x40000400
    1224:	40001000 	.word	0x40001000
    1228:	000010a5 	.word	0x000010a5
    122c:	20001f70 	.word	0x20001f70
    1230:	00001189 	.word	0x00001189

00001234 <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
    1234:	2a09      	cmp	r2, #9
    1236:	d901      	bls.n	123c <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
    1238:	2017      	movs	r0, #23
    123a:	e00a      	b.n	1252 <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    123c:	1c93      	adds	r3, r2, #2
    123e:	009b      	lsls	r3, r3, #2
    1240:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    1242:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    1244:	2301      	movs	r3, #1
    1246:	4093      	lsls	r3, r2
    1248:	1c1a      	adds	r2, r3, #0
    124a:	430a      	orrs	r2, r1
    124c:	b292      	uxth	r2, r2
    124e:	8602      	strh	r2, [r0, #48]	; 0x30
    1250:	2000      	movs	r0, #0
	}

	return status;
}
    1252:	4770      	bx	lr

00001254 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
    1254:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1256:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
    1258:	2909      	cmp	r1, #9
    125a:	d102      	bne.n	1262 <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
    125c:	4a0e      	ldr	r2, [pc, #56]	; (1298 <rtc_calendar_enable_callback+0x44>)
    125e:	815a      	strh	r2, [r3, #10]
    1260:	e011      	b.n	1286 <rtc_calendar_enable_callback+0x32>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
    1262:	2907      	cmp	r1, #7
    1264:	d805      	bhi.n	1272 <rtc_calendar_enable_callback+0x1e>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
    1266:	2201      	movs	r2, #1
    1268:	408a      	lsls	r2, r1
    126a:	24ff      	movs	r4, #255	; 0xff
    126c:	4022      	ands	r2, r4
    126e:	815a      	strh	r2, [r3, #10]
    1270:	e009      	b.n	1286 <rtc_calendar_enable_callback+0x32>
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
    1272:	2280      	movs	r2, #128	; 0x80
    1274:	0052      	lsls	r2, r2, #1
    1276:	1c0c      	adds	r4, r1, #0
    1278:	3c08      	subs	r4, #8
    127a:	40a2      	lsls	r2, r4
    127c:	1c14      	adds	r4, r2, #0
    127e:	2280      	movs	r2, #128	; 0x80
    1280:	0052      	lsls	r2, r2, #1
    1282:	4022      	ands	r2, r4
    1284:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    1286:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    1288:	2301      	movs	r3, #1
    128a:	408b      	lsls	r3, r1
    128c:	1c19      	adds	r1, r3, #0
    128e:	4311      	orrs	r1, r2
    1290:	b289      	uxth	r1, r1
    1292:	8641      	strh	r1, [r0, #50]	; 0x32
}
    1294:	bd10      	pop	{r4, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	ffff8000 	.word	0xffff8000

0000129c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	465f      	mov	r7, fp
    12a0:	4656      	mov	r6, sl
    12a2:	464d      	mov	r5, r9
    12a4:	4644      	mov	r4, r8
    12a6:	b4f0      	push	{r4, r5, r6, r7}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
    12a8:	4b23      	ldr	r3, [pc, #140]	; (1338 <RTC_Handler+0x9c>)
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	469a      	mov	sl, r3

	Rtc *const rtc_module = module->hw;
    12ae:	681e      	ldr	r6, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    12b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
    12b2:	4652      	mov	r2, sl
    12b4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    12b6:	401a      	ands	r2, r3
    12b8:	4690      	mov	r8, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    12ba:	89b3      	ldrh	r3, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    12bc:	8972      	ldrh	r2, [r6, #10]
    12be:	4013      	ands	r3, r2

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    12c0:	b21a      	sxth	r2, r3
    12c2:	2a00      	cmp	r2, #0
    12c4:	da08      	bge.n	12d8 <RTC_Handler+0x3c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    12c6:	4643      	mov	r3, r8
    12c8:	059b      	lsls	r3, r3, #22
    12ca:	d502      	bpl.n	12d2 <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    12cc:	4653      	mov	r3, sl
    12ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12d0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    12d2:	4b1a      	ldr	r3, [pc, #104]	; (133c <RTC_Handler+0xa0>)
    12d4:	81b3      	strh	r3, [r6, #12]
    12d6:	e028      	b.n	132a <RTC_Handler+0x8e>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
    12d8:	27ff      	movs	r7, #255	; 0xff
    12da:	401f      	ands	r7, r3
    12dc:	d01a      	beq.n	1314 <RTC_Handler+0x78>
    12de:	2400      	movs	r4, #0
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
    12e0:	2301      	movs	r3, #1
    12e2:	4699      	mov	r9, r3
			  && (callback_mask & (1 << i))) {
				module->callbacks[i]();
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
    12e4:	33fe      	adds	r3, #254	; 0xfe
    12e6:	469b      	mov	fp, r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
    12e8:	1c23      	adds	r3, r4, #0
    12ea:	464d      	mov	r5, r9
    12ec:	40a5      	lsls	r5, r4
    12ee:	422f      	tst	r7, r5
    12f0:	d009      	beq.n	1306 <RTC_Handler+0x6a>
			  && (callback_mask & (1 << i))) {
    12f2:	4642      	mov	r2, r8
    12f4:	4122      	asrs	r2, r4
    12f6:	4649      	mov	r1, r9
    12f8:	4211      	tst	r1, r2
    12fa:	d004      	beq.n	1306 <RTC_Handler+0x6a>
				module->callbacks[i]();
    12fc:	3302      	adds	r3, #2
    12fe:	009b      	lsls	r3, r3, #2
    1300:	4652      	mov	r2, sl
    1302:	589b      	ldr	r3, [r3, r2]
    1304:	4798      	blx	r3
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
    1306:	465b      	mov	r3, fp
    1308:	401d      	ands	r5, r3
    130a:	81b5      	strh	r5, [r6, #12]
    130c:	3401      	adds	r4, #1
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
    130e:	2c08      	cmp	r4, #8
    1310:	d1ea      	bne.n	12e8 <RTC_Handler+0x4c>
    1312:	e00a      	b.n	132a <RTC_Handler+0x8e>
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
		}
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    1314:	05db      	lsls	r3, r3, #23
    1316:	d508      	bpl.n	132a <RTC_Handler+0x8e>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    1318:	4643      	mov	r3, r8
    131a:	05db      	lsls	r3, r3, #23
    131c:	d502      	bpl.n	1324 <RTC_Handler+0x88>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    131e:	4653      	mov	r3, sl
    1320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1322:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    1324:	2380      	movs	r3, #128	; 0x80
    1326:	005b      	lsls	r3, r3, #1
    1328:	81b3      	strh	r3, [r6, #12]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
    132a:	bc3c      	pop	{r2, r3, r4, r5}
    132c:	4690      	mov	r8, r2
    132e:	4699      	mov	r9, r3
    1330:	46a2      	mov	sl, r4
    1332:	46ab      	mov	fp, r5
    1334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	20001f70 	.word	0x20001f70
    133c:	ffff8000 	.word	0xffff8000

00001340 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1340:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1342:	2207      	movs	r2, #7
    1344:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1346:	421a      	tst	r2, r3
    1348:	d1fc      	bne.n	1344 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    134a:	4770      	bx	lr

0000134c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    134c:	b5f0      	push	{r4, r5, r6, r7, lr}
    134e:	464f      	mov	r7, r9
    1350:	4646      	mov	r6, r8
    1352:	b4c0      	push	{r6, r7}
    1354:	b083      	sub	sp, #12
    1356:	1c07      	adds	r7, r0, #0
    1358:	1c0d      	adds	r5, r1, #0
    135a:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    135c:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    135e:	1c08      	adds	r0, r1, #0
    1360:	4b6b      	ldr	r3, [pc, #428]	; (1510 <i2c_master_init+0x1c4>)
    1362:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21)
	if (sercom_index == 5) {
    1364:	2805      	cmp	r0, #5
    1366:	d100      	bne.n	136a <i2c_master_init+0x1e>
    1368:	e0ba      	b.n	14e0 <i2c_master_init+0x194>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    136a:	1c04      	adds	r4, r0, #0
    136c:	3412      	adds	r4, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    136e:	4969      	ldr	r1, [pc, #420]	; (1514 <i2c_master_init+0x1c8>)
    1370:	69cb      	ldr	r3, [r1, #28]
	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1372:	2201      	movs	r2, #1
    1374:	4082      	lsls	r2, r0
    1376:	1c10      	adds	r0, r2, #0
    1378:	4318      	orrs	r0, r3
    137a:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    137c:	a901      	add	r1, sp, #4
    137e:	7b33      	ldrb	r3, [r6, #12]
    1380:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1382:	b2e4      	uxtb	r4, r4
    1384:	1c20      	adds	r0, r4, #0
    1386:	4b64      	ldr	r3, [pc, #400]	; (1518 <i2c_master_init+0x1cc>)
    1388:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    138a:	1c20      	adds	r0, r4, #0
    138c:	4b63      	ldr	r3, [pc, #396]	; (151c <i2c_master_init+0x1d0>)
    138e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1390:	7b30      	ldrb	r0, [r6, #12]
    1392:	2100      	movs	r1, #0
    1394:	4b62      	ldr	r3, [pc, #392]	; (1520 <i2c_master_init+0x1d4>)
    1396:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1398:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    139a:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    139c:	079b      	lsls	r3, r3, #30
    139e:	d500      	bpl.n	13a2 <i2c_master_init+0x56>
    13a0:	e0b0      	b.n	1504 <i2c_master_init+0x1b8>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13a2:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    13a4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13a6:	07db      	lsls	r3, r3, #31
    13a8:	d500      	bpl.n	13ac <i2c_master_init+0x60>
    13aa:	e0ab      	b.n	1504 <i2c_master_init+0x1b8>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    13ac:	2314      	movs	r3, #20
    13ae:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13b0:	683d      	ldr	r5, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    13b2:	1c28      	adds	r0, r5, #0
    13b4:	4b56      	ldr	r3, [pc, #344]	; (1510 <i2c_master_init+0x1c4>)
    13b6:	4798      	blx	r3
    13b8:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    13ba:	2380      	movs	r3, #128	; 0x80
    13bc:	466a      	mov	r2, sp
    13be:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    13c0:	2300      	movs	r3, #0
    13c2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    13c4:	2201      	movs	r2, #1
    13c6:	4669      	mov	r1, sp
    13c8:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    13ca:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    13cc:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    13ce:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    13d0:	2800      	cmp	r0, #0
    13d2:	d103      	bne.n	13dc <i2c_master_init+0x90>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    13d4:	1c28      	adds	r0, r5, #0
    13d6:	2100      	movs	r1, #0
    13d8:	4b52      	ldr	r3, [pc, #328]	; (1524 <i2c_master_init+0x1d8>)
    13da:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    13dc:	466b      	mov	r3, sp
    13de:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    13e0:	2302      	movs	r3, #2
    13e2:	466a      	mov	r2, sp
    13e4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    13e6:	0c00      	lsrs	r0, r0, #16
    13e8:	b2c0      	uxtb	r0, r0
    13ea:	4669      	mov	r1, sp
    13ec:	4b4e      	ldr	r3, [pc, #312]	; (1528 <i2c_master_init+0x1dc>)
    13ee:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    13f0:	2c00      	cmp	r4, #0
    13f2:	d104      	bne.n	13fe <i2c_master_init+0xb2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    13f4:	1c28      	adds	r0, r5, #0
    13f6:	2101      	movs	r1, #1
    13f8:	4b4a      	ldr	r3, [pc, #296]	; (1524 <i2c_master_init+0x1d8>)
    13fa:	4798      	blx	r3
    13fc:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    13fe:	466b      	mov	r3, sp
    1400:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1402:	2302      	movs	r3, #2
    1404:	466a      	mov	r2, sp
    1406:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1408:	0c24      	lsrs	r4, r4, #16
    140a:	b2e0      	uxtb	r0, r4
    140c:	4669      	mov	r1, sp
    140e:	4b46      	ldr	r3, [pc, #280]	; (1528 <i2c_master_init+0x1dc>)
    1410:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1412:	8ab3      	ldrh	r3, [r6, #20]
    1414:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1416:	8af3      	ldrh	r3, [r6, #22]
    1418:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    141a:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    141c:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    141e:	2a00      	cmp	r2, #0
    1420:	d104      	bne.n	142c <i2c_master_init+0xe0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1422:	4b42      	ldr	r3, [pc, #264]	; (152c <i2c_master_init+0x1e0>)
    1424:	789b      	ldrb	r3, [r3, #2]
    1426:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1428:	0fdb      	lsrs	r3, r3, #31
    142a:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    142c:	6932      	ldr	r2, [r6, #16]
    142e:	2a00      	cmp	r2, #0
    1430:	d000      	beq.n	1434 <i2c_master_init+0xe8>
		tmp_ctrla |= config->start_hold_time;
    1432:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1434:	68b2      	ldr	r2, [r6, #8]
    1436:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1438:	2224      	movs	r2, #36	; 0x24
    143a:	5cb2      	ldrb	r2, [r6, r2]
    143c:	2a00      	cmp	r2, #0
    143e:	d002      	beq.n	1446 <i2c_master_init+0xfa>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1440:	2280      	movs	r2, #128	; 0x80
    1442:	05d2      	lsls	r2, r2, #23
    1444:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    1446:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1448:	2a00      	cmp	r2, #0
    144a:	d000      	beq.n	144e <i2c_master_init+0x102>
		tmp_ctrla |= config->inactive_timeout;
    144c:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
    144e:	222c      	movs	r2, #44	; 0x2c
    1450:	5cb2      	ldrb	r2, [r6, r2]
    1452:	2a00      	cmp	r2, #0
    1454:	d002      	beq.n	145c <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1456:	2280      	movs	r2, #128	; 0x80
    1458:	0512      	lsls	r2, r2, #20
    145a:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    145c:	222d      	movs	r2, #45	; 0x2d
    145e:	5cb2      	ldrb	r2, [r6, r2]
    1460:	2a00      	cmp	r2, #0
    1462:	d002      	beq.n	146a <i2c_master_init+0x11e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1464:	2280      	movs	r2, #128	; 0x80
    1466:	0412      	lsls	r2, r2, #16
    1468:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    146a:	222e      	movs	r2, #46	; 0x2e
    146c:	5cb2      	ldrb	r2, [r6, r2]
    146e:	2a00      	cmp	r2, #0
    1470:	d002      	beq.n	1478 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1472:	2280      	movs	r2, #128	; 0x80
    1474:	03d2      	lsls	r2, r2, #15
    1476:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1478:	682a      	ldr	r2, [r5, #0]
    147a:	4313      	orrs	r3, r2
    147c:	602b      	str	r3, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    147e:	2380      	movs	r3, #128	; 0x80
    1480:	005b      	lsls	r3, r3, #1
    1482:	606b      	str	r3, [r5, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1484:	4647      	mov	r7, r8
    1486:	3712      	adds	r7, #18
    1488:	b2fb      	uxtb	r3, r7
    148a:	4698      	mov	r8, r3
    148c:	1c18      	adds	r0, r3, #0
    148e:	4b28      	ldr	r3, [pc, #160]	; (1530 <i2c_master_init+0x1e4>)
    1490:	4798      	blx	r3
    1492:	1c04      	adds	r4, r0, #0
	uint32_t fscl        = 1000*config->baud_rate;
    1494:	20fa      	movs	r0, #250	; 0xfa
    1496:	0080      	lsls	r0, r0, #2
    1498:	6833      	ldr	r3, [r6, #0]
    149a:	4343      	muls	r3, r0
    149c:	4699      	mov	r9, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
	int32_t  denominator = 2*fscl;
    149e:	005f      	lsls	r7, r3, #1
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
    14a0:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
    14a2:	4360      	muls	r0, r4
    14a4:	4923      	ldr	r1, [pc, #140]	; (1534 <i2c_master_init+0x1e8>)
    14a6:	4b24      	ldr	r3, [pc, #144]	; (1538 <i2c_master_init+0x1ec>)
    14a8:	4798      	blx	r3
    14aa:	300a      	adds	r0, #10
    14ac:	464b      	mov	r3, r9
    14ae:	4358      	muls	r0, r3
    14b0:	1a20      	subs	r0, r4, r0
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
    14b2:	19c0      	adds	r0, r0, r7
    14b4:	3801      	subs	r0, #1
    14b6:	1c39      	adds	r1, r7, #0
    14b8:	4b20      	ldr	r3, [pc, #128]	; (153c <i2c_master_init+0x1f0>)
    14ba:	4798      	blx	r3
    14bc:	1e04      	subs	r4, r0, #0

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
    14be:	2cff      	cmp	r4, #255	; 0xff
    14c0:	d81f      	bhi.n	1502 <i2c_master_init+0x1b6>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
    14c2:	4640      	mov	r0, r8
    14c4:	4b1a      	ldr	r3, [pc, #104]	; (1530 <i2c_master_init+0x1e4>)
    14c6:	4798      	blx	r3
    14c8:	6871      	ldr	r1, [r6, #4]
    14ca:	23fa      	movs	r3, #250	; 0xfa
    14cc:	00db      	lsls	r3, r3, #3
    14ce:	4359      	muls	r1, r3
    14d0:	1e4b      	subs	r3, r1, #1
    14d2:	1818      	adds	r0, r3, r0
    14d4:	4b18      	ldr	r3, [pc, #96]	; (1538 <i2c_master_init+0x1ec>)
    14d6:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
    14d8:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    14da:	28ff      	cmp	r0, #255	; 0xff
    14dc:	d811      	bhi.n	1502 <i2c_master_init+0x1b6>
    14de:	e006      	b.n	14ee <i2c_master_init+0x1a2>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    14e0:	4a0c      	ldr	r2, [pc, #48]	; (1514 <i2c_master_init+0x1c8>)
    14e2:	6a11      	ldr	r1, [r2, #32]
    14e4:	2302      	movs	r3, #2
    14e6:	430b      	orrs	r3, r1
    14e8:	6213      	str	r3, [r2, #32]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    14ea:	2418      	movs	r4, #24
    14ec:	e746      	b.n	137c <i2c_master_init+0x30>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    14ee:	0400      	lsls	r0, r0, #16
    14f0:	23ff      	movs	r3, #255	; 0xff
    14f2:	041b      	lsls	r3, r3, #16
    14f4:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    14f6:	23ff      	movs	r3, #255	; 0xff
    14f8:	401c      	ands	r4, r3
    14fa:	4304      	orrs	r4, r0
    14fc:	60ec      	str	r4, [r5, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
    14fe:	2000      	movs	r0, #0
    1500:	e000      	b.n	1504 <i2c_master_init+0x1b8>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1502:	2040      	movs	r0, #64	; 0x40
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    1504:	b003      	add	sp, #12
    1506:	bc0c      	pop	{r2, r3}
    1508:	4690      	mov	r8, r2
    150a:	4699      	mov	r9, r3
    150c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	00003b35 	.word	0x00003b35
    1514:	40000400 	.word	0x40000400
    1518:	00004309 	.word	0x00004309
    151c:	000042a1 	.word	0x000042a1
    1520:	0000397d 	.word	0x0000397d
    1524:	000039c9 	.word	0x000039c9
    1528:	00004405 	.word	0x00004405
    152c:	41002000 	.word	0x41002000
    1530:	0000432d 	.word	0x0000432d
    1534:	3b9aca00 	.word	0x3b9aca00
    1538:	0000461d 	.word	0x0000461d
    153c:	0000473d 	.word	0x0000473d

00001540 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1540:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1542:	7e1a      	ldrb	r2, [r3, #24]
    1544:	0792      	lsls	r2, r2, #30
    1546:	d507      	bpl.n	1558 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1548:	2202      	movs	r2, #2
    154a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    154c:	8b5b      	ldrh	r3, [r3, #26]
    154e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1550:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1552:	17db      	asrs	r3, r3, #31
    1554:	4018      	ands	r0, r3
    1556:	e00a      	b.n	156e <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1558:	8b5a      	ldrh	r2, [r3, #26]
    155a:	0752      	lsls	r2, r2, #29
    155c:	d506      	bpl.n	156c <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    155e:	685a      	ldr	r2, [r3, #4]
    1560:	21c0      	movs	r1, #192	; 0xc0
    1562:	0289      	lsls	r1, r1, #10
    1564:	430a      	orrs	r2, r1
    1566:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1568:	2018      	movs	r0, #24
    156a:	e000      	b.n	156e <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
    156c:	2000      	movs	r0, #0
}
    156e:	4770      	bx	lr

00001570 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1570:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1572:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1574:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1576:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1578:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    157a:	e004      	b.n	1586 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    157c:	3301      	adds	r3, #1
    157e:	b29b      	uxth	r3, r3
    1580:	8901      	ldrh	r1, [r0, #8]
    1582:	4299      	cmp	r1, r3
    1584:	d907      	bls.n	1596 <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1586:	7e11      	ldrb	r1, [r2, #24]
    1588:	4221      	tst	r1, r4
    158a:	d106      	bne.n	159a <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    158c:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    158e:	4229      	tst	r1, r5
    1590:	d0f4      	beq.n	157c <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    1592:	2000      	movs	r0, #0
    1594:	e002      	b.n	159c <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
    1596:	2012      	movs	r0, #18
    1598:	e000      	b.n	159c <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
    159a:	2000      	movs	r0, #0
}
    159c:	bd30      	pop	{r4, r5, pc}
    159e:	46c0      	nop			; (mov r8, r8)

000015a0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    15a0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15a2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15a4:	6863      	ldr	r3, [r4, #4]
    15a6:	2280      	movs	r2, #128	; 0x80
    15a8:	02d2      	lsls	r2, r2, #11
    15aa:	4313      	orrs	r3, r2
    15ac:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    15ae:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    15b0:	4b02      	ldr	r3, [pc, #8]	; (15bc <_i2c_master_send_hs_master_code+0x1c>)
    15b2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    15b4:	2301      	movs	r3, #1
    15b6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    15b8:	bd10      	pop	{r4, pc}
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	00001571 	.word	0x00001571

000015c0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    15c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c2:	465f      	mov	r7, fp
    15c4:	4656      	mov	r6, sl
    15c6:	464d      	mov	r5, r9
    15c8:	4644      	mov	r4, r8
    15ca:	b4f0      	push	{r4, r5, r6, r7}
    15cc:	b083      	sub	sp, #12
    15ce:	1c06      	adds	r6, r0, #0
    15d0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15d2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    15d4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    15d6:	682b      	ldr	r3, [r5, #0]
    15d8:	011b      	lsls	r3, r3, #4
    15da:	0fdb      	lsrs	r3, r3, #31
    15dc:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    15de:	7a4b      	ldrb	r3, [r1, #9]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d002      	beq.n	15ea <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    15e4:	7a89      	ldrb	r1, [r1, #10]
    15e6:	4b4f      	ldr	r3, [pc, #316]	; (1724 <_i2c_master_read_packet+0x164>)
    15e8:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    15ea:	686a      	ldr	r2, [r5, #4]
    15ec:	4b4e      	ldr	r3, [pc, #312]	; (1728 <_i2c_master_read_packet+0x168>)
    15ee:	4013      	ands	r3, r2
    15f0:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    15f2:	464b      	mov	r3, r9
    15f4:	7a1b      	ldrb	r3, [r3, #8]
    15f6:	2b00      	cmp	r3, #0
    15f8:	d026      	beq.n	1648 <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    15fa:	464b      	mov	r3, r9
    15fc:	7a5b      	ldrb	r3, [r3, #9]
    15fe:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1600:	464b      	mov	r3, r9
    1602:	881b      	ldrh	r3, [r3, #0]
    1604:	005b      	lsls	r3, r3, #1
    1606:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1608:	2280      	movs	r2, #128	; 0x80
    160a:	0212      	lsls	r2, r2, #8
    160c:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    160e:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1610:	1c30      	adds	r0, r6, #0
    1612:	4b46      	ldr	r3, [pc, #280]	; (172c <_i2c_master_read_packet+0x16c>)
    1614:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1616:	686a      	ldr	r2, [r5, #4]
    1618:	4b43      	ldr	r3, [pc, #268]	; (1728 <_i2c_master_read_packet+0x168>)
    161a:	4013      	ands	r3, r2
    161c:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    161e:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1620:	d178      	bne.n	1714 <_i2c_master_read_packet+0x154>
			tmp_status = _i2c_master_address_response(module);
    1622:	1c30      	adds	r0, r6, #0
    1624:	4b42      	ldr	r3, [pc, #264]	; (1730 <_i2c_master_read_packet+0x170>)
    1626:	4798      	blx	r3
    1628:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
    162a:	d173      	bne.n	1714 <_i2c_master_read_packet+0x154>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    162c:	464b      	mov	r3, r9
    162e:	7a5b      	ldrb	r3, [r3, #9]
    1630:	039b      	lsls	r3, r3, #14
    1632:	2201      	movs	r2, #1
    1634:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1636:	464a      	mov	r2, r9
    1638:	8812      	ldrh	r2, [r2, #0]
    163a:	0a12      	lsrs	r2, r2, #8
    163c:	2178      	movs	r1, #120	; 0x78
    163e:	430a      	orrs	r2, r1
    1640:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1642:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1644:	626b      	str	r3, [r5, #36]	; 0x24
    1646:	e009      	b.n	165c <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1648:	464b      	mov	r3, r9
    164a:	881b      	ldrh	r3, [r3, #0]
    164c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    164e:	464b      	mov	r3, r9
    1650:	7a5b      	ldrb	r3, [r3, #9]
    1652:	039b      	lsls	r3, r3, #14
    1654:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1656:	2201      	movs	r2, #1
    1658:	4313      	orrs	r3, r2
    165a:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    165c:	1c30      	adds	r0, r6, #0
    165e:	4b33      	ldr	r3, [pc, #204]	; (172c <_i2c_master_read_packet+0x16c>)
    1660:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1662:	686a      	ldr	r2, [r5, #4]
    1664:	4b30      	ldr	r3, [pc, #192]	; (1728 <_i2c_master_read_packet+0x168>)
    1666:	4013      	ands	r3, r2
    1668:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    166a:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    166c:	d152      	bne.n	1714 <_i2c_master_read_packet+0x154>
		tmp_status = _i2c_master_address_response(module);
    166e:	1c30      	adds	r0, r6, #0
    1670:	4b2f      	ldr	r3, [pc, #188]	; (1730 <_i2c_master_read_packet+0x170>)
    1672:	4798      	blx	r3
    1674:	9001      	str	r0, [sp, #4]
    1676:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1678:	d14c      	bne.n	1714 <_i2c_master_read_packet+0x154>
    167a:	3c01      	subs	r4, #1
    167c:	b2a4      	uxth	r4, r4
    167e:	2300      	movs	r3, #0
    1680:	4698      	mov	r8, r3
		/* Read data buffer. */
		while (tmp_data_length--) {
    1682:	4b2c      	ldr	r3, [pc, #176]	; (1734 <_i2c_master_read_packet+0x174>)
    1684:	469b      	mov	fp, r3
    1686:	e029      	b.n	16dc <_i2c_master_read_packet+0x11c>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1688:	8b6b      	ldrh	r3, [r5, #26]
    168a:	069b      	lsls	r3, r3, #26
    168c:	d541      	bpl.n	1712 <_i2c_master_read_packet+0x152>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    168e:	7af3      	ldrb	r3, [r6, #11]
    1690:	2b00      	cmp	r3, #0
    1692:	d00f      	beq.n	16b4 <_i2c_master_read_packet+0xf4>
    1694:	4653      	mov	r3, sl
    1696:	2b00      	cmp	r3, #0
    1698:	d102      	bne.n	16a0 <_i2c_master_read_packet+0xe0>
    169a:	2c00      	cmp	r4, #0
    169c:	d002      	beq.n	16a4 <_i2c_master_read_packet+0xe4>
    169e:	e009      	b.n	16b4 <_i2c_master_read_packet+0xf4>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    16a0:	2c01      	cmp	r4, #1
    16a2:	d107      	bne.n	16b4 <_i2c_master_read_packet+0xf4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16a4:	686b      	ldr	r3, [r5, #4]
    16a6:	2280      	movs	r2, #128	; 0x80
    16a8:	02d2      	lsls	r2, r2, #11
    16aa:	4313      	orrs	r3, r2
    16ac:	606b      	str	r3, [r5, #4]
    16ae:	3c01      	subs	r4, #1
    16b0:	b2a4      	uxth	r4, r4
    16b2:	e013      	b.n	16dc <_i2c_master_read_packet+0x11c>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    16b4:	1c30      	adds	r0, r6, #0
    16b6:	4b20      	ldr	r3, [pc, #128]	; (1738 <_i2c_master_read_packet+0x178>)
    16b8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    16ba:	4643      	mov	r3, r8
    16bc:	1c5f      	adds	r7, r3, #1
    16be:	b2bf      	uxth	r7, r7
    16c0:	2328      	movs	r3, #40	; 0x28
    16c2:	5ceb      	ldrb	r3, [r5, r3]
    16c4:	464a      	mov	r2, r9
    16c6:	6852      	ldr	r2, [r2, #4]
    16c8:	4641      	mov	r1, r8
    16ca:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    16cc:	1c30      	adds	r0, r6, #0
    16ce:	4b17      	ldr	r3, [pc, #92]	; (172c <_i2c_master_read_packet+0x16c>)
    16d0:	4798      	blx	r3
    16d2:	3c01      	subs	r4, #1
    16d4:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    16d6:	2800      	cmp	r0, #0
    16d8:	d103      	bne.n	16e2 <_i2c_master_read_packet+0x122>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    16da:	46b8      	mov	r8, r7
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    16dc:	455c      	cmp	r4, fp
    16de:	d1d3      	bne.n	1688 <_i2c_master_read_packet+0xc8>
    16e0:	e001      	b.n	16e6 <_i2c_master_read_packet+0x126>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    16e2:	46b8      	mov	r8, r7
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    16e4:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
    16e6:	7ab3      	ldrb	r3, [r6, #10]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d007      	beq.n	16fc <_i2c_master_read_packet+0x13c>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    16ec:	1c30      	adds	r0, r6, #0
    16ee:	4b12      	ldr	r3, [pc, #72]	; (1738 <_i2c_master_read_packet+0x178>)
    16f0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16f2:	686b      	ldr	r3, [r5, #4]
    16f4:	22c0      	movs	r2, #192	; 0xc0
    16f6:	0292      	lsls	r2, r2, #10
    16f8:	4313      	orrs	r3, r2
    16fa:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    16fc:	1c30      	adds	r0, r6, #0
    16fe:	4b0e      	ldr	r3, [pc, #56]	; (1738 <_i2c_master_read_packet+0x178>)
    1700:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1702:	2328      	movs	r3, #40	; 0x28
    1704:	5cea      	ldrb	r2, [r5, r3]
    1706:	464b      	mov	r3, r9
    1708:	685b      	ldr	r3, [r3, #4]
    170a:	4641      	mov	r1, r8
    170c:	545a      	strb	r2, [r3, r1]
    170e:	9b01      	ldr	r3, [sp, #4]
    1710:	e000      	b.n	1714 <_i2c_master_read_packet+0x154>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    1712:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    1714:	1c18      	adds	r0, r3, #0
    1716:	b003      	add	sp, #12
    1718:	bc3c      	pop	{r2, r3, r4, r5}
    171a:	4690      	mov	r8, r2
    171c:	4699      	mov	r9, r3
    171e:	46a2      	mov	sl, r4
    1720:	46ab      	mov	fp, r5
    1722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1724:	000015a1 	.word	0x000015a1
    1728:	fffbffff 	.word	0xfffbffff
    172c:	00001571 	.word	0x00001571
    1730:	00001541 	.word	0x00001541
    1734:	0000ffff 	.word	0x0000ffff
    1738:	00001341 	.word	0x00001341

0000173c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    173c:	b5f0      	push	{r4, r5, r6, r7, lr}
    173e:	465f      	mov	r7, fp
    1740:	4656      	mov	r6, sl
    1742:	464d      	mov	r5, r9
    1744:	4644      	mov	r4, r8
    1746:	b4f0      	push	{r4, r5, r6, r7}
    1748:	b083      	sub	sp, #12
    174a:	1c06      	adds	r6, r0, #0
    174c:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    174e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1750:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    1752:	4b31      	ldr	r3, [pc, #196]	; (1818 <_i2c_master_write_packet+0xdc>)
    1754:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1756:	7a7b      	ldrb	r3, [r7, #9]
    1758:	2b00      	cmp	r3, #0
    175a:	d003      	beq.n	1764 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    175c:	7ab9      	ldrb	r1, [r7, #10]
    175e:	1c30      	adds	r0, r6, #0
    1760:	4b2e      	ldr	r3, [pc, #184]	; (181c <_i2c_master_write_packet+0xe0>)
    1762:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1764:	686a      	ldr	r2, [r5, #4]
    1766:	4b2e      	ldr	r3, [pc, #184]	; (1820 <_i2c_master_write_packet+0xe4>)
    1768:	4013      	ands	r3, r2
    176a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    176c:	7a3b      	ldrb	r3, [r7, #8]
    176e:	2b00      	cmp	r3, #0
    1770:	d009      	beq.n	1786 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1772:	7a7b      	ldrb	r3, [r7, #9]
    1774:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1776:	883b      	ldrh	r3, [r7, #0]
    1778:	005b      	lsls	r3, r3, #1
    177a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    177c:	2280      	movs	r2, #128	; 0x80
    177e:	0212      	lsls	r2, r2, #8
    1780:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1782:	626b      	str	r3, [r5, #36]	; 0x24
    1784:	e005      	b.n	1792 <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1786:	7a7b      	ldrb	r3, [r7, #9]
    1788:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    178a:	883b      	ldrh	r3, [r7, #0]
    178c:	005b      	lsls	r3, r3, #1
    178e:	4313      	orrs	r3, r2
    1790:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1792:	1c30      	adds	r0, r6, #0
    1794:	4b23      	ldr	r3, [pc, #140]	; (1824 <_i2c_master_write_packet+0xe8>)
    1796:	4798      	blx	r3
    1798:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    179a:	d136      	bne.n	180a <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
    179c:	1c30      	adds	r0, r6, #0
    179e:	4b22      	ldr	r3, [pc, #136]	; (1828 <_i2c_master_write_packet+0xec>)
    17a0:	4798      	blx	r3
    17a2:	1e03      	subs	r3, r0, #0
    17a4:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    17a6:	d130      	bne.n	180a <_i2c_master_write_packet+0xce>
    17a8:	46a0      	mov	r8, r4
    17aa:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    17ac:	3320      	adds	r3, #32
    17ae:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    17b0:	4b19      	ldr	r3, [pc, #100]	; (1818 <_i2c_master_write_packet+0xdc>)
    17b2:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17b4:	4b1b      	ldr	r3, [pc, #108]	; (1824 <_i2c_master_write_packet+0xe8>)
    17b6:	469a      	mov	sl, r3
    17b8:	e011      	b.n	17de <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    17ba:	8b6b      	ldrh	r3, [r5, #26]
    17bc:	464a      	mov	r2, r9
    17be:	4213      	tst	r3, r2
    17c0:	d022      	beq.n	1808 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    17c2:	1c30      	adds	r0, r6, #0
    17c4:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	5d1a      	ldrb	r2, [r3, r4]
    17ca:	2328      	movs	r3, #40	; 0x28
    17cc:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17ce:	1c30      	adds	r0, r6, #0
    17d0:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    17d2:	2800      	cmp	r0, #0
    17d4:	d106      	bne.n	17e4 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    17d6:	8b6b      	ldrh	r3, [r5, #26]
    17d8:	3401      	adds	r4, #1
    17da:	075b      	lsls	r3, r3, #29
    17dc:	d404      	bmi.n	17e8 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    17de:	4544      	cmp	r4, r8
    17e0:	d1eb      	bne.n	17ba <_i2c_master_write_packet+0x7e>
    17e2:	e003      	b.n	17ec <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    17e4:	9001      	str	r0, [sp, #4]
    17e6:	e001      	b.n	17ec <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    17e8:	231e      	movs	r3, #30
    17ea:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
    17ec:	7ab3      	ldrb	r3, [r6, #10]
    17ee:	9801      	ldr	r0, [sp, #4]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d00a      	beq.n	180a <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    17f4:	1c30      	adds	r0, r6, #0
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <_i2c_master_write_packet+0xdc>)
    17f8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    17fa:	686b      	ldr	r3, [r5, #4]
    17fc:	22c0      	movs	r2, #192	; 0xc0
    17fe:	0292      	lsls	r2, r2, #10
    1800:	4313      	orrs	r3, r2
    1802:	606b      	str	r3, [r5, #4]
    1804:	9801      	ldr	r0, [sp, #4]
    1806:	e000      	b.n	180a <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    1808:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    180a:	b003      	add	sp, #12
    180c:	bc3c      	pop	{r2, r3, r4, r5}
    180e:	4690      	mov	r8, r2
    1810:	4699      	mov	r9, r3
    1812:	46a2      	mov	sl, r4
    1814:	46ab      	mov	fp, r5
    1816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1818:	00001341 	.word	0x00001341
    181c:	000015a1 	.word	0x000015a1
    1820:	fffbffff 	.word	0xfffbffff
    1824:	00001571 	.word	0x00001571
    1828:	00001541 	.word	0x00001541

0000182c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    182c:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    182e:	2301      	movs	r3, #1
    1830:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1832:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
    1834:	4b01      	ldr	r3, [pc, #4]	; (183c <i2c_master_read_packet_wait+0x10>)
    1836:	4798      	blx	r3
}
    1838:	bd08      	pop	{r3, pc}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	000015c1 	.word	0x000015c1

00001840 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1840:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1842:	2301      	movs	r3, #1
    1844:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1846:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1848:	4b01      	ldr	r3, [pc, #4]	; (1850 <i2c_master_write_packet_wait+0x10>)
    184a:	4798      	blx	r3
}
    184c:	bd08      	pop	{r3, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	0000173d 	.word	0x0000173d

00001854 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1854:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    1856:	2300      	movs	r3, #0
    1858:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    185a:	3301      	adds	r3, #1
    185c:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    185e:	4b01      	ldr	r3, [pc, #4]	; (1864 <i2c_master_write_packet_wait_no_stop+0x10>)
    1860:	4798      	blx	r3
}
    1862:	bd08      	pop	{r3, pc}
    1864:	0000173d 	.word	0x0000173d

00001868 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1868:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    186a:	0080      	lsls	r0, r0, #2
    186c:	4b14      	ldr	r3, [pc, #80]	; (18c0 <_tc_interrupt_handler+0x58>)
    186e:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1870:	682b      	ldr	r3, [r5, #0]
    1872:	7a9c      	ldrb	r4, [r3, #10]
    1874:	7e2b      	ldrb	r3, [r5, #24]
    1876:	401c      	ands	r4, r3
    1878:	7e6b      	ldrb	r3, [r5, #25]
    187a:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    187c:	07e3      	lsls	r3, r4, #31
    187e:	d505      	bpl.n	188c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1880:	1c28      	adds	r0, r5, #0
    1882:	68ab      	ldr	r3, [r5, #8]
    1884:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1886:	2301      	movs	r3, #1
    1888:	682a      	ldr	r2, [r5, #0]
    188a:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    188c:	07a3      	lsls	r3, r4, #30
    188e:	d505      	bpl.n	189c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1890:	1c28      	adds	r0, r5, #0
    1892:	68eb      	ldr	r3, [r5, #12]
    1894:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1896:	2302      	movs	r3, #2
    1898:	682a      	ldr	r2, [r5, #0]
    189a:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    189c:	06e3      	lsls	r3, r4, #27
    189e:	d505      	bpl.n	18ac <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    18a0:	1c28      	adds	r0, r5, #0
    18a2:	692b      	ldr	r3, [r5, #16]
    18a4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    18a6:	2310      	movs	r3, #16
    18a8:	682a      	ldr	r2, [r5, #0]
    18aa:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    18ac:	06a3      	lsls	r3, r4, #26
    18ae:	d505      	bpl.n	18bc <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18b0:	1c28      	adds	r0, r5, #0
    18b2:	696b      	ldr	r3, [r5, #20]
    18b4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18b6:	682b      	ldr	r3, [r5, #0]
    18b8:	2220      	movs	r2, #32
    18ba:	729a      	strb	r2, [r3, #10]
	}
}
    18bc:	bd38      	pop	{r3, r4, r5, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	20001f74 	.word	0x20001f74

000018c4 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
    18c4:	b508      	push	{r3, lr}
    18c6:	2000      	movs	r0, #0
    18c8:	4b01      	ldr	r3, [pc, #4]	; (18d0 <TC0_Handler+0xc>)
    18ca:	4798      	blx	r3
    18cc:	bd08      	pop	{r3, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	00001869 	.word	0x00001869

000018d4 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    18d4:	b508      	push	{r3, lr}
    18d6:	2001      	movs	r0, #1
    18d8:	4b01      	ldr	r3, [pc, #4]	; (18e0 <TC1_Handler+0xc>)
    18da:	4798      	blx	r3
    18dc:	bd08      	pop	{r3, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	00001869 	.word	0x00001869

000018e4 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    18e4:	b508      	push	{r3, lr}
    18e6:	2002      	movs	r0, #2
    18e8:	4b01      	ldr	r3, [pc, #4]	; (18f0 <TC4_Handler+0xc>)
    18ea:	4798      	blx	r3
    18ec:	bd08      	pop	{r3, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	00001869 	.word	0x00001869

000018f4 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    18f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f6:	465f      	mov	r7, fp
    18f8:	4656      	mov	r6, sl
    18fa:	464d      	mov	r5, r9
    18fc:	4644      	mov	r4, r8
    18fe:	b4f0      	push	{r4, r5, r6, r7}
    1900:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    1902:	4bc8      	ldr	r3, [pc, #800]	; (1c24 <USB_Handler+0x330>)
    1904:	681f      	ldr	r7, [r3, #0]
    1906:	683d      	ldr	r5, [r7, #0]
    1908:	782b      	ldrb	r3, [r5, #0]
    190a:	09db      	lsrs	r3, r3, #7
    190c:	d100      	bne.n	1910 <USB_Handler+0x1c>
    190e:	e154      	b.n	1bba <USB_Handler+0x2c6>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    1910:	8c28      	ldrh	r0, [r5, #32]
    1912:	b280      	uxth	r0, r0
    1914:	4bc4      	ldr	r3, [pc, #784]	; (1c28 <USB_Handler+0x334>)
    1916:	4798      	blx	r3
    1918:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    191a:	2c1f      	cmp	r4, #31
    191c:	d900      	bls.n	1920 <USB_Handler+0x2c>
    191e:	e0d2      	b.n	1ac6 <USB_Handler+0x1d2>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    1920:	1c03      	adds	r3, r0, #0
    1922:	3308      	adds	r3, #8
    1924:	015b      	lsls	r3, r3, #5
    1926:	18ed      	adds	r5, r5, r3
    1928:	79ed      	ldrb	r5, [r5, #7]
    192a:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    192c:	07ab      	lsls	r3, r5, #30
    192e:	d050      	beq.n	19d2 <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1930:	4abe      	ldr	r2, [pc, #760]	; (1c2c <USB_Handler+0x338>)
    1932:	2301      	movs	r3, #1
    1934:	4083      	lsls	r3, r0
    1936:	6811      	ldr	r1, [r2, #0]
    1938:	4399      	bics	r1, r3
    193a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    193c:	1c03      	adds	r3, r0, #0
    193e:	3308      	adds	r3, #8
    1940:	015b      	lsls	r3, r3, #5
    1942:	683a      	ldr	r2, [r7, #0]
    1944:	4694      	mov	ip, r2
    1946:	4463      	add	r3, ip
    1948:	2203      	movs	r2, #3
    194a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    194c:	183b      	adds	r3, r7, r0
    194e:	33a8      	adds	r3, #168	; 0xa8
    1950:	799b      	ldrb	r3, [r3, #6]
    1952:	07db      	lsls	r3, r3, #31
    1954:	d53d      	bpl.n	19d2 <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    1956:	4bb6      	ldr	r3, [pc, #728]	; (1c30 <USB_Handler+0x33c>)
    1958:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    195a:	683a      	ldr	r2, [r7, #0]
    195c:	1c03      	adds	r3, r0, #0
    195e:	3308      	adds	r3, #8
    1960:	015b      	lsls	r3, r3, #5
    1962:	5c9b      	ldrb	r3, [r3, r2]
    1964:	2203      	movs	r2, #3
    1966:	4013      	ands	r3, r2
    1968:	2b01      	cmp	r3, #1
    196a:	d110      	bne.n	198e <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    196c:	0142      	lsls	r2, r0, #5
    196e:	4bb1      	ldr	r3, [pc, #708]	; (1c34 <USB_Handler+0x340>)
    1970:	189b      	adds	r3, r3, r2
    1972:	685a      	ldr	r2, [r3, #4]
    1974:	0492      	lsls	r2, r2, #18
    1976:	0c92      	lsrs	r2, r2, #18
    1978:	49ad      	ldr	r1, [pc, #692]	; (1c30 <USB_Handler+0x33c>)
    197a:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    197c:	685a      	ldr	r2, [r3, #4]
    197e:	0112      	lsls	r2, r2, #4
    1980:	0c92      	lsrs	r2, r2, #18
    1982:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    1984:	685a      	ldr	r2, [r3, #4]
    1986:	0b92      	lsrs	r2, r2, #14
    1988:	0392      	lsls	r2, r2, #14
    198a:	605a      	str	r2, [r3, #4]
    198c:	e019      	b.n	19c2 <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    198e:	0143      	lsls	r3, r0, #5
    1990:	4aa8      	ldr	r2, [pc, #672]	; (1c34 <USB_Handler+0x340>)
    1992:	18d3      	adds	r3, r2, r3
    1994:	685a      	ldr	r2, [r3, #4]
    1996:	0112      	lsls	r2, r2, #4
    1998:	0c92      	lsrs	r2, r2, #18
    199a:	48a5      	ldr	r0, [pc, #660]	; (1c30 <USB_Handler+0x33c>)
    199c:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    199e:	6859      	ldr	r1, [r3, #4]
    19a0:	0489      	lsls	r1, r1, #18
    19a2:	0c89      	lsrs	r1, r1, #18
    19a4:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    19a6:	6858      	ldr	r0, [r3, #4]
    19a8:	49a3      	ldr	r1, [pc, #652]	; (1c38 <USB_Handler+0x344>)
    19aa:	4001      	ands	r1, r0
    19ac:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    19ae:	2a00      	cmp	r2, #0
    19b0:	d107      	bne.n	19c2 <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    19b2:	0163      	lsls	r3, r4, #5
    19b4:	4a9f      	ldr	r2, [pc, #636]	; (1c34 <USB_Handler+0x340>)
    19b6:	18d3      	adds	r3, r2, r3
    19b8:	685b      	ldr	r3, [r3, #4]
    19ba:	049b      	lsls	r3, r3, #18
    19bc:	0c9b      	lsrs	r3, r3, #18
    19be:	4a9c      	ldr	r2, [pc, #624]	; (1c30 <USB_Handler+0x33c>)
    19c0:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    19c2:	4b98      	ldr	r3, [pc, #608]	; (1c24 <USB_Handler+0x330>)
    19c4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    19c6:	1ca3      	adds	r3, r4, #2
    19c8:	011b      	lsls	r3, r3, #4
    19ca:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    19cc:	685b      	ldr	r3, [r3, #4]
    19ce:	4998      	ldr	r1, [pc, #608]	; (1c30 <USB_Handler+0x33c>)
    19d0:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    19d2:	076b      	lsls	r3, r5, #29
    19d4:	d50e      	bpl.n	19f4 <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    19d6:	4a95      	ldr	r2, [pc, #596]	; (1c2c <USB_Handler+0x338>)
    19d8:	2301      	movs	r3, #1
    19da:	40a3      	lsls	r3, r4
    19dc:	6811      	ldr	r1, [r2, #0]
    19de:	4399      	bics	r1, r3
    19e0:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    19e2:	4b90      	ldr	r3, [pc, #576]	; (1c24 <USB_Handler+0x330>)
    19e4:	681b      	ldr	r3, [r3, #0]
    19e6:	681a      	ldr	r2, [r3, #0]
    19e8:	1c23      	adds	r3, r4, #0
    19ea:	3308      	adds	r3, #8
    19ec:	015b      	lsls	r3, r3, #5
    19ee:	18d3      	adds	r3, r2, r3
    19f0:	2204      	movs	r2, #4
    19f2:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    19f4:	072b      	lsls	r3, r5, #28
    19f6:	d521      	bpl.n	1a3c <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    19f8:	4a8c      	ldr	r2, [pc, #560]	; (1c2c <USB_Handler+0x338>)
    19fa:	2301      	movs	r3, #1
    19fc:	40a3      	lsls	r3, r4
    19fe:	6811      	ldr	r1, [r2, #0]
    1a00:	4399      	bics	r1, r3
    1a02:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1a04:	4b87      	ldr	r3, [pc, #540]	; (1c24 <USB_Handler+0x330>)
    1a06:	6818      	ldr	r0, [r3, #0]
    1a08:	1c23      	adds	r3, r4, #0
    1a0a:	3308      	adds	r3, #8
    1a0c:	015b      	lsls	r3, r3, #5
    1a0e:	6802      	ldr	r2, [r0, #0]
    1a10:	4694      	mov	ip, r2
    1a12:	4463      	add	r3, ip
    1a14:	2208      	movs	r2, #8
    1a16:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1a18:	1903      	adds	r3, r0, r4
    1a1a:	33a8      	adds	r3, #168	; 0xa8
    1a1c:	799b      	ldrb	r3, [r3, #6]
    1a1e:	079b      	lsls	r3, r3, #30
    1a20:	d50c      	bpl.n	1a3c <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    1a22:	4983      	ldr	r1, [pc, #524]	; (1c30 <USB_Handler+0x33c>)
    1a24:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    1a26:	0163      	lsls	r3, r4, #5
    1a28:	4a82      	ldr	r2, [pc, #520]	; (1c34 <USB_Handler+0x340>)
    1a2a:	18d3      	adds	r3, r2, r3
    1a2c:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    1a2e:	231f      	movs	r3, #31
    1a30:	4013      	ands	r3, r2
    1a32:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1a34:	0123      	lsls	r3, r4, #4
    1a36:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    1a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a3a:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    1a3c:	06eb      	lsls	r3, r5, #27
    1a3e:	d522      	bpl.n	1a86 <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1a40:	4a7a      	ldr	r2, [pc, #488]	; (1c2c <USB_Handler+0x338>)
    1a42:	2301      	movs	r3, #1
    1a44:	40a3      	lsls	r3, r4
    1a46:	6811      	ldr	r1, [r2, #0]
    1a48:	4399      	bics	r1, r3
    1a4a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1a4c:	4b75      	ldr	r3, [pc, #468]	; (1c24 <USB_Handler+0x330>)
    1a4e:	6818      	ldr	r0, [r3, #0]
    1a50:	1c23      	adds	r3, r4, #0
    1a52:	3308      	adds	r3, #8
    1a54:	015b      	lsls	r3, r3, #5
    1a56:	6802      	ldr	r2, [r0, #0]
    1a58:	4694      	mov	ip, r2
    1a5a:	4463      	add	r3, ip
    1a5c:	2210      	movs	r2, #16
    1a5e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1a60:	1903      	adds	r3, r0, r4
    1a62:	33a8      	adds	r3, #168	; 0xa8
    1a64:	799b      	ldrb	r3, [r3, #6]
    1a66:	075b      	lsls	r3, r3, #29
    1a68:	d50d      	bpl.n	1a86 <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    1a6a:	4a71      	ldr	r2, [pc, #452]	; (1c30 <USB_Handler+0x33c>)
    1a6c:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1a6e:	0163      	lsls	r3, r4, #5
    1a70:	4970      	ldr	r1, [pc, #448]	; (1c34 <USB_Handler+0x340>)
    1a72:	18cb      	adds	r3, r1, r3
    1a74:	685b      	ldr	r3, [r3, #4]
    1a76:	011b      	lsls	r3, r3, #4
    1a78:	0c9b      	lsrs	r3, r3, #18
    1a7a:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    1a7c:	0123      	lsls	r3, r4, #4
    1a7e:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    1a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a82:	2100      	movs	r1, #0
    1a84:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    1a86:	06ab      	lsls	r3, r5, #26
    1a88:	d400      	bmi.n	1a8c <USB_Handler+0x198>
    1a8a:	e1f8      	b.n	1e7e <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1a8c:	4a67      	ldr	r2, [pc, #412]	; (1c2c <USB_Handler+0x338>)
    1a8e:	2301      	movs	r3, #1
    1a90:	40a3      	lsls	r3, r4
    1a92:	6811      	ldr	r1, [r2, #0]
    1a94:	4399      	bics	r1, r3
    1a96:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1a98:	4b62      	ldr	r3, [pc, #392]	; (1c24 <USB_Handler+0x330>)
    1a9a:	6818      	ldr	r0, [r3, #0]
    1a9c:	1c23      	adds	r3, r4, #0
    1a9e:	3308      	adds	r3, #8
    1aa0:	015b      	lsls	r3, r3, #5
    1aa2:	6802      	ldr	r2, [r0, #0]
    1aa4:	4694      	mov	ip, r2
    1aa6:	4463      	add	r3, ip
    1aa8:	2220      	movs	r2, #32
    1aaa:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1aac:	1903      	adds	r3, r0, r4
    1aae:	33a8      	adds	r3, #168	; 0xa8
    1ab0:	799b      	ldrb	r3, [r3, #6]
    1ab2:	071b      	lsls	r3, r3, #28
    1ab4:	d400      	bmi.n	1ab8 <USB_Handler+0x1c4>
    1ab6:	e1e2      	b.n	1e7e <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    1ab8:	495d      	ldr	r1, [pc, #372]	; (1c30 <USB_Handler+0x33c>)
    1aba:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    1abc:	0124      	lsls	r4, r4, #4
    1abe:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    1ac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1ac2:	4798      	blx	r3
    1ac4:	e1db      	b.n	1e7e <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    1ac6:	8bac      	ldrh	r4, [r5, #28]
    1ac8:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    1aca:	0763      	lsls	r3, r4, #29
    1acc:	d508      	bpl.n	1ae0 <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    1ace:	2304      	movs	r3, #4
    1ad0:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    1ad2:	33a1      	adds	r3, #161	; 0xa1
    1ad4:	5cfb      	ldrb	r3, [r7, r3]
    1ad6:	07db      	lsls	r3, r3, #31
    1ad8:	d502      	bpl.n	1ae0 <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	1c38      	adds	r0, r7, #0
    1ade:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    1ae0:	0723      	lsls	r3, r4, #28
    1ae2:	d50d      	bpl.n	1b00 <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1ae4:	2200      	movs	r2, #0
    1ae6:	4b51      	ldr	r3, [pc, #324]	; (1c2c <USB_Handler+0x338>)
    1ae8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    1aea:	4b4e      	ldr	r3, [pc, #312]	; (1c24 <USB_Handler+0x330>)
    1aec:	6818      	ldr	r0, [r3, #0]
    1aee:	2308      	movs	r3, #8
    1af0:	6802      	ldr	r2, [r0, #0]
    1af2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    1af4:	339d      	adds	r3, #157	; 0x9d
    1af6:	5cc3      	ldrb	r3, [r0, r3]
    1af8:	079b      	lsls	r3, r3, #30
    1afa:	d501      	bpl.n	1b00 <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    1afc:	6883      	ldr	r3, [r0, #8]
    1afe:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    1b00:	0663      	lsls	r3, r4, #25
    1b02:	d50a      	bpl.n	1b1a <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    1b04:	4b47      	ldr	r3, [pc, #284]	; (1c24 <USB_Handler+0x330>)
    1b06:	6818      	ldr	r0, [r3, #0]
    1b08:	2340      	movs	r3, #64	; 0x40
    1b0a:	6802      	ldr	r2, [r0, #0]
    1b0c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    1b0e:	3365      	adds	r3, #101	; 0x65
    1b10:	5cc3      	ldrb	r3, [r0, r3]
    1b12:	06db      	lsls	r3, r3, #27
    1b14:	d501      	bpl.n	1b1a <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    1b16:	6943      	ldr	r3, [r0, #20]
    1b18:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    1b1a:	06a3      	lsls	r3, r4, #26
    1b1c:	d50a      	bpl.n	1b34 <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    1b1e:	4b41      	ldr	r3, [pc, #260]	; (1c24 <USB_Handler+0x330>)
    1b20:	6818      	ldr	r0, [r3, #0]
    1b22:	2320      	movs	r3, #32
    1b24:	6802      	ldr	r2, [r0, #0]
    1b26:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    1b28:	3385      	adds	r3, #133	; 0x85
    1b2a:	5cc3      	ldrb	r3, [r0, r3]
    1b2c:	071b      	lsls	r3, r3, #28
    1b2e:	d501      	bpl.n	1b34 <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    1b30:	6903      	ldr	r3, [r0, #16]
    1b32:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    1b34:	06e3      	lsls	r3, r4, #27
    1b36:	d50a      	bpl.n	1b4e <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    1b38:	4b3a      	ldr	r3, [pc, #232]	; (1c24 <USB_Handler+0x330>)
    1b3a:	6818      	ldr	r0, [r3, #0]
    1b3c:	2310      	movs	r3, #16
    1b3e:	6802      	ldr	r2, [r0, #0]
    1b40:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    1b42:	3395      	adds	r3, #149	; 0x95
    1b44:	5cc3      	ldrb	r3, [r0, r3]
    1b46:	075b      	lsls	r3, r3, #29
    1b48:	d501      	bpl.n	1b4e <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    1b4a:	68c3      	ldr	r3, [r0, #12]
    1b4c:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    1b4e:	0623      	lsls	r3, r4, #24
    1b50:	d50d      	bpl.n	1b6e <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1b52:	2200      	movs	r2, #0
    1b54:	4b35      	ldr	r3, [pc, #212]	; (1c2c <USB_Handler+0x338>)
    1b56:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    1b58:	4b32      	ldr	r3, [pc, #200]	; (1c24 <USB_Handler+0x330>)
    1b5a:	6818      	ldr	r0, [r3, #0]
    1b5c:	2380      	movs	r3, #128	; 0x80
    1b5e:	6802      	ldr	r2, [r0, #0]
    1b60:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    1b62:	3325      	adds	r3, #37	; 0x25
    1b64:	5cc3      	ldrb	r3, [r0, r3]
    1b66:	069b      	lsls	r3, r3, #26
    1b68:	d501      	bpl.n	1b6e <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    1b6a:	6983      	ldr	r3, [r0, #24]
    1b6c:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    1b6e:	05e3      	lsls	r3, r4, #23
    1b70:	d50e      	bpl.n	1b90 <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1b72:	2200      	movs	r2, #0
    1b74:	4b2d      	ldr	r3, [pc, #180]	; (1c2c <USB_Handler+0x338>)
    1b76:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    1b78:	4b2a      	ldr	r3, [pc, #168]	; (1c24 <USB_Handler+0x330>)
    1b7a:	6818      	ldr	r0, [r3, #0]
    1b7c:	2380      	movs	r3, #128	; 0x80
    1b7e:	005b      	lsls	r3, r3, #1
    1b80:	6802      	ldr	r2, [r0, #0]
    1b82:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    1b84:	3b5b      	subs	r3, #91	; 0x5b
    1b86:	5cc3      	ldrb	r3, [r0, r3]
    1b88:	065b      	lsls	r3, r3, #25
    1b8a:	d501      	bpl.n	1b90 <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    1b8c:	69c3      	ldr	r3, [r0, #28]
    1b8e:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    1b90:	05a3      	lsls	r3, r4, #22
    1b92:	d400      	bmi.n	1b96 <USB_Handler+0x2a2>
    1b94:	e173      	b.n	1e7e <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1b96:	2200      	movs	r2, #0
    1b98:	4b24      	ldr	r3, [pc, #144]	; (1c2c <USB_Handler+0x338>)
    1b9a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    1b9c:	4b21      	ldr	r3, [pc, #132]	; (1c24 <USB_Handler+0x330>)
    1b9e:	6818      	ldr	r0, [r3, #0]
    1ba0:	2380      	movs	r3, #128	; 0x80
    1ba2:	009b      	lsls	r3, r3, #2
    1ba4:	6802      	ldr	r2, [r0, #0]
    1ba6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    1ba8:	3b5c      	subs	r3, #92	; 0x5c
    1baa:	3bff      	subs	r3, #255	; 0xff
    1bac:	5cc3      	ldrb	r3, [r0, r3]
    1bae:	2b7f      	cmp	r3, #127	; 0x7f
    1bb0:	d800      	bhi.n	1bb4 <USB_Handler+0x2c0>
    1bb2:	e164      	b.n	1e7e <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    1bb4:	6a03      	ldr	r3, [r0, #32]
    1bb6:	4798      	blx	r3
    1bb8:	e161      	b.n	1e7e <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    1bba:	8c2e      	ldrh	r6, [r5, #32]
    1bbc:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    1bbe:	2e00      	cmp	r6, #0
    1bc0:	d140      	bne.n	1c44 <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    1bc2:	8bae      	ldrh	r6, [r5, #28]
    1bc4:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    1bc6:	23ab      	movs	r3, #171	; 0xab
    1bc8:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    1bca:	5afd      	ldrh	r5, [r7, r3]
    1bcc:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    1bce:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    1bd0:	5afb      	ldrh	r3, [r7, r3]
    1bd2:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    1bd4:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    1bd6:	4f19      	ldr	r7, [pc, #100]	; (1c3c <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    1bd8:	4b12      	ldr	r3, [pc, #72]	; (1c24 <USB_Handler+0x330>)
    1bda:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    1bdc:	4698      	mov	r8, r3
    1bde:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    1be0:	5bdb      	ldrh	r3, [r3, r7]
    1be2:	421e      	tst	r6, r3
    1be4:	d003      	beq.n	1bee <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    1be6:	464a      	mov	r2, r9
    1be8:	6812      	ldr	r2, [r2, #0]
    1bea:	6812      	ldr	r2, [r2, #0]
    1bec:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    1bee:	421d      	tst	r5, r3
    1bf0:	d013      	beq.n	1c1a <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    1bf2:	2c06      	cmp	r4, #6
    1bf4:	d107      	bne.n	1c06 <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    1bf6:	4b0f      	ldr	r3, [pc, #60]	; (1c34 <USB_Handler+0x340>)
    1bf8:	891b      	ldrh	r3, [r3, #8]
    1bfa:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    1bfc:	2380      	movs	r3, #128	; 0x80
    1bfe:	005b      	lsls	r3, r3, #1
    1c00:	4013      	ands	r3, r2
    1c02:	4a0f      	ldr	r2, [pc, #60]	; (1c40 <USB_Handler+0x34c>)
    1c04:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    1c06:	1c23      	adds	r3, r4, #0
    1c08:	332e      	adds	r3, #46	; 0x2e
    1c0a:	009b      	lsls	r3, r3, #2
    1c0c:	4642      	mov	r2, r8
    1c0e:	6812      	ldr	r2, [r2, #0]
    1c10:	589b      	ldr	r3, [r3, r2]
    1c12:	4642      	mov	r2, r8
    1c14:	6810      	ldr	r0, [r2, #0]
    1c16:	490a      	ldr	r1, [pc, #40]	; (1c40 <USB_Handler+0x34c>)
    1c18:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    1c1a:	3401      	adds	r4, #1
    1c1c:	2c07      	cmp	r4, #7
    1c1e:	d1de      	bne.n	1bde <USB_Handler+0x2ea>
    1c20:	e12d      	b.n	1e7e <USB_Handler+0x58a>
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	2000004c 	.word	0x2000004c
    1c28:	00004921 	.word	0x00004921
    1c2c:	20000040 	.word	0x20000040
    1c30:	20000038 	.word	0x20000038
    1c34:	20001f80 	.word	0x20001f80
    1c38:	f0003fff 	.word	0xf0003fff
    1c3c:	00004a44 	.word	0x00004a44
    1c40:	20000034 	.word	0x20000034
    1c44:	1c3c      	adds	r4, r7, #0
    1c46:	3459      	adds	r4, #89	; 0x59
    1c48:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    1c4a:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    1c4c:	2201      	movs	r2, #1
    1c4e:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1c50:	325f      	adds	r2, #95	; 0x5f
    1c52:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c54:	3a50      	subs	r2, #80	; 0x50
    1c56:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1c58:	3a04      	subs	r2, #4
    1c5a:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1c5c:	46b8      	mov	r8, r7
    1c5e:	1c2f      	adds	r7, r5, #0
    1c60:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    1c62:	9301      	str	r3, [sp, #4]
    1c64:	1c32      	adds	r2, r6, #0
    1c66:	411a      	asrs	r2, r3
    1c68:	4661      	mov	r1, ip
    1c6a:	4211      	tst	r1, r2
    1c6c:	d100      	bne.n	1c70 <USB_Handler+0x37c>
    1c6e:	e101      	b.n	1e74 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    1c70:	1c1a      	adds	r2, r3, #0
    1c72:	3208      	adds	r2, #8
    1c74:	0152      	lsls	r2, r2, #5
    1c76:	18ba      	adds	r2, r7, r2
    1c78:	79d2      	ldrb	r2, [r2, #7]
    1c7a:	b2d2      	uxtb	r2, r2
    1c7c:	7a21      	ldrb	r1, [r4, #8]
    1c7e:	7825      	ldrb	r5, [r4, #0]
    1c80:	4029      	ands	r1, r5
				flags_run = flags &
    1c82:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1c84:	464d      	mov	r5, r9
    1c86:	4215      	tst	r5, r2
    1c88:	d02a      	beq.n	1ce0 <USB_Handler+0x3ec>
    1c8a:	1c3d      	adds	r5, r7, #0
    1c8c:	4647      	mov	r7, r8
    1c8e:	015b      	lsls	r3, r3, #5
    1c90:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    1c92:	2308      	movs	r3, #8
    1c94:	33ff      	adds	r3, #255	; 0xff
    1c96:	5ceb      	ldrb	r3, [r5, r3]
    1c98:	065b      	lsls	r3, r3, #25
    1c9a:	d509      	bpl.n	1cb0 <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    1c9c:	2240      	movs	r2, #64	; 0x40
    1c9e:	2308      	movs	r3, #8
    1ca0:	33ff      	adds	r3, #255	; 0xff
    1ca2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1ca4:	3b88      	subs	r3, #136	; 0x88
    1ca6:	3bff      	subs	r3, #255	; 0xff
    1ca8:	4303      	orrs	r3, r0
    1caa:	4a78      	ldr	r2, [pc, #480]	; (1e8c <USB_Handler+0x598>)
    1cac:	7193      	strb	r3, [r2, #6]
    1cae:	e00a      	b.n	1cc6 <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    1cb0:	2308      	movs	r3, #8
    1cb2:	33ff      	adds	r3, #255	; 0xff
    1cb4:	5ceb      	ldrb	r3, [r5, r3]
    1cb6:	069b      	lsls	r3, r3, #26
    1cb8:	d505      	bpl.n	1cc6 <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    1cba:	2220      	movs	r2, #32
    1cbc:	2308      	movs	r3, #8
    1cbe:	33ff      	adds	r3, #255	; 0xff
    1cc0:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1cc2:	4b72      	ldr	r3, [pc, #456]	; (1e8c <USB_Handler+0x598>)
    1cc4:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1cc6:	2360      	movs	r3, #96	; 0x60
    1cc8:	420b      	tst	r3, r1
    1cca:	d100      	bne.n	1cce <USB_Handler+0x3da>
    1ccc:	e0d7      	b.n	1e7e <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    1cce:	9b01      	ldr	r3, [sp, #4]
    1cd0:	011b      	lsls	r3, r3, #4
    1cd2:	18fb      	adds	r3, r7, r3
    1cd4:	33dc      	adds	r3, #220	; 0xdc
    1cd6:	685b      	ldr	r3, [r3, #4]
    1cd8:	1c38      	adds	r0, r7, #0
    1cda:	496c      	ldr	r1, [pc, #432]	; (1e8c <USB_Handler+0x598>)
    1cdc:	4798      	blx	r3
    1cde:	e0ce      	b.n	1e7e <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1ce0:	4655      	mov	r5, sl
    1ce2:	4215      	tst	r5, r2
    1ce4:	d01f      	beq.n	1d26 <USB_Handler+0x432>
    1ce6:	1c3d      	adds	r5, r7, #0
    1ce8:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    1cea:	9a01      	ldr	r2, [sp, #4]
    1cec:	1c13      	adds	r3, r2, #0
    1cee:	3308      	adds	r3, #8
    1cf0:	015b      	lsls	r3, r3, #5
    1cf2:	18ed      	adds	r5, r5, r3
    1cf4:	2310      	movs	r3, #16
    1cf6:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    1cf8:	18bb      	adds	r3, r7, r2
    1cfa:	3361      	adds	r3, #97	; 0x61
    1cfc:	33ff      	adds	r3, #255	; 0xff
    1cfe:	781b      	ldrb	r3, [r3, #0]
    1d00:	06db      	lsls	r3, r3, #27
    1d02:	d400      	bmi.n	1d06 <USB_Handler+0x412>
    1d04:	e0bb      	b.n	1e7e <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    1d06:	1c10      	adds	r0, r2, #0
    1d08:	0153      	lsls	r3, r2, #5
    1d0a:	4a61      	ldr	r2, [pc, #388]	; (1e90 <USB_Handler+0x59c>)
    1d0c:	18d3      	adds	r3, r2, r3
    1d0e:	685b      	ldr	r3, [r3, #4]
    1d10:	049b      	lsls	r3, r3, #18
    1d12:	0c9b      	lsrs	r3, r3, #18
    1d14:	495d      	ldr	r1, [pc, #372]	; (1e8c <USB_Handler+0x598>)
    1d16:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    1d18:	0103      	lsls	r3, r0, #4
    1d1a:	18fb      	adds	r3, r7, r3
    1d1c:	33d8      	adds	r3, #216	; 0xd8
    1d1e:	685b      	ldr	r3, [r3, #4]
    1d20:	4640      	mov	r0, r8
    1d22:	4798      	blx	r3
    1d24:	e0ab      	b.n	1e7e <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1d26:	465d      	mov	r5, fp
    1d28:	4215      	tst	r5, r2
    1d2a:	d05f      	beq.n	1dec <USB_Handler+0x4f8>
    1d2c:	1c3d      	adds	r5, r7, #0
    1d2e:	4647      	mov	r7, r8
    1d30:	4680      	mov	r8, r0
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	015b      	lsls	r3, r3, #5
    1d36:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1d38:	2308      	movs	r3, #8
    1d3a:	33ff      	adds	r3, #255	; 0xff
    1d3c:	5ceb      	ldrb	r3, [r5, r3]
    1d3e:	071b      	lsls	r3, r3, #28
    1d40:	d523      	bpl.n	1d8a <USB_Handler+0x496>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    1d42:	2208      	movs	r2, #8
    1d44:	2308      	movs	r3, #8
    1d46:	33ff      	adds	r3, #255	; 0xff
    1d48:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1d4a:	9b01      	ldr	r3, [sp, #4]
    1d4c:	015b      	lsls	r3, r3, #5
    1d4e:	4a50      	ldr	r2, [pc, #320]	; (1e90 <USB_Handler+0x59c>)
    1d50:	18d3      	adds	r3, r2, r3
    1d52:	3318      	adds	r3, #24
    1d54:	789b      	ldrb	r3, [r3, #2]
    1d56:	079b      	lsls	r3, r3, #30
    1d58:	d507      	bpl.n	1d6a <USB_Handler+0x476>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    1d5a:	9b01      	ldr	r3, [sp, #4]
    1d5c:	015a      	lsls	r2, r3, #5
    1d5e:	4b4c      	ldr	r3, [pc, #304]	; (1e90 <USB_Handler+0x59c>)
    1d60:	189b      	adds	r3, r3, r2
    1d62:	7e9a      	ldrb	r2, [r3, #26]
    1d64:	2002      	movs	r0, #2
    1d66:	4382      	bics	r2, r0
    1d68:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1d6a:	2380      	movs	r3, #128	; 0x80
    1d6c:	425b      	negs	r3, r3
    1d6e:	4642      	mov	r2, r8
    1d70:	4313      	orrs	r3, r2
    1d72:	4a46      	ldr	r2, [pc, #280]	; (1e8c <USB_Handler+0x598>)
    1d74:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1d76:	9b01      	ldr	r3, [sp, #4]
    1d78:	3308      	adds	r3, #8
    1d7a:	015b      	lsls	r3, r3, #5
    1d7c:	683a      	ldr	r2, [r7, #0]
    1d7e:	4694      	mov	ip, r2
    1d80:	4463      	add	r3, ip
    1d82:	79db      	ldrb	r3, [r3, #7]
    1d84:	079b      	lsls	r3, r3, #30
    1d86:	d525      	bpl.n	1dd4 <USB_Handler+0x4e0>
    1d88:	e079      	b.n	1e7e <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1d8a:	2308      	movs	r3, #8
    1d8c:	33ff      	adds	r3, #255	; 0xff
    1d8e:	5ceb      	ldrb	r3, [r5, r3]
    1d90:	075b      	lsls	r3, r3, #29
    1d92:	d51f      	bpl.n	1dd4 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    1d94:	2204      	movs	r2, #4
    1d96:	2308      	movs	r3, #8
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	015b      	lsls	r3, r3, #5
    1da0:	4a3b      	ldr	r2, [pc, #236]	; (1e90 <USB_Handler+0x59c>)
    1da2:	18d3      	adds	r3, r2, r3
    1da4:	3308      	adds	r3, #8
    1da6:	789b      	ldrb	r3, [r3, #2]
    1da8:	079b      	lsls	r3, r3, #30
    1daa:	d507      	bpl.n	1dbc <USB_Handler+0x4c8>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    1dac:	9b01      	ldr	r3, [sp, #4]
    1dae:	015a      	lsls	r2, r3, #5
    1db0:	4b37      	ldr	r3, [pc, #220]	; (1e90 <USB_Handler+0x59c>)
    1db2:	189b      	adds	r3, r3, r2
    1db4:	7a9a      	ldrb	r2, [r3, #10]
    1db6:	2002      	movs	r0, #2
    1db8:	4382      	bics	r2, r0
    1dba:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1dbc:	4b33      	ldr	r3, [pc, #204]	; (1e8c <USB_Handler+0x598>)
    1dbe:	4642      	mov	r2, r8
    1dc0:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1dc2:	9b01      	ldr	r3, [sp, #4]
    1dc4:	3308      	adds	r3, #8
    1dc6:	015b      	lsls	r3, r3, #5
    1dc8:	683a      	ldr	r2, [r7, #0]
    1dca:	4694      	mov	ip, r2
    1dcc:	4463      	add	r3, ip
    1dce:	79db      	ldrb	r3, [r3, #7]
    1dd0:	07db      	lsls	r3, r3, #31
    1dd2:	d454      	bmi.n	1e7e <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1dd4:	230c      	movs	r3, #12
    1dd6:	420b      	tst	r3, r1
    1dd8:	d051      	beq.n	1e7e <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    1dda:	9b01      	ldr	r3, [sp, #4]
    1ddc:	011b      	lsls	r3, r3, #4
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	33d4      	adds	r3, #212	; 0xd4
    1de2:	685b      	ldr	r3, [r3, #4]
    1de4:	1c38      	adds	r0, r7, #0
    1de6:	4929      	ldr	r1, [pc, #164]	; (1e8c <USB_Handler+0x598>)
    1de8:	4798      	blx	r3
    1dea:	e048      	b.n	1e7e <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1dec:	2503      	movs	r5, #3
    1dee:	4215      	tst	r5, r2
    1df0:	d040      	beq.n	1e74 <USB_Handler+0x580>
    1df2:	1c3d      	adds	r5, r7, #0
    1df4:	4647      	mov	r7, r8
    1df6:	4680      	mov	r8, r0
    1df8:	9b01      	ldr	r3, [sp, #4]
    1dfa:	015b      	lsls	r3, r3, #5
    1dfc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1dfe:	2308      	movs	r3, #8
    1e00:	33ff      	adds	r3, #255	; 0xff
    1e02:	5ceb      	ldrb	r3, [r5, r3]
    1e04:	079b      	lsls	r3, r3, #30
    1e06:	d512      	bpl.n	1e2e <USB_Handler+0x53a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    1e08:	2202      	movs	r2, #2
    1e0a:	2308      	movs	r3, #8
    1e0c:	33ff      	adds	r3, #255	; 0xff
    1e0e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1e10:	4a1e      	ldr	r2, [pc, #120]	; (1e8c <USB_Handler+0x598>)
    1e12:	3b88      	subs	r3, #136	; 0x88
    1e14:	3bff      	subs	r3, #255	; 0xff
    1e16:	4303      	orrs	r3, r0
    1e18:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    1e1a:	9b01      	ldr	r3, [sp, #4]
    1e1c:	015b      	lsls	r3, r3, #5
    1e1e:	481c      	ldr	r0, [pc, #112]	; (1e90 <USB_Handler+0x59c>)
    1e20:	18c3      	adds	r3, r0, r3
    1e22:	3310      	adds	r3, #16
    1e24:	685b      	ldr	r3, [r3, #4]
    1e26:	049b      	lsls	r3, r3, #18
    1e28:	0c9b      	lsrs	r3, r3, #18
    1e2a:	8053      	strh	r3, [r2, #2]
    1e2c:	e017      	b.n	1e5e <USB_Handler+0x56a>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1e2e:	2308      	movs	r3, #8
    1e30:	33ff      	adds	r3, #255	; 0xff
    1e32:	5ceb      	ldrb	r3, [r5, r3]
    1e34:	07db      	lsls	r3, r3, #31
    1e36:	d512      	bpl.n	1e5e <USB_Handler+0x56a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    1e38:	2201      	movs	r2, #1
    1e3a:	2308      	movs	r3, #8
    1e3c:	33ff      	adds	r3, #255	; 0xff
    1e3e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1e40:	4812      	ldr	r0, [pc, #72]	; (1e8c <USB_Handler+0x598>)
    1e42:	4643      	mov	r3, r8
    1e44:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    1e46:	9b01      	ldr	r3, [sp, #4]
    1e48:	015a      	lsls	r2, r3, #5
    1e4a:	4b11      	ldr	r3, [pc, #68]	; (1e90 <USB_Handler+0x59c>)
    1e4c:	189b      	adds	r3, r3, r2
    1e4e:	685a      	ldr	r2, [r3, #4]
    1e50:	0492      	lsls	r2, r2, #18
    1e52:	0c92      	lsrs	r2, r2, #18
    1e54:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    1e56:	685b      	ldr	r3, [r3, #4]
    1e58:	011b      	lsls	r3, r3, #4
    1e5a:	0c9b      	lsrs	r3, r3, #18
    1e5c:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1e5e:	078b      	lsls	r3, r1, #30
    1e60:	d00d      	beq.n	1e7e <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    1e62:	9b01      	ldr	r3, [sp, #4]
    1e64:	330d      	adds	r3, #13
    1e66:	011b      	lsls	r3, r3, #4
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	685b      	ldr	r3, [r3, #4]
    1e6c:	1c38      	adds	r0, r7, #0
    1e6e:	4907      	ldr	r1, [pc, #28]	; (1e8c <USB_Handler+0x598>)
    1e70:	4798      	blx	r3
    1e72:	e004      	b.n	1e7e <USB_Handler+0x58a>
    1e74:	3301      	adds	r3, #1
    1e76:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    1e78:	2b08      	cmp	r3, #8
    1e7a:	d000      	beq.n	1e7e <USB_Handler+0x58a>
    1e7c:	e6f0      	b.n	1c60 <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    1e7e:	b003      	add	sp, #12
    1e80:	bc3c      	pop	{r2, r3, r4, r5}
    1e82:	4690      	mov	r8, r2
    1e84:	4699      	mov	r9, r3
    1e86:	46a2      	mov	sl, r4
    1e88:	46ab      	mov	fp, r5
    1e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e8c:	20000044 	.word	0x20000044
    1e90:	20001f80 	.word	0x20001f80

00001e94 <rtc_match_callback>:
/* @brief function that gets called upon RTC driven wakeup
/* @params none
/* @returns none
/************************************************************************/
void rtc_match_callback(void)
{
    1e94:	b510      	push	{r4, lr}
	struct rtc_calendar_time stCurrent_time;
	/* Errata 13901 fix */
	SUPC->VREF.reg &= ~(1 << 8);
    1e96:	4b15      	ldr	r3, [pc, #84]	; (1eec <rtc_match_callback+0x58>)
    1e98:	69d9      	ldr	r1, [r3, #28]
    1e9a:	4a15      	ldr	r2, [pc, #84]	; (1ef0 <rtc_match_callback+0x5c>)
    1e9c:	400a      	ands	r2, r1
    1e9e:	61da      	str	r2, [r3, #28]
	SUPC->VREG.bit.SEL = 1;
    1ea0:	699a      	ldr	r2, [r3, #24]
    1ea2:	210c      	movs	r1, #12
    1ea4:	438a      	bics	r2, r1
    1ea6:	3908      	subs	r1, #8
    1ea8:	430a      	orrs	r2, r1
    1eaa:	619a      	str	r2, [r3, #24]
	/* Errata 14539 fix */
	GCLK->GENCTRL->bit.SRC = SYSTEM_CLOCK_SOURCE_OSC16M;
    1eac:	4911      	ldr	r1, [pc, #68]	; (1ef4 <rtc_match_callback+0x60>)
    1eae:	680b      	ldr	r3, [r1, #0]
    1eb0:	220f      	movs	r2, #15
    1eb2:	4393      	bics	r3, r2
    1eb4:	3a09      	subs	r2, #9
    1eb6:	4313      	orrs	r3, r2
    1eb8:	600b      	str	r3, [r1, #0]
	
	ADT7420_read_temp();
    1eba:	4b0f      	ldr	r3, [pc, #60]	; (1ef8 <rtc_match_callback+0x64>)
    1ebc:	4798      	blx	r3
	
	// Set a new alarm for the interval depending on what mode we are in
	// This method is according to the Atmel App note AT03266
	if(ucActiveInactive_Mode == INACTIVE_MODE){
    1ebe:	4b0f      	ldr	r3, [pc, #60]	; (1efc <rtc_match_callback+0x68>)
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	2b01      	cmp	r3, #1
    1ec4:	d108      	bne.n	1ed8 <rtc_match_callback+0x44>
		// Inactive mode
		alarm.time.hour += 2;
		alarm.time.hour %= 24;
    1ec6:	4c0e      	ldr	r4, [pc, #56]	; (1f00 <rtc_match_callback+0x6c>)
	
	// Set a new alarm for the interval depending on what mode we are in
	// This method is according to the Atmel App note AT03266
	if(ucActiveInactive_Mode == INACTIVE_MODE){
		// Inactive mode
		alarm.time.hour += 2;
    1ec8:	78a0      	ldrb	r0, [r4, #2]
    1eca:	3002      	adds	r0, #2
		alarm.time.hour %= 24;
    1ecc:	b2c0      	uxtb	r0, r0
    1ece:	2118      	movs	r1, #24
    1ed0:	4b0c      	ldr	r3, [pc, #48]	; (1f04 <rtc_match_callback+0x70>)
    1ed2:	4798      	blx	r3
    1ed4:	70a1      	strb	r1, [r4, #2]
    1ed6:	e007      	b.n	1ee8 <rtc_match_callback+0x54>
	}else{
		// Active mode
		alarm.time.minute += 20;
		alarm.time.minute %= 60;
    1ed8:	4c09      	ldr	r4, [pc, #36]	; (1f00 <rtc_match_callback+0x6c>)
		// Inactive mode
		alarm.time.hour += 2;
		alarm.time.hour %= 24;
	}else{
		// Active mode
		alarm.time.minute += 20;
    1eda:	7860      	ldrb	r0, [r4, #1]
    1edc:	3014      	adds	r0, #20
		alarm.time.minute %= 60;
    1ede:	b2c0      	uxtb	r0, r0
    1ee0:	213c      	movs	r1, #60	; 0x3c
    1ee2:	4b08      	ldr	r3, [pc, #32]	; (1f04 <rtc_match_callback+0x70>)
    1ee4:	4798      	blx	r3
    1ee6:	7061      	strb	r1, [r4, #1]
	}
}
    1ee8:	bd10      	pop	{r4, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	40001400 	.word	0x40001400
    1ef0:	fffffeff 	.word	0xfffffeff
    1ef4:	40001820 	.word	0x40001820
    1ef8:	000001ad 	.word	0x000001ad
    1efc:	20001e9d 	.word	0x20001e9d
    1f00:	20001458 	.word	0x20001458
    1f04:	00004729 	.word	0x00004729

00001f08 <sleep>:
/* This function is necessary to fix the errata for the part upon wakeup and sleep every time
/* @params none
/* @returns none
/************************************************************************/
void sleep(void)
{
    1f08:	b510      	push	{r4, lr}
	/* Errata 13901 fix */
	SUPC->VREF.reg |= (1 << 8);
    1f0a:	4b0d      	ldr	r3, [pc, #52]	; (1f40 <sleep+0x38>)
    1f0c:	69da      	ldr	r2, [r3, #28]
    1f0e:	2180      	movs	r1, #128	; 0x80
    1f10:	0049      	lsls	r1, r1, #1
    1f12:	430a      	orrs	r2, r1
    1f14:	61da      	str	r2, [r3, #28]
	SUPC->VREG.bit.SEL = 0;
    1f16:	699a      	ldr	r2, [r3, #24]
    1f18:	39f4      	subs	r1, #244	; 0xf4
    1f1a:	438a      	bics	r2, r1
    1f1c:	619a      	str	r2, [r3, #24]
	/* Errata 14539 fix */
	GCLK->GENCTRL->bit.SRC = SYSTEM_CLOCK_SOURCE_ULP32K;
    1f1e:	4909      	ldr	r1, [pc, #36]	; (1f44 <sleep+0x3c>)
    1f20:	680b      	ldr	r3, [r1, #0]
    1f22:	220f      	movs	r2, #15
    1f24:	4393      	bics	r3, r2
    1f26:	3a0c      	subs	r2, #12
    1f28:	4313      	orrs	r3, r2
    1f2a:	600b      	str	r3, [r1, #0]
	// Make sure the DFLL and DPLL are shut off before entering sleep mode again
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_DFLL);
    1f2c:	2007      	movs	r0, #7
    1f2e:	4c06      	ldr	r4, [pc, #24]	; (1f48 <sleep+0x40>)
    1f30:	47a0      	blx	r4
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_DPLL);
    1f32:	2008      	movs	r0, #8
    1f34:	47a0      	blx	r4
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1f36:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    1f3a:	bf30      	wfi
	// Put the part in sleep mode
	system_sleep();
}
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	40001400 	.word	0x40001400
    1f44:	40001820 	.word	0x40001820
    1f48:	00003f29 	.word	0x00003f29

00001f4c <configure_sleepmode>:
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
	PM->SLEEPCFG.reg = sleep_mode;
    1f4c:	2204      	movs	r2, #4
    1f4e:	2380      	movs	r3, #128	; 0x80
    1f50:	05db      	lsls	r3, r3, #23
    1f52:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    1f54:	1c1a      	adds	r2, r3, #0
    1f56:	7853      	ldrb	r3, [r2, #1]
    1f58:	2b04      	cmp	r3, #4
    1f5a:	d1fc      	bne.n	1f56 <configure_sleepmode+0xa>
	 * devices can show higher consumption than expected.
	*/
	stby_config.power_domain = SYSTEM_POWER_DOMAIN_PD01;
	
	// Force buck mode on the internal regulator
	SUPC->VREG.bit.SEL = 1;
    1f5c:	4b0e      	ldr	r3, [pc, #56]	; (1f98 <configure_sleepmode+0x4c>)
    1f5e:	699a      	ldr	r2, [r3, #24]
    1f60:	210c      	movs	r1, #12
    1f62:	438a      	bics	r2, r1
    1f64:	3908      	subs	r1, #8
    1f66:	430a      	orrs	r2, r1
    1f68:	619a      	str	r2, [r3, #24]
	SUPC->VREG.bit.RUNSTDBY = 1;
    1f6a:	6999      	ldr	r1, [r3, #24]
    1f6c:	2240      	movs	r2, #64	; 0x40
    1f6e:	430a      	orrs	r2, r1
    1f70:	619a      	str	r2, [r3, #24]
	SUPC->VREF.bit.ONDEMAND = 1;
    1f72:	69d9      	ldr	r1, [r3, #28]
    1f74:	2280      	movs	r2, #128	; 0x80
    1f76:	430a      	orrs	r2, r1
    1f78:	61da      	str	r2, [r3, #28]
static inline void system_standby_set_config(
		struct system_standby_config *const config)
{
	Assert(config);
#if SAML21
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    1f7a:	2132      	movs	r1, #50	; 0x32
    1f7c:	2280      	movs	r2, #128	; 0x80
    1f7e:	05d2      	lsls	r2, r2, #23
    1f80:	8111      	strh	r1, [r2, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1f82:	4806      	ldr	r0, [pc, #24]	; (1f9c <configure_sleepmode+0x50>)
    1f84:	6842      	ldr	r2, [r0, #4]
    1f86:	3914      	subs	r1, #20
    1f88:	438a      	bics	r2, r1
    1f8a:	391c      	subs	r1, #28
    1f8c:	430a      	orrs	r2, r1
    1f8e:	6042      	str	r2, [r0, #4]
	system_standby_set_config(&stby_config);

	system_flash_set_waitstates(1);
	
	/* BOD33 disabled */
	SUPC->BOD33.reg &= ~SUPC_BOD33_ENABLE;
    1f90:	691a      	ldr	r2, [r3, #16]
    1f92:	438a      	bics	r2, r1
    1f94:	611a      	str	r2, [r3, #16]
}
    1f96:	4770      	bx	lr
    1f98:	40001400 	.word	0x40001400
    1f9c:	41004000 	.word	0x41004000

00001fa0 <configure_rtc>:
/* @brief function to configure the SAM L21 RTC
/* @params none
/* @returns none
/************************************************************************/
void configure_rtc(void)
{
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa2:	465f      	mov	r7, fp
    1fa4:	4656      	mov	r6, sl
    1fa6:	464d      	mov	r5, r9
    1fa8:	4644      	mov	r4, r8
    1faa:	b4f0      	push	{r4, r5, r6, r7}
    1fac:	b087      	sub	sp, #28
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1fae:	ac02      	add	r4, sp, #8
    1fb0:	23b0      	movs	r3, #176	; 0xb0
    1fb2:	011b      	lsls	r3, r3, #4
    1fb4:	8023      	strh	r3, [r4, #0]
	config->clear_on_match      = false;
    1fb6:	2600      	movs	r6, #0
    1fb8:	70a6      	strb	r6, [r4, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    1fba:	23fa      	movs	r3, #250	; 0xfa
    1fbc:	00db      	lsls	r3, r3, #3
    1fbe:	80a3      	strh	r3, [r4, #4]
	uint8_t ucIndex;
    /* Initialize RTC in calendar mode. */
    struct rtc_calendar_config config_rtc_calendar;
    rtc_calendar_get_config_defaults(&config_rtc_calendar);
	// Alarm time for first time based interrupt
    alarm.time.year = 2015;
    1fc0:	4920      	ldr	r1, [pc, #128]	; (2044 <STACK_SIZE+0x44>)
    1fc2:	4b21      	ldr	r3, [pc, #132]	; (2048 <STACK_SIZE+0x48>)
    1fc4:	469b      	mov	fp, r3
    1fc6:	80cb      	strh	r3, [r1, #6]
    alarm.time.month = 11;
    1fc8:	230b      	movs	r3, #11
    1fca:	469a      	mov	sl, r3
    1fcc:	714b      	strb	r3, [r1, #5]
    alarm.time.day = 2;
    1fce:	2302      	movs	r3, #2
    1fd0:	4699      	mov	r9, r3
    1fd2:	710b      	strb	r3, [r1, #4]
    alarm.time.hour = 19;
    1fd4:	2313      	movs	r3, #19
    1fd6:	4698      	mov	r8, r3
    1fd8:	708b      	strb	r3, [r1, #2]
    alarm.time.minute = 31;
    1fda:	271f      	movs	r7, #31
    1fdc:	704f      	strb	r7, [r1, #1]
    alarm.time.second = 00;
    1fde:	700e      	strb	r6, [r1, #0]
	// Configure 24 hour clock mode, set the alarm, and use a grainularity of seconds
    config_rtc_calendar.clock_24h = true;
    1fe0:	2501      	movs	r5, #1
    1fe2:	70e5      	strb	r5, [r4, #3]
    config_rtc_calendar.alarm[0].time = alarm.time;
    1fe4:	200e      	movs	r0, #14
    1fe6:	4468      	add	r0, sp
    1fe8:	2208      	movs	r2, #8
    1fea:	4b18      	ldr	r3, [pc, #96]	; (204c <STACK_SIZE+0x4c>)
    1fec:	4798      	blx	r3
    config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    1fee:	73a5      	strb	r5, [r4, #14]
    rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    1ff0:	4d17      	ldr	r5, [pc, #92]	; (2050 <STACK_SIZE+0x50>)
    1ff2:	1c28      	adds	r0, r5, #0
    1ff4:	4917      	ldr	r1, [pc, #92]	; (2054 <STACK_SIZE+0x54>)
    1ff6:	1c22      	adds	r2, r4, #0
    1ff8:	4b17      	ldr	r3, [pc, #92]	; (2058 <STACK_SIZE+0x58>)
    1ffa:	4798      	blx	r3
    rtc_calendar_enable(&rtc_instance);
    1ffc:	1c28      	adds	r0, r5, #0
    1ffe:	4b17      	ldr	r3, [pc, #92]	; (205c <STACK_SIZE+0x5c>)
    2000:	4798      	blx	r3
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    2002:	466b      	mov	r3, sp
    2004:	701e      	strb	r6, [r3, #0]
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    2006:	70de      	strb	r6, [r3, #3]
    /* Set current time. */
    struct rtc_calendar_time time;
    rtc_calendar_get_time_defaults(&time);
    time.year = 2015;
    2008:	465a      	mov	r2, fp
    200a:	80da      	strh	r2, [r3, #6]
    time.month = 11;
    200c:	4652      	mov	r2, sl
    200e:	715a      	strb	r2, [r3, #5]
    time.day = 2;
    2010:	464a      	mov	r2, r9
    2012:	711a      	strb	r2, [r3, #4]
    time.hour = 19;
    2014:	4642      	mov	r2, r8
    2016:	709a      	strb	r2, [r3, #2]
    time.minute = 31;
    2018:	705f      	strb	r7, [r3, #1]
    time.second = 00;
    rtc_calendar_set_time(&rtc_instance, &time);
    201a:	1c28      	adds	r0, r5, #0
    201c:	4669      	mov	r1, sp
    201e:	4b10      	ldr	r3, [pc, #64]	; (2060 <STACK_SIZE+0x60>)
    2020:	4798      	blx	r3
    events.generate_event_on_alarm[0] = true;
    for(ucIndex = 1; ucIndex < RTC_NUM_OF_ALARMS; ucIndex++){
        events.generate_event_on_alarm[ucIndex] = false;
    }
	// Register the callback function
    rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    2022:	1c28      	adds	r0, r5, #0
    2024:	490f      	ldr	r1, [pc, #60]	; (2064 <STACK_SIZE+0x64>)
    2026:	2208      	movs	r2, #8
    2028:	4b0f      	ldr	r3, [pc, #60]	; (2068 <STACK_SIZE+0x68>)
    202a:	4798      	blx	r3
    rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    202c:	1c28      	adds	r0, r5, #0
    202e:	2108      	movs	r1, #8
    2030:	4b0e      	ldr	r3, [pc, #56]	; (206c <STACK_SIZE+0x6c>)
    2032:	4798      	blx	r3
}
    2034:	b007      	add	sp, #28
    2036:	bc3c      	pop	{r2, r3, r4, r5}
    2038:	4690      	mov	r8, r2
    203a:	4699      	mov	r9, r3
    203c:	46a2      	mov	sl, r4
    203e:	46ab      	mov	fp, r5
    2040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	20001458 	.word	0x20001458
    2048:	000007df 	.word	0x000007df
    204c:	00004a01 	.word	0x00004a01
    2050:	20000088 	.word	0x20000088
    2054:	40002000 	.word	0x40002000
    2058:	000011c9 	.word	0x000011c9
    205c:	00001051 	.word	0x00001051
    2060:	00001151 	.word	0x00001151
    2064:	00001e95 	.word	0x00001e95
    2068:	00001235 	.word	0x00001235
    206c:	00001255 	.word	0x00001255

00002070 <configure_i2c>:
/* @brief I2C configuration function for SAM L21
/* @params none
/* @returns none
/************************************************************************/
void configure_i2c(void)
{	
    2070:	b510      	push	{r4, lr}
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2072:	4a1e      	ldr	r2, [pc, #120]	; (20ec <configure_i2c+0x7c>)
    2074:	2364      	movs	r3, #100	; 0x64
    2076:	6013      	str	r3, [r2, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2078:	4b1d      	ldr	r3, [pc, #116]	; (20f0 <configure_i2c+0x80>)
    207a:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    207c:	2300      	movs	r3, #0
    207e:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2080:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2082:	2180      	movs	r1, #128	; 0x80
    2084:	0389      	lsls	r1, r1, #14
    2086:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    2088:	2101      	movs	r1, #1
    208a:	4249      	negs	r1, r1
    208c:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    208e:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2090:	3125      	adds	r1, #37	; 0x25
    2092:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2094:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2096:	3108      	adds	r1, #8
    2098:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    209a:	3101      	adds	r1, #1
    209c:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    209e:	3101      	adds	r1, #1
    20a0:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    20a2:	33d7      	adds	r3, #215	; 0xd7
    20a4:	8613      	strh	r3, [r2, #48]	; 0x30
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
	config_i2c_master.run_in_standby = true;
    20a6:	3bd6      	subs	r3, #214	; 0xd6
    20a8:	7613      	strb	r3, [r2, #24]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
	config_i2c_master.pinmux_pad0 =  PINMUX_PA22C_SERCOM3_PAD0;
    20aa:	4b12      	ldr	r3, [pc, #72]	; (20f4 <configure_i2c+0x84>)
    20ac:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 =  PINMUX_PA23C_SERCOM3_PAD1;
    20ae:	4b12      	ldr	r3, [pc, #72]	; (20f8 <configure_i2c+0x88>)
    20b0:	6213      	str	r3, [r2, #32]
	
	/* Initialize and enable device with config */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    20b2:	4c12      	ldr	r4, [pc, #72]	; (20fc <configure_i2c+0x8c>)
    20b4:	1c20      	adds	r0, r4, #0
    20b6:	4912      	ldr	r1, [pc, #72]	; (2100 <configure_i2c+0x90>)
    20b8:	4b12      	ldr	r3, [pc, #72]	; (2104 <configure_i2c+0x94>)
    20ba:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    20bc:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    20be:	2107      	movs	r1, #7
    20c0:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    20c2:	4219      	tst	r1, r3
    20c4:	d1fc      	bne.n	20c0 <configure_i2c+0x50>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    20c6:	6811      	ldr	r1, [r2, #0]
    20c8:	2302      	movs	r3, #2
    20ca:	430b      	orrs	r3, r1
    20cc:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20ce:	4b0b      	ldr	r3, [pc, #44]	; (20fc <configure_i2c+0x8c>)
    20d0:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    20d2:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    20d4:	2010      	movs	r0, #16
    20d6:	e005      	b.n	20e4 <configure_i2c+0x74>
		timeout_counter++;
    20d8:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20da:	42a3      	cmp	r3, r4
    20dc:	d302      	bcc.n	20e4 <configure_i2c+0x74>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    20de:	2310      	movs	r3, #16
    20e0:	8353      	strh	r3, [r2, #26]
    20e2:	e002      	b.n	20ea <configure_i2c+0x7a>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    20e4:	8b51      	ldrh	r1, [r2, #26]
    20e6:	4201      	tst	r1, r0
    20e8:	d0f6      	beq.n	20d8 <configure_i2c+0x68>
	i2c_master_enable(&i2c_master_instance);
	
}
    20ea:	bd10      	pop	{r4, pc}
    20ec:	20001cc4 	.word	0x20001cc4
    20f0:	00000d48 	.word	0x00000d48
    20f4:	00160002 	.word	0x00160002
    20f8:	00170002 	.word	0x00170002
    20fc:	20001cb4 	.word	0x20001cb4
    2100:	42000c00 	.word	0x42000c00
    2104:	0000134d 	.word	0x0000134d

00002108 <configure_mag_sw_int>:
/* @brief magnetic switch interrupt configuration
/* @params [in] callback, pointer to function that gets called when the magnetic switch is triggered
/* @returns none
/************************************************************************/
void configure_mag_sw_int(void (*callback)(void))
{
    2108:	b530      	push	{r4, r5, lr}
    210a:	b083      	sub	sp, #12
    210c:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    210e:	a901      	add	r1, sp, #4
    2110:	2500      	movs	r5, #0
    2112:	704d      	strb	r5, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2114:	70cd      	strb	r5, [r1, #3]

	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = PINMUX_PA17A_EIC_EXTINT1;
    2116:	700d      	strb	r5, [r1, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2118:	708d      	strb	r5, [r1, #2]
	
	system_pinmux_pin_set_config(PIN_PA17, &config_pinmux);
    211a:	2011      	movs	r0, #17
    211c:	4b1f      	ldr	r3, [pc, #124]	; (219c <configure_mag_sw_int+0x94>)
    211e:	4798      	blx	r3
	uint32_t pin_index = (gpio_pin % 32);

	if (mode == SYSTEM_PINMUX_PIN_SAMPLE_ONDEMAND) {
		port->CTRL.reg |= (1 << pin_index);
	} else {
		port->CTRL.reg &= ~(1 << pin_index);
    2120:	4a1f      	ldr	r2, [pc, #124]	; (21a0 <configure_mag_sw_int+0x98>)
    2122:	6a51      	ldr	r1, [r2, #36]	; 0x24
    2124:	4b1f      	ldr	r3, [pc, #124]	; (21a4 <configure_mag_sw_int+0x9c>)
    2126:	400b      	ands	r3, r1
    2128:	6253      	str	r3, [r2, #36]	; 0x24
	system_pinmux_pin_set_input_sample_mode(PIN_PA17, SYSTEM_PINMUX_PIN_SAMPLE_CONTINUOUS);
	
	// Disable the EIC so we can write regs
	REG_EIC_CTRLA = 0;
    212a:	4b1f      	ldr	r3, [pc, #124]	; (21a8 <configure_mag_sw_int+0xa0>)
    212c:	701d      	strb	r5, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
    212e:	491f      	ldr	r1, [pc, #124]	; (21ac <configure_mag_sw_int+0xa4>)
    2130:	2202      	movs	r2, #2
    2132:	680b      	ldr	r3, [r1, #0]
    2134:	421a      	tst	r2, r3
    2136:	d1fc      	bne.n	2132 <configure_mag_sw_int+0x2a>
	
	// Enable interrupts on EXTINT[1]
	REG_EIC_INTENSET |= 0x02;
    2138:	4b1d      	ldr	r3, [pc, #116]	; (21b0 <configure_mag_sw_int+0xa8>)
    213a:	681a      	ldr	r2, [r3, #0]
    213c:	2102      	movs	r1, #2
    213e:	430a      	orrs	r2, r1
    2140:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_INTENSET & 0x02)) return;
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	4219      	tst	r1, r3
    2146:	d027      	beq.n	2198 <configure_mag_sw_int+0x90>
	
	// Turn filtering off and set detection for falling edge for EXTINT[1]
	REG_EIC_CONFIG0 &= ~0x80;
    2148:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <configure_mag_sw_int+0xac>)
    214a:	681a      	ldr	r2, [r3, #0]
    214c:	317e      	adds	r1, #126	; 0x7e
    214e:	438a      	bics	r2, r1
    2150:	601a      	str	r2, [r3, #0]
	REG_EIC_CONFIG0 |= 0x20;
    2152:	681a      	ldr	r2, [r3, #0]
    2154:	3960      	subs	r1, #96	; 0x60
    2156:	430a      	orrs	r2, r1
    2158:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_CONFIG0 & 0x20) && (REG_EIC_CONFIG0 & 0x80)) return;
    215a:	681b      	ldr	r3, [r3, #0]
    215c:	4219      	tst	r1, r3
    215e:	d103      	bne.n	2168 <configure_mag_sw_int+0x60>
    2160:	4b14      	ldr	r3, [pc, #80]	; (21b4 <configure_mag_sw_int+0xac>)
    2162:	681b      	ldr	r3, [r3, #0]
    2164:	061b      	lsls	r3, r3, #24
    2166:	d417      	bmi.n	2198 <configure_mag_sw_int+0x90>
	
	// Enable asynchronous interrupts for EXTINT[1]
	REG_EIC_ASYNCH |= 0x00000002;
    2168:	4b13      	ldr	r3, [pc, #76]	; (21b8 <configure_mag_sw_int+0xb0>)
    216a:	681a      	ldr	r2, [r3, #0]
    216c:	2102      	movs	r1, #2
    216e:	430a      	orrs	r2, r1
    2170:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_ASYNCH & 0x02)) return;
    2172:	681b      	ldr	r3, [r3, #0]
    2174:	4219      	tst	r1, r3
    2176:	d00f      	beq.n	2198 <configure_mag_sw_int+0x90>
	
	// Enable the EIC
	REG_EIC_CTRLA = 0x02;
    2178:	2202      	movs	r2, #2
    217a:	4b0b      	ldr	r3, [pc, #44]	; (21a8 <configure_mag_sw_int+0xa0>)
    217c:	701a      	strb	r2, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
    217e:	490b      	ldr	r1, [pc, #44]	; (21ac <configure_mag_sw_int+0xa4>)
    2180:	680b      	ldr	r3, [r1, #0]
    2182:	421a      	tst	r2, r3
    2184:	d1fc      	bne.n	2180 <configure_mag_sw_int+0x78>
	if(!(REG_EIC_CTRLA & 0x02)) return;
    2186:	4b08      	ldr	r3, [pc, #32]	; (21a8 <configure_mag_sw_int+0xa0>)
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	079b      	lsls	r3, r3, #30
    218c:	d504      	bpl.n	2198 <configure_mag_sw_int+0x90>
	
	// Register the callback
	if(!(extint_register_callback(callback, 1, EXTINT_CALLBACK_TYPE_DETECT) == STATUS_OK)) return;
    218e:	1c20      	adds	r0, r4, #0
    2190:	2101      	movs	r1, #1
    2192:	2200      	movs	r2, #0
    2194:	4b09      	ldr	r3, [pc, #36]	; (21bc <configure_mag_sw_int+0xb4>)
    2196:	4798      	blx	r3

}
    2198:	b003      	add	sp, #12
    219a:	bd30      	pop	{r4, r5, pc}
    219c:	00004405 	.word	0x00004405
    21a0:	40002800 	.word	0x40002800
    21a4:	fffdffff 	.word	0xfffdffff
    21a8:	40002400 	.word	0x40002400
    21ac:	40002404 	.word	0x40002404
    21b0:	40002410 	.word	0x40002410
    21b4:	4000241c 	.word	0x4000241c
    21b8:	40002418 	.word	0x40002418
    21bc:	00003b71 	.word	0x00003b71

000021c0 <configure_databuffers>:
/* @returns none
/************************************************************************/
void configure_databuffers(void)
{
	// Configure the buffers and their pointers
	ucTemperatureArrayPtr = 0;
    21c0:	2300      	movs	r3, #0
    21c2:	4a0f      	ldr	r2, [pc, #60]	; (2200 <configure_databuffers+0x40>)
    21c4:	7013      	strb	r3, [r2, #0]
	uiAccelerometerMatrixPtr = 0;
    21c6:	2100      	movs	r1, #0
    21c8:	4a0e      	ldr	r2, [pc, #56]	; (2204 <configure_databuffers+0x44>)
    21ca:	8013      	strh	r3, [r2, #0]
	ucTemperatureDataSets = 0;
    21cc:	4a0e      	ldr	r2, [pc, #56]	; (2208 <configure_databuffers+0x48>)
    21ce:	7011      	strb	r1, [r2, #0]
	uiAccelerometerDataSets = 0;
    21d0:	4a0e      	ldr	r2, [pc, #56]	; (220c <configure_databuffers+0x4c>)
    21d2:	8013      	strh	r3, [r2, #0]
	// Set the first element of the data set pointer vector to be 0 (the 0th element is where the first data set starts)
	cTemperatureDataSetPtr[ucTemperatureDataSets] = ucTemperatureArrayPtr;
    21d4:	4a0e      	ldr	r2, [pc, #56]	; (2210 <configure_databuffers+0x50>)
    21d6:	7011      	strb	r1, [r2, #0]
	iAccelerometerDataSetPtr[uiAccelerometerDataSets] = ucAccelerometerMatrix;
    21d8:	490e      	ldr	r1, [pc, #56]	; (2214 <configure_databuffers+0x54>)
    21da:	4b0f      	ldr	r3, [pc, #60]	; (2218 <configure_databuffers+0x58>)
    21dc:	8019      	strh	r1, [r3, #0]
    21de:	1c53      	adds	r3, r2, #1
    21e0:	3248      	adds	r2, #72	; 0x48
	// Set all the rest of the elements of the data set pointer vectors to be -1 (-1 represents unused)
	for(int i = 1; i < TEMP_BUFFER_SIZE; i++){
		cTemperatureDataSetPtr[i] = -1;
    21e2:	21ff      	movs	r1, #255	; 0xff
    21e4:	7019      	strb	r1, [r3, #0]
    21e6:	3301      	adds	r3, #1
	uiAccelerometerDataSets = 0;
	// Set the first element of the data set pointer vector to be 0 (the 0th element is where the first data set starts)
	cTemperatureDataSetPtr[ucTemperatureDataSets] = ucTemperatureArrayPtr;
	iAccelerometerDataSetPtr[uiAccelerometerDataSets] = ucAccelerometerMatrix;
	// Set all the rest of the elements of the data set pointer vectors to be -1 (-1 represents unused)
	for(int i = 1; i < TEMP_BUFFER_SIZE; i++){
    21e8:	4293      	cmp	r3, r2
    21ea:	d1fb      	bne.n	21e4 <configure_databuffers+0x24>
    21ec:	4b0b      	ldr	r3, [pc, #44]	; (221c <configure_databuffers+0x5c>)
    21ee:	4a0c      	ldr	r2, [pc, #48]	; (2220 <configure_databuffers+0x60>)
    21f0:	1899      	adds	r1, r3, r2
		cTemperatureDataSetPtr[i] = -1;
	}
	for(int i = 1; i < ACCEL_BUFFER_SIZE; i++){
		iAccelerometerDataSetPtr[i] = -1;
    21f2:	2201      	movs	r2, #1
    21f4:	4252      	negs	r2, r2
    21f6:	801a      	strh	r2, [r3, #0]
    21f8:	3302      	adds	r3, #2
	iAccelerometerDataSetPtr[uiAccelerometerDataSets] = ucAccelerometerMatrix;
	// Set all the rest of the elements of the data set pointer vectors to be -1 (-1 represents unused)
	for(int i = 1; i < TEMP_BUFFER_SIZE; i++){
		cTemperatureDataSetPtr[i] = -1;
	}
	for(int i = 1; i < ACCEL_BUFFER_SIZE; i++){
    21fa:	428b      	cmp	r3, r1
    21fc:	d1fb      	bne.n	21f6 <configure_databuffers+0x36>
		iAccelerometerDataSetPtr[i] = -1;
	}
}
    21fe:	4770      	bx	lr
    2200:	20001c33 	.word	0x20001c33
    2204:	20001454 	.word	0x20001454
    2208:	200000bc 	.word	0x200000bc
    220c:	20001cc0 	.word	0x20001cc0
    2210:	20001e54 	.word	0x20001e54
    2214:	200000d0 	.word	0x200000d0
    2218:	20001464 	.word	0x20001464
    221c:	20001466 	.word	0x20001466
    2220:	000007cc 	.word	0x000007cc

00002224 <get_timestamp>:
/* @brief get_timestamp get the system timestamp in seconds since 2000
/* @params ucTimestampVector vector that will contain the timestamp
/* @returns none
/************************************************************************/
void get_timestamp(uint8_t * ucTimestampVector)
{
    2224:	b530      	push	{r4, r5, lr}
    2226:	b083      	sub	sp, #12
    2228:	1c04      	adds	r4, r0, #0
	uint32_t ulRegVal;
	struct rtc_calendar_time stCurrentTime;
	rtc_calendar_get_time(&rtc_instance, &stCurrentTime);
    222a:	4d09      	ldr	r5, [pc, #36]	; (2250 <get_timestamp+0x2c>)
    222c:	1c28      	adds	r0, r5, #0
    222e:	4669      	mov	r1, sp
    2230:	4b08      	ldr	r3, [pc, #32]	; (2254 <get_timestamp+0x30>)
    2232:	4798      	blx	r3
	ulRegVal = rtc_calendar_time_to_register_value(&rtc_instance, &stCurrentTime);
    2234:	1c28      	adds	r0, r5, #0
    2236:	4669      	mov	r1, sp
    2238:	4b07      	ldr	r3, [pc, #28]	; (2258 <get_timestamp+0x34>)
    223a:	4798      	blx	r3
	
	*(ucTimestampVector + 3) = ulRegVal >> 0  & 0xFF;
    223c:	70e0      	strb	r0, [r4, #3]
	*(ucTimestampVector + 2) = ulRegVal >> 8  & 0xFF;
    223e:	0a03      	lsrs	r3, r0, #8
    2240:	70a3      	strb	r3, [r4, #2]
	*(ucTimestampVector + 1) = ulRegVal >> 16 & 0xFF;
    2242:	0c03      	lsrs	r3, r0, #16
    2244:	7063      	strb	r3, [r4, #1]
	*(ucTimestampVector + 0) = ulRegVal >> 24 & 0xFF;
    2246:	0e00      	lsrs	r0, r0, #24
    2248:	7020      	strb	r0, [r4, #0]
	
}
    224a:	b003      	add	sp, #12
    224c:	bd30      	pop	{r4, r5, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	20000088 	.word	0x20000088
    2254:	00001171 	.word	0x00001171
    2258:	000010d5 	.word	0x000010d5

0000225c <offload_data>:
/* data to off-chip memory
/* @params none
/* @returns none
/************************************************************************/
void offload_data(void)
{	
    225c:	b5f0      	push	{r4, r5, r6, r7, lr}
    225e:	465f      	mov	r7, fp
    2260:	4656      	mov	r6, sl
    2262:	464d      	mov	r5, r9
    2264:	4644      	mov	r4, r8
    2266:	b4f0      	push	{r4, r5, r6, r7}
    2268:	b085      	sub	sp, #20
    226a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    226c:	4ba8      	ldr	r3, [pc, #672]	; (2510 <offload_data+0x2b4>)
    226e:	4798      	blx	r3
	uint8_t ucHeaderSize = 2 + 4*(ucTemperatureDataSets + uiAccelerometerDataSets);
    2270:	4ba8      	ldr	r3, [pc, #672]	; (2514 <offload_data+0x2b8>)
    2272:	781b      	ldrb	r3, [r3, #0]
    2274:	4698      	mov	r8, r3
    2276:	4ba8      	ldr	r3, [pc, #672]	; (2518 <offload_data+0x2bc>)
    2278:	8818      	ldrh	r0, [r3, #0]
    227a:	4643      	mov	r3, r8
    227c:	181d      	adds	r5, r3, r0
    227e:	00ad      	lsls	r5, r5, #2
    2280:	3502      	adds	r5, #2
    2282:	b2eb      	uxtb	r3, r5
    2284:	469c      	mov	ip, r3
	uint8_t header[ucHeaderSize];
    2286:	3307      	adds	r3, #7
    2288:	08db      	lsrs	r3, r3, #3
    228a:	00db      	lsls	r3, r3, #3
    228c:	466a      	mov	r2, sp
    228e:	1ad3      	subs	r3, r2, r3
    2290:	469d      	mov	sp, r3
    2292:	466c      	mov	r4, sp
	uint8_t ucHeaderIndex = 0, ucDataIndex = 0;
	header[ucHeaderIndex++] = ucHeaderSize;
    2294:	4663      	mov	r3, ip
    2296:	7023      	strb	r3, [r4, #0]
	header[ucHeaderIndex++] = ucTemperatureDataSets + uiAccelerometerDataSets;
    2298:	4643      	mov	r3, r8
    229a:	181b      	adds	r3, r3, r0
    229c:	7063      	strb	r3, [r4, #1]
	// Using these for loops is a bit overkill, but it shows more clearly that the upper nibble and lower nibble are
	//		separate fields.
	// Fill in the descriptors the temperature data sets
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex+=2){
    229e:	4643      	mov	r3, r8
    22a0:	1e5d      	subs	r5, r3, #1
    22a2:	2d00      	cmp	r5, #0
    22a4:	dd0b      	ble.n	22be <offload_data+0x62>
    22a6:	2200      	movs	r2, #0
    22a8:	2102      	movs	r1, #2
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(TEMPERATURE_DESCRIPTOR << 4);
    22aa:	2600      	movs	r6, #0
    22ac:	1c4b      	adds	r3, r1, #1
    22ae:	b2db      	uxtb	r3, r3
    22b0:	5466      	strb	r6, [r4, r1]
	header[ucHeaderIndex++] = ucHeaderSize;
	header[ucHeaderIndex++] = ucTemperatureDataSets + uiAccelerometerDataSets;
	// Using these for loops is a bit overkill, but it shows more clearly that the upper nibble and lower nibble are
	//		separate fields.
	// Fill in the descriptors the temperature data sets
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex+=2){
    22b2:	3202      	adds	r2, #2
    22b4:	b2d2      	uxtb	r2, r2
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(TEMPERATURE_DESCRIPTOR << 4);
    22b6:	1c19      	adds	r1, r3, #0
	header[ucHeaderIndex++] = ucHeaderSize;
	header[ucHeaderIndex++] = ucTemperatureDataSets + uiAccelerometerDataSets;
	// Using these for loops is a bit overkill, but it shows more clearly that the upper nibble and lower nibble are
	//		separate fields.
	// Fill in the descriptors the temperature data sets
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex+=2){
    22b8:	42aa      	cmp	r2, r5
    22ba:	dbf7      	blt.n	22ac <offload_data+0x50>
    22bc:	e000      	b.n	22c0 <offload_data+0x64>
	cpu_irq_enter_critical();
	uint8_t ucHeaderSize = 2 + 4*(ucTemperatureDataSets + uiAccelerometerDataSets);
	uint8_t header[ucHeaderSize];
	uint8_t ucHeaderIndex = 0, ucDataIndex = 0;
	header[ucHeaderIndex++] = ucHeaderSize;
	header[ucHeaderIndex++] = ucTemperatureDataSets + uiAccelerometerDataSets;
    22be:	2302      	movs	r3, #2
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex+=2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(TEMPERATURE_DESCRIPTOR << 4);
	}
	// If there are an uneven number of temperature data sets, then we need to put one temp descriptor with one accel descriptor
	ucDataIndex = 0;
	if(ucTemperatureDataSets % 2){
    22c0:	2201      	movs	r2, #1
    22c2:	4641      	mov	r1, r8
    22c4:	4011      	ands	r1, r2
    22c6:	4688      	mov	r8, r1
    22c8:	d100      	bne.n	22cc <offload_data+0x70>
    22ca:	e1cd      	b.n	2668 <offload_data+0x40c>
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
    22cc:	1c59      	adds	r1, r3, #1
    22ce:	b2c9      	uxtb	r1, r1
    22d0:	2210      	movs	r2, #16
    22d2:	54e2      	strb	r2, [r4, r3]
		ucDataIndex = 1;
	}
	// Fill in the accel descriptors
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
    22d4:	3801      	subs	r0, #1
    22d6:	2801      	cmp	r0, #1
    22d8:	dd0d      	ble.n	22f6 <offload_data+0x9a>
	}
	// If there are an uneven number of temperature data sets, then we need to put one temp descriptor with one accel descriptor
	ucDataIndex = 0;
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
		ucDataIndex = 1;
    22da:	3a0f      	subs	r2, #15
	}
	// Fill in the accel descriptors
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
    22dc:	2611      	movs	r6, #17
    22de:	1c4b      	adds	r3, r1, #1
    22e0:	b2db      	uxtb	r3, r3
    22e2:	5466      	strb	r6, [r4, r1]
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
		ucDataIndex = 1;
	}
	// Fill in the accel descriptors
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
    22e4:	3202      	adds	r2, #2
    22e6:	b2d2      	uxtb	r2, r2
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
    22e8:	1c19      	adds	r1, r3, #0
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
		ucDataIndex = 1;
	}
	// Fill in the accel descriptors
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
    22ea:	4282      	cmp	r2, r0
    22ec:	dbf7      	blt.n	22de <offload_data+0x82>
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
	}
	// If there is an uneven number of datasets for accel, then we need to put the lower nibble in as an accel descriptor
	if(ucTemperatureDataSets % 2){
    22ee:	4642      	mov	r2, r8
    22f0:	2a00      	cmp	r2, #0
    22f2:	d005      	beq.n	2300 <offload_data+0xa4>
    22f4:	e000      	b.n	22f8 <offload_data+0x9c>
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(TEMPERATURE_DESCRIPTOR << 4);
	}
	// If there are an uneven number of temperature data sets, then we need to put one temp descriptor with one accel descriptor
	ucDataIndex = 0;
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
    22f6:	1c0b      	adds	r3, r1, #0
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
	}
	// If there is an uneven number of datasets for accel, then we need to put the lower nibble in as an accel descriptor
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR);
    22f8:	1c5a      	adds	r2, r3, #1
    22fa:	2101      	movs	r1, #1
    22fc:	54e1      	strb	r1, [r4, r3]
    22fe:	b2d3      	uxtb	r3, r2
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
    2300:	2d00      	cmp	r5, #0
    2302:	dd12      	ble.n	232a <offload_data+0xce>
		header[ucHeaderIndex++] = cTemperatureDataSetPtr[ucHeaderIndex + 1] - cTemperatureDataSetPtr[ucHeaderIndex];
    2304:	4a85      	ldr	r2, [pc, #532]	; (251c <offload_data+0x2c0>)
    2306:	4691      	mov	r9, r2
    2308:	1c1e      	adds	r6, r3, #0
    230a:	4680      	mov	r8, r0
    230c:	1c72      	adds	r2, r6, #1
    230e:	b2d2      	uxtb	r2, r2
    2310:	4649      	mov	r1, r9
    2312:	1889      	adds	r1, r1, r2
    2314:	7849      	ldrb	r1, [r1, #1]
    2316:	4648      	mov	r0, r9
    2318:	5c80      	ldrb	r0, [r0, r2]
    231a:	1a09      	subs	r1, r1, r0
    231c:	55a1      	strb	r1, [r4, r6]
    231e:	1c16      	adds	r6, r2, #0
	// If there is an uneven number of datasets for accel, then we need to put the lower nibble in as an accel descriptor
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR);
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
    2320:	1ad1      	subs	r1, r2, r3
    2322:	b2c9      	uxtb	r1, r1
    2324:	42a9      	cmp	r1, r5
    2326:	dbf1      	blt.n	230c <offload_data+0xb0>
    2328:	e1a5      	b.n	2676 <offload_data+0x41a>
		header[ucHeaderIndex++] = cTemperatureDataSetPtr[ucHeaderIndex + 1] - cTemperatureDataSetPtr[ucHeaderIndex];
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
    232a:	2800      	cmp	r0, #0
    232c:	dd2f      	ble.n	238e <offload_data+0x132>
    232e:	1c1a      	adds	r2, r3, #0
		header[ucHeaderIndex++] = iAccelerometerDataSetPtr[ucHeaderIndex + 1] - iAccelerometerDataSetPtr[ucHeaderIndex];
    2330:	4b7b      	ldr	r3, [pc, #492]	; (2520 <offload_data+0x2c4>)
    2332:	4699      	mov	r9, r3
    2334:	1c16      	adds	r6, r2, #0
    2336:	4692      	mov	sl, r2
    2338:	46a8      	mov	r8, r5
    233a:	1c73      	adds	r3, r6, #1
    233c:	b2db      	uxtb	r3, r3
    233e:	1c59      	adds	r1, r3, #1
    2340:	0049      	lsls	r1, r1, #1
    2342:	464d      	mov	r5, r9
    2344:	5b49      	ldrh	r1, [r1, r5]
    2346:	005d      	lsls	r5, r3, #1
    2348:	464a      	mov	r2, r9
    234a:	5aad      	ldrh	r5, [r5, r2]
    234c:	1b49      	subs	r1, r1, r5
    234e:	55a1      	strb	r1, [r4, r6]
    2350:	1c1e      	adds	r6, r3, #0
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = cTemperatureDataSetPtr[ucHeaderIndex + 1] - cTemperatureDataSetPtr[ucHeaderIndex];
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
    2352:	4652      	mov	r2, sl
    2354:	1a99      	subs	r1, r3, r2
    2356:	b2c9      	uxtb	r1, r1
    2358:	4281      	cmp	r1, r0
    235a:	dbee      	blt.n	233a <offload_data+0xde>
    235c:	e191      	b.n	2682 <offload_data+0x426>
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR);
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = cTemperatureDataSetPtr[ucHeaderIndex + 1] - cTemperatureDataSetPtr[ucHeaderIndex];
    235e:	1c1e      	adds	r6, r3, #0
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = iAccelerometerDataSetPtr[ucHeaderIndex + 1] - iAccelerometerDataSetPtr[ucHeaderIndex];
	}
	// Fill in the data lengths, we are assuming 8 bits each
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
    2360:	2208      	movs	r2, #8
    2362:	4690      	mov	r8, r2
    2364:	1c72      	adds	r2, r6, #1
    2366:	b2d2      	uxtb	r2, r2
    2368:	4641      	mov	r1, r8
    236a:	55a1      	strb	r1, [r4, r6]
    236c:	1c16      	adds	r6, r2, #0
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = iAccelerometerDataSetPtr[ucHeaderIndex + 1] - iAccelerometerDataSetPtr[ucHeaderIndex];
	}
	// Fill in the data lengths, we are assuming 8 bits each
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
    236e:	1ad1      	subs	r1, r2, r3
    2370:	b2c9      	uxtb	r1, r1
    2372:	42a9      	cmp	r1, r5
    2374:	dbf6      	blt.n	2364 <offload_data+0x108>
		header[ucHeaderIndex++] = 8;
	}
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
    2376:	2800      	cmp	r0, #0
    2378:	dd09      	ble.n	238e <offload_data+0x132>
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = cTemperatureDataSetPtr[ucHeaderIndex + 1] - cTemperatureDataSetPtr[ucHeaderIndex];
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = iAccelerometerDataSetPtr[ucHeaderIndex + 1] - iAccelerometerDataSetPtr[ucHeaderIndex];
    237a:	1c11      	adds	r1, r2, #0
	// Fill in the data lengths, we are assuming 8 bits each
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
	}
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
    237c:	2608      	movs	r6, #8
    237e:	1c4b      	adds	r3, r1, #1
    2380:	b2db      	uxtb	r3, r3
    2382:	5466      	strb	r6, [r4, r1]
    2384:	1c19      	adds	r1, r3, #0
	}
	// Fill in the data lengths, we are assuming 8 bits each
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
	}
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
    2386:	1a9b      	subs	r3, r3, r2
    2388:	b2db      	uxtb	r3, r3
    238a:	4283      	cmp	r3, r0
    238c:	dbf7      	blt.n	237e <offload_data+0x122>
		header[ucHeaderIndex++] = 8;
	}
	// Write the header
	for(int i = 0; i < ucHeaderSize; i++)
    238e:	46e0      	mov	r8, ip
    2390:	2600      	movs	r6, #0
	{
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first dei
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    2392:	4b64      	ldr	r3, [pc, #400]	; (2524 <offload_data+0x2c8>)
    2394:	469b      	mov	fp, r3
			S70FL01_active_die++;
			S70FL01_active_die %= 2;
    2396:	4b64      	ldr	r3, [pc, #400]	; (2528 <offload_data+0x2cc>)
    2398:	4699      	mov	r9, r3
			S70FL01_address = 0;
    239a:	46da      	mov	sl, fp
	// Write the header
	for(int i = 0; i < ucHeaderSize; i++)
	{
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first dei
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    239c:	4b63      	ldr	r3, [pc, #396]	; (252c <offload_data+0x2d0>)
    239e:	465a      	mov	r2, fp
    23a0:	6812      	ldr	r2, [r2, #0]
    23a2:	429a      	cmp	r2, r3
    23a4:	d909      	bls.n	23ba <offload_data+0x15e>
			S70FL01_active_die++;
    23a6:	464b      	mov	r3, r9
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    23ac:	2201      	movs	r2, #1
    23ae:	4013      	ands	r3, r2
    23b0:	464a      	mov	r2, r9
    23b2:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    23b4:	2300      	movs	r3, #0
    23b6:	4652      	mov	r2, sl
    23b8:	6013      	str	r3, [r2, #0]
	 	}
		S70FL01_verified_write(header[i], S70FL01_active_die, S70FL01_address++);
    23ba:	5da0      	ldrb	r0, [r4, r6]
    23bc:	4b5a      	ldr	r3, [pc, #360]	; (2528 <offload_data+0x2cc>)
    23be:	7819      	ldrb	r1, [r3, #0]
    23c0:	4b58      	ldr	r3, [pc, #352]	; (2524 <offload_data+0x2c8>)
    23c2:	681a      	ldr	r2, [r3, #0]
    23c4:	1c55      	adds	r5, r2, #1
    23c6:	601d      	str	r5, [r3, #0]
    23c8:	4b59      	ldr	r3, [pc, #356]	; (2530 <offload_data+0x2d4>)
    23ca:	4798      	blx	r3
	}
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
	}
	// Write the header
	for(int i = 0; i < ucHeaderSize; i++)
    23cc:	3601      	adds	r6, #1
    23ce:	4546      	cmp	r6, r8
    23d0:	dbe4      	blt.n	239c <offload_data+0x140>
    23d2:	e08e      	b.n	24f2 <offload_data+0x296>
	// TODO change to the new format
	
	// Loop over all the data sets in the temperature data
	for(int i = 0, ucDataIndex = 0; i < ucTemperatureDataSets - 1; i++){
		// Check that the memory is not full
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    23d4:	4b53      	ldr	r3, [pc, #332]	; (2524 <offload_data+0x2c8>)
    23d6:	681b      	ldr	r3, [r3, #0]
    23d8:	603b      	str	r3, [r7, #0]
    23da:	4b54      	ldr	r3, [pc, #336]	; (252c <offload_data+0x2d0>)
    23dc:	683a      	ldr	r2, [r7, #0]
    23de:	429a      	cmp	r2, r3
    23e0:	d909      	bls.n	23f6 <offload_data+0x19a>
			S70FL01_active_die++;
    23e2:	4b51      	ldr	r3, [pc, #324]	; (2528 <offload_data+0x2cc>)
    23e4:	781b      	ldrb	r3, [r3, #0]
    23e6:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    23e8:	2201      	movs	r2, #1
    23ea:	4013      	ands	r3, r2
    23ec:	4a4e      	ldr	r2, [pc, #312]	; (2528 <offload_data+0x2cc>)
    23ee:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    23f0:	2200      	movs	r2, #0
    23f2:	4b4c      	ldr	r3, [pc, #304]	; (2524 <offload_data+0x2c8>)
    23f4:	601a      	str	r2, [r3, #0]
    23f6:	68ba      	ldr	r2, [r7, #8]
    23f8:	4690      	mov	r8, r2
		}
		// We have reached the end of actual data
		if(cTemperatureDataSetPtr[i] < 0){
    23fa:	7813      	ldrb	r3, [r2, #0]
    23fc:	2b7f      	cmp	r3, #127	; 0x7f
    23fe:	d900      	bls.n	2402 <offload_data+0x1a6>
    2400:	e120      	b.n	2644 <offload_data+0x3e8>
			break;
		}
		// Write the timestamps
		S70FL01_verified_write(ucTemperatureTimestamps[i+0], S70FL01_active_die, S70FL01_address++);
    2402:	68fb      	ldr	r3, [r7, #12]
    2404:	7818      	ldrb	r0, [r3, #0]
    2406:	4e48      	ldr	r6, [pc, #288]	; (2528 <offload_data+0x2cc>)
    2408:	7831      	ldrb	r1, [r6, #0]
    240a:	4c46      	ldr	r4, [pc, #280]	; (2524 <offload_data+0x2c8>)
    240c:	6822      	ldr	r2, [r4, #0]
    240e:	1c53      	adds	r3, r2, #1
    2410:	6023      	str	r3, [r4, #0]
    2412:	4d47      	ldr	r5, [pc, #284]	; (2530 <offload_data+0x2d4>)
    2414:	47a8      	blx	r5
		S70FL01_verified_write(ucTemperatureTimestamps[i+1], S70FL01_active_die, S70FL01_address++);
    2416:	6879      	ldr	r1, [r7, #4]
    2418:	3101      	adds	r1, #1
    241a:	6079      	str	r1, [r7, #4]
    241c:	68fb      	ldr	r3, [r7, #12]
    241e:	7858      	ldrb	r0, [r3, #1]
    2420:	7831      	ldrb	r1, [r6, #0]
    2422:	6822      	ldr	r2, [r4, #0]
    2424:	1c53      	adds	r3, r2, #1
    2426:	6023      	str	r3, [r4, #0]
    2428:	47a8      	blx	r5
		S70FL01_verified_write(ucTemperatureTimestamps[i+2], S70FL01_active_die, S70FL01_address++);
    242a:	68fb      	ldr	r3, [r7, #12]
    242c:	7898      	ldrb	r0, [r3, #2]
    242e:	7831      	ldrb	r1, [r6, #0]
    2430:	6822      	ldr	r2, [r4, #0]
    2432:	1c53      	adds	r3, r2, #1
    2434:	6023      	str	r3, [r4, #0]
    2436:	47a8      	blx	r5
		S70FL01_verified_write(ucTemperatureTimestamps[i+3], S70FL01_active_die, S70FL01_address++);
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	78d8      	ldrb	r0, [r3, #3]
    243c:	7831      	ldrb	r1, [r6, #0]
    243e:	6822      	ldr	r2, [r4, #0]
    2440:	1c53      	adds	r3, r2, #1
    2442:	6023      	str	r3, [r4, #0]
    2444:	47a8      	blx	r5
		// Iterate over each block of data
		for(int j = cTemperatureDataSetPtr[i]; j < cTemperatureDataSetPtr[i] - cTemperatureDataSetPtr[i+1]; j++){
    2446:	68ba      	ldr	r2, [r7, #8]
    2448:	7813      	ldrb	r3, [r2, #0]
    244a:	b25c      	sxtb	r4, r3
    244c:	7852      	ldrb	r2, [r2, #1]
    244e:	b252      	sxtb	r2, r2
    2450:	1aa2      	subs	r2, r4, r2
    2452:	4294      	cmp	r4, r2
    2454:	da46      	bge.n	24e4 <offload_data+0x288>
    2456:	4a37      	ldr	r2, [pc, #220]	; (2534 <offload_data+0x2d8>)
    2458:	18a5      	adds	r5, r4, r2
    245a:	006b      	lsls	r3, r5, #1
    245c:	4d36      	ldr	r5, [pc, #216]	; (2538 <offload_data+0x2dc>)
    245e:	195d      	adds	r5, r3, r5
    2460:	1c22      	adds	r2, r4, #0
			// Check that the memory is not full
			if(S70FL01_address >= S70FL01_MAX_ADDR){
    2462:	4b30      	ldr	r3, [pc, #192]	; (2524 <offload_data+0x2c8>)
    2464:	469b      	mov	fp, r3
    2466:	4b31      	ldr	r3, [pc, #196]	; (252c <offload_data+0x2d0>)
    2468:	4659      	mov	r1, fp
    246a:	6809      	ldr	r1, [r1, #0]
    246c:	4299      	cmp	r1, r3
    246e:	d909      	bls.n	2484 <offload_data+0x228>
				S70FL01_active_die++;
    2470:	4b2d      	ldr	r3, [pc, #180]	; (2528 <offload_data+0x2cc>)
    2472:	781b      	ldrb	r3, [r3, #0]
    2474:	3301      	adds	r3, #1
				S70FL01_active_die %= 2;
    2476:	2101      	movs	r1, #1
    2478:	400b      	ands	r3, r1
    247a:	492b      	ldr	r1, [pc, #172]	; (2528 <offload_data+0x2cc>)
    247c:	700b      	strb	r3, [r1, #0]
				S70FL01_address = 0;
    247e:	2300      	movs	r3, #0
    2480:	4928      	ldr	r1, [pc, #160]	; (2524 <offload_data+0x2c8>)
    2482:	600b      	str	r3, [r1, #0]
			}
			// If we are at the first point, write the entire data point
			if(j == 0 || j == cTemperatureDataSetPtr[i]){
    2484:	2c00      	cmp	r4, #0
    2486:	d001      	beq.n	248c <offload_data+0x230>
    2488:	4294      	cmp	r4, r2
    248a:	d112      	bne.n	24b2 <offload_data+0x256>
				S70FL01_verified_write(uiTemperatureArray[j] >> 0x00 & 0xFF, S70FL01_active_die, S70FL01_address++);
    248c:	78a8      	ldrb	r0, [r5, #2]
    248e:	4b26      	ldr	r3, [pc, #152]	; (2528 <offload_data+0x2cc>)
    2490:	469a      	mov	sl, r3
    2492:	7819      	ldrb	r1, [r3, #0]
    2494:	4e23      	ldr	r6, [pc, #140]	; (2524 <offload_data+0x2c8>)
    2496:	6832      	ldr	r2, [r6, #0]
    2498:	1c53      	adds	r3, r2, #1
    249a:	6033      	str	r3, [r6, #0]
    249c:	4b24      	ldr	r3, [pc, #144]	; (2530 <offload_data+0x2d4>)
    249e:	4699      	mov	r9, r3
    24a0:	4798      	blx	r3
				S70FL01_verified_write(uiTemperatureArray[j] >> 0x08 & 0xFF, S70FL01_active_die, S70FL01_address++);
    24a2:	78e8      	ldrb	r0, [r5, #3]
    24a4:	4653      	mov	r3, sl
    24a6:	7819      	ldrb	r1, [r3, #0]
    24a8:	6832      	ldr	r2, [r6, #0]
    24aa:	1c53      	adds	r3, r2, #1
    24ac:	6033      	str	r3, [r6, #0]
    24ae:	47c8      	blx	r9
    24b0:	e00e      	b.n	24d0 <offload_data+0x274>
			}
			// Otherwise delta encode and write
			else{
				S70FL01_verified_write((uiTemperatureArray[j] - uiTemperatureArray[j-1]) >> 0x08 & 0xFF, S70FL01_active_die, S70FL01_address++);
    24b2:	2202      	movs	r2, #2
    24b4:	5eab      	ldrsh	r3, [r5, r2]
    24b6:	2200      	movs	r2, #0
    24b8:	5ea8      	ldrsh	r0, [r5, r2]
    24ba:	1a18      	subs	r0, r3, r0
    24bc:	1200      	asrs	r0, r0, #8
    24be:	b2c0      	uxtb	r0, r0
    24c0:	4b19      	ldr	r3, [pc, #100]	; (2528 <offload_data+0x2cc>)
    24c2:	7819      	ldrb	r1, [r3, #0]
    24c4:	4b17      	ldr	r3, [pc, #92]	; (2524 <offload_data+0x2c8>)
    24c6:	681a      	ldr	r2, [r3, #0]
    24c8:	1c56      	adds	r6, r2, #1
    24ca:	601e      	str	r6, [r3, #0]
    24cc:	4b18      	ldr	r3, [pc, #96]	; (2530 <offload_data+0x2d4>)
    24ce:	4798      	blx	r3
		S70FL01_verified_write(ucTemperatureTimestamps[i+0], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucTemperatureTimestamps[i+1], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucTemperatureTimestamps[i+2], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucTemperatureTimestamps[i+3], S70FL01_active_die, S70FL01_address++);
		// Iterate over each block of data
		for(int j = cTemperatureDataSetPtr[i]; j < cTemperatureDataSetPtr[i] - cTemperatureDataSetPtr[i+1]; j++){
    24d0:	3401      	adds	r4, #1
    24d2:	4643      	mov	r3, r8
    24d4:	2200      	movs	r2, #0
    24d6:	569a      	ldrsb	r2, [r3, r2]
    24d8:	3502      	adds	r5, #2
    24da:	785b      	ldrb	r3, [r3, #1]
    24dc:	b25b      	sxtb	r3, r3
    24de:	1ad3      	subs	r3, r2, r3
    24e0:	42a3      	cmp	r3, r4
    24e2:	dcc0      	bgt.n	2466 <offload_data+0x20a>
    24e4:	68bb      	ldr	r3, [r7, #8]
    24e6:	3301      	adds	r3, #1
    24e8:	60bb      	str	r3, [r7, #8]
    24ea:	68fb      	ldr	r3, [r7, #12]
    24ec:	3301      	adds	r3, #1
    24ee:	60fb      	str	r3, [r7, #12]
    24f0:	e005      	b.n	24fe <offload_data+0x2a2>
    24f2:	4b0a      	ldr	r3, [pc, #40]	; (251c <offload_data+0x2c0>)
    24f4:	60bb      	str	r3, [r7, #8]
    24f6:	4b11      	ldr	r3, [pc, #68]	; (253c <offload_data+0x2e0>)
    24f8:	60fb      	str	r3, [r7, #12]
	}
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
	}
	// Write the header
	for(int i = 0; i < ucHeaderSize; i++)
    24fa:	2300      	movs	r3, #0
    24fc:	607b      	str	r3, [r7, #4]
		S70FL01_verified_write(header[i], S70FL01_active_die, S70FL01_address++);
	}
	// TODO change to the new format
	
	// Loop over all the data sets in the temperature data
	for(int i = 0, ucDataIndex = 0; i < ucTemperatureDataSets - 1; i++){
    24fe:	4b05      	ldr	r3, [pc, #20]	; (2514 <offload_data+0x2b8>)
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	3b01      	subs	r3, #1
    2504:	687a      	ldr	r2, [r7, #4]
    2506:	429a      	cmp	r2, r3
    2508:	da00      	bge.n	250c <offload_data+0x2b0>
    250a:	e763      	b.n	23d4 <offload_data+0x178>
    250c:	e09a      	b.n	2644 <offload_data+0x3e8>
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	00003c2d 	.word	0x00003c2d
    2514:	200000bc 	.word	0x200000bc
    2518:	20001cc0 	.word	0x20001cc0
    251c:	20001e54 	.word	0x20001e54
    2520:	20001464 	.word	0x20001464
    2524:	20001e44 	.word	0x20001e44
    2528:	20001c36 	.word	0x20001c36
    252c:	1fffffff 	.word	0x1fffffff
    2530:	000029cd 	.word	0x000029cd
    2534:	7fffffff 	.word	0x7fffffff
    2538:	20001ea0 	.word	0x20001ea0
    253c:	20001d14 	.word	0x20001d14
		}
	}
	// Loop over all the data sets in the accel data
	for(int i = 0, ucDataIndex = 0; i < uiAccelerometerDataSets - 1; i++){
		// Check that the memory is not full
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    2540:	4b59      	ldr	r3, [pc, #356]	; (26a8 <offload_data+0x44c>)
    2542:	681b      	ldr	r3, [r3, #0]
    2544:	603b      	str	r3, [r7, #0]
    2546:	4b59      	ldr	r3, [pc, #356]	; (26ac <offload_data+0x450>)
    2548:	683a      	ldr	r2, [r7, #0]
    254a:	429a      	cmp	r2, r3
    254c:	d909      	bls.n	2562 <offload_data+0x306>
			S70FL01_active_die++;
    254e:	4b58      	ldr	r3, [pc, #352]	; (26b0 <offload_data+0x454>)
    2550:	781b      	ldrb	r3, [r3, #0]
    2552:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    2554:	2201      	movs	r2, #1
    2556:	4013      	ands	r3, r2
    2558:	4a55      	ldr	r2, [pc, #340]	; (26b0 <offload_data+0x454>)
    255a:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    255c:	2200      	movs	r2, #0
    255e:	4b52      	ldr	r3, [pc, #328]	; (26a8 <offload_data+0x44c>)
    2560:	601a      	str	r2, [r3, #0]
    2562:	68ba      	ldr	r2, [r7, #8]
    2564:	4692      	mov	sl, r2
		}
		if(iAccelerometerDataSetPtr[i] < 0){
    2566:	2100      	movs	r1, #0
    2568:	5e53      	ldrsh	r3, [r2, r1]
    256a:	2b00      	cmp	r3, #0
    256c:	db77      	blt.n	265e <offload_data+0x402>
			break;
		}
		S70FL01_verified_write(ucAccelTimestamps[i+0], S70FL01_active_die, S70FL01_address++);
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	7818      	ldrb	r0, [r3, #0]
    2572:	4e4f      	ldr	r6, [pc, #316]	; (26b0 <offload_data+0x454>)
    2574:	7831      	ldrb	r1, [r6, #0]
    2576:	4c4c      	ldr	r4, [pc, #304]	; (26a8 <offload_data+0x44c>)
    2578:	6822      	ldr	r2, [r4, #0]
    257a:	1c53      	adds	r3, r2, #1
    257c:	6023      	str	r3, [r4, #0]
    257e:	4d4d      	ldr	r5, [pc, #308]	; (26b4 <offload_data+0x458>)
    2580:	47a8      	blx	r5
		S70FL01_verified_write(ucAccelTimestamps[i+1], S70FL01_active_die, S70FL01_address++);
    2582:	6879      	ldr	r1, [r7, #4]
    2584:	3101      	adds	r1, #1
    2586:	6079      	str	r1, [r7, #4]
    2588:	68fb      	ldr	r3, [r7, #12]
    258a:	7858      	ldrb	r0, [r3, #1]
    258c:	7831      	ldrb	r1, [r6, #0]
    258e:	6822      	ldr	r2, [r4, #0]
    2590:	1c53      	adds	r3, r2, #1
    2592:	6023      	str	r3, [r4, #0]
    2594:	47a8      	blx	r5
		S70FL01_verified_write(ucAccelTimestamps[i+2], S70FL01_active_die, S70FL01_address++);
    2596:	68fb      	ldr	r3, [r7, #12]
    2598:	7898      	ldrb	r0, [r3, #2]
    259a:	7831      	ldrb	r1, [r6, #0]
    259c:	6822      	ldr	r2, [r4, #0]
    259e:	1c53      	adds	r3, r2, #1
    25a0:	6023      	str	r3, [r4, #0]
    25a2:	47a8      	blx	r5
		S70FL01_verified_write(ucAccelTimestamps[i+3], S70FL01_active_die, S70FL01_address++);
    25a4:	68fb      	ldr	r3, [r7, #12]
    25a6:	78d8      	ldrb	r0, [r3, #3]
    25a8:	7831      	ldrb	r1, [r6, #0]
    25aa:	6822      	ldr	r2, [r4, #0]
    25ac:	1c53      	adds	r3, r2, #1
    25ae:	6023      	str	r3, [r4, #0]
    25b0:	47a8      	blx	r5
		// Iterate over each block of data
		for(int j = iAccelerometerDataSetPtr[i]; j < iAccelerometerDataSetPtr[i] - iAccelerometerDataSetPtr[i+1]; j++){
    25b2:	68ba      	ldr	r2, [r7, #8]
    25b4:	8813      	ldrh	r3, [r2, #0]
    25b6:	b219      	sxth	r1, r3
    25b8:	4689      	mov	r9, r1
    25ba:	2102      	movs	r1, #2
    25bc:	5e52      	ldrsh	r2, [r2, r1]
    25be:	4649      	mov	r1, r9
    25c0:	1a8a      	subs	r2, r1, r2
    25c2:	4591      	cmp	r9, r2
    25c4:	da37      	bge.n	2636 <offload_data+0x3da>
    25c6:	4d3c      	ldr	r5, [pc, #240]	; (26b8 <offload_data+0x45c>)
    25c8:	194d      	adds	r5, r1, r5
			// Check that the memory is not full
			if(S70FL01_address >= S70FL01_MAX_ADDR){
    25ca:	4b37      	ldr	r3, [pc, #220]	; (26a8 <offload_data+0x44c>)
    25cc:	469b      	mov	fp, r3
				S70FL01_active_die++;
				S70FL01_active_die %= 2;
				S70FL01_address = 0;
    25ce:	464e      	mov	r6, r9
		S70FL01_verified_write(ucAccelTimestamps[i+2], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucAccelTimestamps[i+3], S70FL01_active_die, S70FL01_address++);
		// Iterate over each block of data
		for(int j = iAccelerometerDataSetPtr[i]; j < iAccelerometerDataSetPtr[i] - iAccelerometerDataSetPtr[i+1]; j++){
			// Check that the memory is not full
			if(S70FL01_address >= S70FL01_MAX_ADDR){
    25d0:	4b36      	ldr	r3, [pc, #216]	; (26ac <offload_data+0x450>)
    25d2:	465a      	mov	r2, fp
    25d4:	6812      	ldr	r2, [r2, #0]
    25d6:	429a      	cmp	r2, r3
    25d8:	d909      	bls.n	25ee <offload_data+0x392>
				S70FL01_active_die++;
    25da:	4b35      	ldr	r3, [pc, #212]	; (26b0 <offload_data+0x454>)
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	3301      	adds	r3, #1
				S70FL01_active_die %= 2;
    25e0:	2201      	movs	r2, #1
    25e2:	4013      	ands	r3, r2
    25e4:	4a32      	ldr	r2, [pc, #200]	; (26b0 <offload_data+0x454>)
    25e6:	7013      	strb	r3, [r2, #0]
				S70FL01_address = 0;
    25e8:	2300      	movs	r3, #0
    25ea:	4a2f      	ldr	r2, [pc, #188]	; (26a8 <offload_data+0x44c>)
    25ec:	6013      	str	r3, [r2, #0]
			}
			// We are already only storing 8 bit numbers for the accel data, so no need for delta encoding
			S70FL01_verified_write(ucAccelerometerMatrix[j+0], S70FL01_active_die, S70FL01_address++);
    25ee:	7828      	ldrb	r0, [r5, #0]
    25f0:	4b2f      	ldr	r3, [pc, #188]	; (26b0 <offload_data+0x454>)
    25f2:	4699      	mov	r9, r3
    25f4:	7819      	ldrb	r1, [r3, #0]
    25f6:	4c2c      	ldr	r4, [pc, #176]	; (26a8 <offload_data+0x44c>)
    25f8:	6822      	ldr	r2, [r4, #0]
    25fa:	1c53      	adds	r3, r2, #1
    25fc:	6023      	str	r3, [r4, #0]
    25fe:	4b2d      	ldr	r3, [pc, #180]	; (26b4 <offload_data+0x458>)
    2600:	4698      	mov	r8, r3
    2602:	4798      	blx	r3
			S70FL01_verified_write(ucAccelerometerMatrix[j+1], S70FL01_active_die, S70FL01_address++);
    2604:	3601      	adds	r6, #1
    2606:	7868      	ldrb	r0, [r5, #1]
    2608:	464b      	mov	r3, r9
    260a:	7819      	ldrb	r1, [r3, #0]
    260c:	6822      	ldr	r2, [r4, #0]
    260e:	1c53      	adds	r3, r2, #1
    2610:	6023      	str	r3, [r4, #0]
    2612:	47c0      	blx	r8
			S70FL01_verified_write(ucAccelerometerMatrix[j+2], S70FL01_active_die, S70FL01_address++);			
    2614:	78a8      	ldrb	r0, [r5, #2]
    2616:	464b      	mov	r3, r9
    2618:	7819      	ldrb	r1, [r3, #0]
    261a:	6822      	ldr	r2, [r4, #0]
    261c:	1c53      	adds	r3, r2, #1
    261e:	6023      	str	r3, [r4, #0]
    2620:	47c0      	blx	r8
    2622:	3501      	adds	r5, #1
		S70FL01_verified_write(ucAccelTimestamps[i+0], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucAccelTimestamps[i+1], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucAccelTimestamps[i+2], S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucAccelTimestamps[i+3], S70FL01_active_die, S70FL01_address++);
		// Iterate over each block of data
		for(int j = iAccelerometerDataSetPtr[i]; j < iAccelerometerDataSetPtr[i] - iAccelerometerDataSetPtr[i+1]; j++){
    2624:	4653      	mov	r3, sl
    2626:	2200      	movs	r2, #0
    2628:	5e9b      	ldrsh	r3, [r3, r2]
    262a:	4652      	mov	r2, sl
    262c:	2102      	movs	r1, #2
    262e:	5e52      	ldrsh	r2, [r2, r1]
    2630:	1a9b      	subs	r3, r3, r2
    2632:	42b3      	cmp	r3, r6
    2634:	dccc      	bgt.n	25d0 <offload_data+0x374>
    2636:	68bb      	ldr	r3, [r7, #8]
    2638:	3302      	adds	r3, #2
    263a:	60bb      	str	r3, [r7, #8]
    263c:	68fb      	ldr	r3, [r7, #12]
    263e:	3301      	adds	r3, #1
    2640:	60fb      	str	r3, [r7, #12]
    2642:	e005      	b.n	2650 <offload_data+0x3f4>
    2644:	4b1d      	ldr	r3, [pc, #116]	; (26bc <offload_data+0x460>)
    2646:	60bb      	str	r3, [r7, #8]
    2648:	4b1d      	ldr	r3, [pc, #116]	; (26c0 <offload_data+0x464>)
    264a:	60fb      	str	r3, [r7, #12]
	}
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = 8;
	}
	// Write the header
	for(int i = 0; i < ucHeaderSize; i++)
    264c:	2300      	movs	r3, #0
    264e:	607b      	str	r3, [r7, #4]
				S70FL01_verified_write((uiTemperatureArray[j] - uiTemperatureArray[j-1]) >> 0x08 & 0xFF, S70FL01_active_die, S70FL01_address++);
			}
		}
	}
	// Loop over all the data sets in the accel data
	for(int i = 0, ucDataIndex = 0; i < uiAccelerometerDataSets - 1; i++){
    2650:	4b1c      	ldr	r3, [pc, #112]	; (26c4 <offload_data+0x468>)
    2652:	881b      	ldrh	r3, [r3, #0]
    2654:	3b01      	subs	r3, #1
    2656:	687a      	ldr	r2, [r7, #4]
    2658:	429a      	cmp	r2, r3
    265a:	da00      	bge.n	265e <offload_data+0x402>
    265c:	e770      	b.n	2540 <offload_data+0x2e4>
			S70FL01_verified_write(ucAccelerometerMatrix[j+1], S70FL01_active_die, S70FL01_address++);
			S70FL01_verified_write(ucAccelerometerMatrix[j+2], S70FL01_active_die, S70FL01_address++);			
		}
	}
	// Reconfigure the buffers and their pointers
	configure_databuffers();
    265e:	4b1a      	ldr	r3, [pc, #104]	; (26c8 <offload_data+0x46c>)
    2660:	4798      	blx	r3
	cpu_irq_leave_critical();	
    2662:	4b1a      	ldr	r3, [pc, #104]	; (26cc <offload_data+0x470>)
    2664:	4798      	blx	r3
    2666:	e016      	b.n	2696 <offload_data+0x43a>
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
		ucDataIndex = 1;
	}
	// Fill in the accel descriptors
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
    2668:	3801      	subs	r0, #1
    266a:	1c19      	adds	r1, r3, #0
	// Fill in the descriptors the temperature data sets
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex+=2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(TEMPERATURE_DESCRIPTOR << 4);
	}
	// If there are an uneven number of temperature data sets, then we need to put one temp descriptor with one accel descriptor
	ucDataIndex = 0;
    266c:	2200      	movs	r2, #0
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(TEMPERATURE_DESCRIPTOR) | UNIBBLE(ACCEL_DESCRIPTOR << 4);
		ucDataIndex = 1;
	}
	// Fill in the accel descriptors
	for(ucDataIndex; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex+=2){
    266e:	2800      	cmp	r0, #0
    2670:	dd00      	ble.n	2674 <offload_data+0x418>
    2672:	e633      	b.n	22dc <offload_data+0x80>
    2674:	e00b      	b.n	268e <offload_data+0x432>
    2676:	4640      	mov	r0, r8
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR);
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
		header[ucHeaderIndex++] = cTemperatureDataSetPtr[ucHeaderIndex + 1] - cTemperatureDataSetPtr[ucHeaderIndex];
    2678:	1c13      	adds	r3, r2, #0
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < uiAccelerometerDataSets - 1; ucDataIndex++){
    267a:	2800      	cmp	r0, #0
    267c:	dc00      	bgt.n	2680 <offload_data+0x424>
    267e:	e66e      	b.n	235e <offload_data+0x102>
    2680:	e656      	b.n	2330 <offload_data+0xd4>
    2682:	4645      	mov	r5, r8
		header[ucHeaderIndex++] = iAccelerometerDataSetPtr[ucHeaderIndex + 1] - iAccelerometerDataSetPtr[ucHeaderIndex];
    2684:	1c1a      	adds	r2, r3, #0
	}
	// Fill in the data lengths, we are assuming 8 bits each
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
    2686:	2d00      	cmp	r5, #0
    2688:	dc00      	bgt.n	268c <offload_data+0x430>
    268a:	e676      	b.n	237a <offload_data+0x11e>
    268c:	e667      	b.n	235e <offload_data+0x102>
	// If there is an uneven number of datasets for accel, then we need to put the lower nibble in as an accel descriptor
	if(ucTemperatureDataSets % 2){
		header[ucHeaderIndex++] = LNIBBLE(ACCEL_DESCRIPTOR);
	}
	// Fill in the data set lengths
	for(ucDataIndex = 0; ucDataIndex < ucTemperatureDataSets - 1; ucDataIndex++){
    268e:	2d00      	cmp	r5, #0
    2690:	dd00      	ble.n	2694 <offload_data+0x438>
    2692:	e637      	b.n	2304 <offload_data+0xa8>
    2694:	e67b      	b.n	238e <offload_data+0x132>
		}
	}
	// Reconfigure the buffers and their pointers
	configure_databuffers();
	cpu_irq_leave_critical();	
    2696:	46bd      	mov	sp, r7
    2698:	b005      	add	sp, #20
    269a:	bc3c      	pop	{r2, r3, r4, r5}
    269c:	4690      	mov	r8, r2
    269e:	4699      	mov	r9, r3
    26a0:	46a2      	mov	sl, r4
    26a2:	46ab      	mov	fp, r5
    26a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	20001e44 	.word	0x20001e44
    26ac:	1fffffff 	.word	0x1fffffff
    26b0:	20001c36 	.word	0x20001c36
    26b4:	000029cd 	.word	0x000029cd
    26b8:	200000d0 	.word	0x200000d0
    26bc:	20001464 	.word	0x20001464
    26c0:	200004b8 	.word	0x200004b8
    26c4:	20001cc0 	.word	0x20001cc0
    26c8:	000021c1 	.word	0x000021c1
    26cc:	00003c6d 	.word	0x00003c6d

000026d0 <configure_S70FL01>:
/* @params[in] die_cs, the die that should be configured in the S70FL01
/* @params[in] erase_chip, whether or not to erase the die upon config
/* @returns 0 if failure 1 if success
/************************************************************************/
uint8_t configure_S70FL01(uint8_t die_cs, bool erase_chip)
{
    26d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d2:	465f      	mov	r7, fp
    26d4:	4656      	mov	r6, sl
    26d6:	464d      	mov	r5, r9
    26d8:	4644      	mov	r4, r8
    26da:	b4f0      	push	{r4, r5, r6, r7}
    26dc:	b093      	sub	sp, #76	; 0x4c
    26de:	1c04      	adds	r4, r0, #0
    26e0:	9101      	str	r1, [sp, #4]
	S70FL01_active_die = 0;
    26e2:	2700      	movs	r7, #0
    26e4:	4ba7      	ldr	r3, [pc, #668]	; (2984 <configure_S70FL01+0x2b4>)
    26e6:	701f      	strb	r7, [r3, #0]
	S70FL01_address = 0;
    26e8:	4ba7      	ldr	r3, [pc, #668]	; (2988 <configure_S70FL01+0x2b8>)
    26ea:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    26ec:	ad03      	add	r5, sp, #12
    26ee:	2380      	movs	r3, #128	; 0x80
    26f0:	702b      	strb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    26f2:	70ef      	strb	r7, [r5, #3]
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    26f4:	2601      	movs	r6, #1
    26f6:	706e      	strb	r6, [r5, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
    26f8:	3b7e      	subs	r3, #126	; 0x7e
    26fa:	70ab      	strb	r3, [r5, #2]

	// Setup Enable -- Disable the chip while configuring.
	system_pinmux_pin_set_config(S70FL01_EN, &config_pinmux);
    26fc:	2012      	movs	r0, #18
    26fe:	1c29      	adds	r1, r5, #0
    2700:	4ba2      	ldr	r3, [pc, #648]	; (298c <configure_S70FL01+0x2bc>)
    2702:	469a      	mov	sl, r3
    2704:	4798      	blx	r3
    2706:	4ba2      	ldr	r3, [pc, #648]	; (2990 <configure_S70FL01+0x2c0>)
    2708:	4699      	mov	r9, r3
    270a:	2380      	movs	r3, #128	; 0x80
    270c:	02db      	lsls	r3, r3, #11
    270e:	464a      	mov	r2, r9
    2710:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(S70FL01_EN, false);

	// Setup CS1#
	system_pinmux_pin_set_config(S70FL01_CS1, &config_pinmux);
    2712:	2005      	movs	r0, #5
    2714:	1c29      	adds	r1, r5, #0
    2716:	47d0      	blx	sl
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2718:	2310      	movs	r3, #16
    271a:	469b      	mov	fp, r3
    271c:	464b      	mov	r3, r9
    271e:	465a      	mov	r2, fp
    2720:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(S70FL01_CS2, true);
	
	// Setup CS2#
	system_pinmux_pin_set_config(S70FL01_CS2, &config_pinmux);
    2722:	2004      	movs	r0, #4
    2724:	1c29      	adds	r1, r5, #0
    2726:	47d0      	blx	sl
    2728:	464b      	mov	r3, r9
    272a:	465a      	mov	r2, fp
    272c:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    272e:	4d99      	ldr	r5, [pc, #612]	; (2994 <configure_S70FL01+0x2c4>)
    2730:	702c      	strb	r4, [r5, #0]
	slave->address_enabled = config->address_enabled;
    2732:	706f      	strb	r7, [r5, #1]
	slave->address         = config->address;
    2734:	70af      	strb	r7, [r5, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2736:	ab02      	add	r3, sp, #8
    2738:	705e      	strb	r6, [r3, #1]
	config->powersave  = false;
    273a:	709f      	strb	r7, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    273c:	701e      	strb	r6, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    273e:	1c20      	adds	r0, r4, #0
    2740:	1c19      	adds	r1, r3, #0
    2742:	4b95      	ldr	r3, [pc, #596]	; (2998 <configure_S70FL01+0x2c8>)
    2744:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2746:	782b      	ldrb	r3, [r5, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2748:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    274a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    274c:	2900      	cmp	r1, #0
    274e:	d102      	bne.n	2756 <configure_S70FL01+0x86>
		return &(ports[port_index]->Group[group_index]);
    2750:	095a      	lsrs	r2, r3, #5
    2752:	01d2      	lsls	r2, r2, #7
    2754:	444a      	add	r2, r9
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2756:	211f      	movs	r1, #31
    2758:	400b      	ands	r3, r1
    275a:	391e      	subs	r1, #30
    275c:	1c08      	adds	r0, r1, #0
    275e:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2760:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2762:	aa04      	add	r2, sp, #16
    2764:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2766:	2300      	movs	r3, #0
    2768:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    276a:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    276c:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    276e:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    2770:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2772:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2774:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2776:	930b      	str	r3, [sp, #44]	; 0x2c
    2778:	930c      	str	r3, [sp, #48]	; 0x30
	spi_attach_slave(&slave, &slave_dev_config);
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.run_in_standby = false;
	config_spi_master.mode_specific.master.baudrate = 10000UL;
    277a:	4b88      	ldr	r3, [pc, #544]	; (299c <configure_S70FL01+0x2cc>)
    277c:	6193      	str	r3, [r2, #24]
	config_spi_master.character_size = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
	config_spi_master.mode = SPI_MODE_MASTER;
	config_spi_master.receiver_enable = true;
	config_spi_master.master_slave_select_enable = false;
	config_spi_master.generator_source = GCLK_GENERATOR_1;
    277e:	2324      	movs	r3, #36	; 0x24
    2780:	54d1      	strb	r1, [r2, r3]
	/** SPI MUX combination F. DOPO: 0x1 => SCK=PAD3, MOSI=PAD2, DIPO: 0x1 => MISO=PAD1 */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_F;
    2782:	2388      	movs	r3, #136	; 0x88
    2784:	035b      	lsls	r3, r3, #13
    2786:	60d3      	str	r3, [r2, #12]
	/* Configure pad 0 as unused */
	config_spi_master.pinmux_pad0 = PINMUX_UNUSED;
    2788:	2301      	movs	r3, #1
    278a:	425b      	negs	r3, r3
    278c:	6293      	str	r3, [r2, #40]	; 0x28
	/* Configure pad 1 as data out */
	config_spi_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    278e:	4b84      	ldr	r3, [pc, #528]	; (29a0 <configure_S70FL01+0x2d0>)
    2790:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* Configure pad 2 for data in */
	config_spi_master.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2;
    2792:	4b84      	ldr	r3, [pc, #528]	; (29a4 <configure_S70FL01+0x2d4>)
    2794:	6313      	str	r3, [r2, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3;
    2796:	4b84      	ldr	r3, [pc, #528]	; (29a8 <configure_S70FL01+0x2d8>)
    2798:	6353      	str	r3, [r2, #52]	; 0x34
	
	spi_init(&spi_master_instance, SERCOM2, &config_spi_master);
    279a:	4d84      	ldr	r5, [pc, #528]	; (29ac <configure_S70FL01+0x2dc>)
    279c:	1c28      	adds	r0, r5, #0
    279e:	4984      	ldr	r1, [pc, #528]	; (29b0 <configure_S70FL01+0x2e0>)
    27a0:	4b84      	ldr	r3, [pc, #528]	; (29b4 <configure_S70FL01+0x2e4>)
    27a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    27a4:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    27a6:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    27a8:	2b00      	cmp	r3, #0
    27aa:	d1fc      	bne.n	27a6 <configure_S70FL01+0xd6>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    27ac:	6811      	ldr	r1, [r2, #0]
    27ae:	3302      	adds	r3, #2
    27b0:	430b      	orrs	r3, r1
    27b2:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
	spi_enabled = true;
    27b4:	2201      	movs	r2, #1
    27b6:	4b80      	ldr	r3, [pc, #512]	; (29b8 <configure_S70FL01+0x2e8>)
    27b8:	701a      	strb	r2, [r3, #0]
    27ba:	4b80      	ldr	r3, [pc, #512]	; (29bc <configure_S70FL01+0x2ec>)
    27bc:	1c1e      	adds	r6, r3, #0
    27be:	3614      	adds	r6, #20
	
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
		rxBuffer[i] = 0;
    27c0:	2200      	movs	r2, #0
    27c2:	701a      	strb	r2, [r3, #0]
    27c4:	3301      	adds	r3, #1
	spi_init(&spi_master_instance, SERCOM2, &config_spi_master);
	spi_enable(&spi_master_instance);
	spi_enabled = true;
	
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
    27c6:	42b3      	cmp	r3, r6
    27c8:	d1fb      	bne.n	27c2 <configure_S70FL01+0xf2>
    27ca:	2280      	movs	r2, #128	; 0x80
    27cc:	02d2      	lsls	r2, r2, #11
    27ce:	4b70      	ldr	r3, [pc, #448]	; (2990 <configure_S70FL01+0x2c0>)
    27d0:	619a      	str	r2, [r3, #24]
    27d2:	4b7b      	ldr	r3, [pc, #492]	; (29c0 <configure_S70FL01+0x2f0>)
    27d4:	3b01      	subs	r3, #1
		rxBuffer[i] = 0;
	}
	
	// Enable the chip now that its configured
	port_pin_set_output_level(S70FL01_EN, true);
	for(int i = 0; i < 65535; i++);
    27d6:	2b00      	cmp	r3, #0
    27d8:	d1fc      	bne.n	27d4 <configure_S70FL01+0x104>
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    27da:	09e3      	lsrs	r3, r4, #7
    27dc:	4698      	mov	r8, r3
	uint8_t group_index = (gpio_pin / 32);
    27de:	0963      	lsrs	r3, r4, #5
    27e0:	4699      	mov	r9, r3

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    27e2:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    27e4:	4642      	mov	r2, r8
    27e6:	2a00      	cmp	r2, #0
    27e8:	d104      	bne.n	27f4 <configure_S70FL01+0x124>
		return &(ports[port_index]->Group[group_index]);
    27ea:	464b      	mov	r3, r9
    27ec:	01db      	lsls	r3, r3, #7
    27ee:	4a68      	ldr	r2, [pc, #416]	; (2990 <configure_S70FL01+0x2c0>)
    27f0:	4694      	mov	ip, r2
    27f2:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    27f4:	271f      	movs	r7, #31
    27f6:	403c      	ands	r4, r7
    27f8:	3f1e      	subs	r7, #30
    27fa:	40a7      	lsls	r7, r4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    27fc:	615f      	str	r7, [r3, #20]
    27fe:	23fa      	movs	r3, #250	; 0xfa
    2800:	009b      	lsls	r3, r3, #2
    2802:	3b01      	subs	r3, #1
	
	// Select chip
	port_pin_set_output_level(die_cs, false);
	for(int i = 0; i < 1000; i++);
    2804:	2b00      	cmp	r3, #0
    2806:	d1fc      	bne.n	2802 <configure_S70FL01+0x132>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2808:	4b68      	ldr	r3, [pc, #416]	; (29ac <configure_S70FL01+0x2dc>)
    280a:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    280c:	2101      	movs	r1, #1
    280e:	7e1a      	ldrb	r2, [r3, #24]
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    2810:	420a      	tst	r2, r1
    2812:	d0fc      	beq.n	280e <configure_S70FL01+0x13e>
    2814:	2101      	movs	r1, #1
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDID)) != STATUS_OK);
    2816:	2005      	movs	r0, #5
    2818:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    281a:	420a      	tst	r2, r1
    281c:	d100      	bne.n	2820 <configure_S70FL01+0x150>
    281e:	e0a7      	b.n	2970 <configure_S70FL01+0x2a0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2820:	229f      	movs	r2, #159	; 0x9f
    2822:	629a      	str	r2, [r3, #40]	; 0x28
    2824:	2100      	movs	r1, #0
    2826:	4a67      	ldr	r2, [pc, #412]	; (29c4 <configure_S70FL01+0x2f4>)
    2828:	7011      	strb	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    282a:	3104      	adds	r1, #4
    282c:	7e1a      	ldrb	r2, [r3, #24]
	// Read back the contents of the shift reg
	while(!spi_is_ready_to_read(&spi_master_instance));
    282e:	420a      	tst	r2, r1
    2830:	d0fc      	beq.n	282c <configure_S70FL01+0x15c>
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
    2832:	4d5e      	ldr	r5, [pc, #376]	; (29ac <configure_S70FL01+0x2dc>)
    2834:	4c64      	ldr	r4, [pc, #400]	; (29c8 <configure_S70FL01+0x2f8>)
    2836:	1c28      	adds	r0, r5, #0
    2838:	4960      	ldr	r1, [pc, #384]	; (29bc <configure_S70FL01+0x2ec>)
    283a:	2214      	movs	r2, #20
    283c:	23ff      	movs	r3, #255	; 0xff
    283e:	47a0      	blx	r4
    2840:	4b60      	ldr	r3, [pc, #384]	; (29c4 <configure_S70FL01+0x2f4>)
    2842:	7018      	strb	r0, [r3, #0]
    2844:	2800      	cmp	r0, #0
    2846:	d1f6      	bne.n	2836 <configure_S70FL01+0x166>
	
	// See if we got anything back. If not, then just return
	for(int i = 0; i < 20; i++){
		if(rxBuffer[i]){
    2848:	4b5c      	ldr	r3, [pc, #368]	; (29bc <configure_S70FL01+0x2ec>)
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	2b00      	cmp	r3, #0
    284e:	d119      	bne.n	2884 <configure_S70FL01+0x1b4>
    2850:	4a5a      	ldr	r2, [pc, #360]	; (29bc <configure_S70FL01+0x2ec>)
    2852:	1c53      	adds	r3, r2, #1
    2854:	3213      	adds	r2, #19
    2856:	7818      	ldrb	r0, [r3, #0]
    2858:	2800      	cmp	r0, #0
    285a:	d113      	bne.n	2884 <configure_S70FL01+0x1b4>
			break;
			}else if(i == 19){
    285c:	4293      	cmp	r3, r2
    285e:	d10e      	bne.n	287e <configure_S70FL01+0x1ae>
	} else {
		Assert(false);
		return NULL;
    2860:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2862:	4642      	mov	r2, r8
    2864:	2a00      	cmp	r2, #0
    2866:	d104      	bne.n	2872 <configure_S70FL01+0x1a2>
		return &(ports[port_index]->Group[group_index]);
    2868:	464b      	mov	r3, r9
    286a:	01db      	lsls	r3, r3, #7
    286c:	4a48      	ldr	r2, [pc, #288]	; (2990 <configure_S70FL01+0x2c0>)
    286e:	4694      	mov	ip, r2
    2870:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2872:	619f      	str	r7, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2874:	2280      	movs	r2, #128	; 0x80
    2876:	02d2      	lsls	r2, r2, #11
    2878:	4b45      	ldr	r3, [pc, #276]	; (2990 <configure_S70FL01+0x2c0>)
    287a:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(die_cs, true);
			port_pin_set_output_level(S70FL01_EN, false);
			return 0;
    287c:	e07b      	b.n	2976 <configure_S70FL01+0x2a6>
    287e:	3301      	adds	r3, #1
	// Read back the contents of the shift reg
	while(!spi_is_ready_to_read(&spi_master_instance));
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
	
	// See if we got anything back. If not, then just return
	for(int i = 0; i < 20; i++){
    2880:	429e      	cmp	r6, r3
    2882:	d1e8      	bne.n	2856 <configure_S70FL01+0x186>
			port_pin_set_output_level(die_cs, true);
			port_pin_set_output_level(S70FL01_EN, false);
			return 0;
		}
	}
	rxBuffer[0] = 0;
    2884:	2200      	movs	r2, #0
    2886:	4b4d      	ldr	r3, [pc, #308]	; (29bc <configure_S70FL01+0x2ec>)
    2888:	701a      	strb	r2, [r3, #0]
    288a:	2364      	movs	r3, #100	; 0x64
    288c:	3b01      	subs	r3, #1
	
	// We need to delay because the GPIO is faster than the serial out 100 is sufficient for 1 byte
	// Then give it a second to stabilize
	for(int i = 0; i < 100; i++);
    288e:	2b00      	cmp	r3, #0
    2890:	d1fc      	bne.n	288c <configure_S70FL01+0x1bc>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2892:	4642      	mov	r2, r8
    2894:	2a00      	cmp	r2, #0
    2896:	d104      	bne.n	28a2 <configure_S70FL01+0x1d2>
		return &(ports[port_index]->Group[group_index]);
    2898:	464b      	mov	r3, r9
    289a:	01db      	lsls	r3, r3, #7
    289c:	4a3c      	ldr	r2, [pc, #240]	; (2990 <configure_S70FL01+0x2c0>)
    289e:	4694      	mov	ip, r2
    28a0:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    28a2:	619f      	str	r7, [r3, #24]
    28a4:	2364      	movs	r3, #100	; 0x64
    28a6:	3b01      	subs	r3, #1
	port_pin_set_output_level(die_cs, true);
	for(int i = 0; i < 100; i++);
    28a8:	2b00      	cmp	r3, #0
    28aa:	d1fc      	bne.n	28a6 <configure_S70FL01+0x1d6>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    28ac:	4642      	mov	r2, r8
    28ae:	2a00      	cmp	r2, #0
    28b0:	d104      	bne.n	28bc <configure_S70FL01+0x1ec>
		return &(ports[port_index]->Group[group_index]);
    28b2:	464b      	mov	r3, r9
    28b4:	01db      	lsls	r3, r3, #7
    28b6:	4a36      	ldr	r2, [pc, #216]	; (2990 <configure_S70FL01+0x2c0>)
    28b8:	4694      	mov	ip, r2
    28ba:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    28bc:	615f      	str	r7, [r3, #20]
    28be:	2364      	movs	r3, #100	; 0x64
    28c0:	3b01      	subs	r3, #1
	port_pin_set_output_level(die_cs, false);
	for(int i = 0; i < 100; i++);
    28c2:	2b00      	cmp	r3, #0
    28c4:	d1fc      	bne.n	28c0 <configure_S70FL01+0x1f0>
	
	if(erase_chip){
    28c6:	9b01      	ldr	r3, [sp, #4]
    28c8:	2b00      	cmp	r3, #0
    28ca:	d02d      	beq.n	2928 <configure_S70FL01+0x258>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28cc:	4b37      	ldr	r3, [pc, #220]	; (29ac <configure_S70FL01+0x2dc>)
    28ce:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    28d0:	2101      	movs	r1, #1
    28d2:	7e1a      	ldrb	r2, [r3, #24]
		// Wait for the module to be ready
		while(!spi_is_ready_to_write(&spi_master_instance));
    28d4:	420a      	tst	r2, r1
    28d6:	d0fc      	beq.n	28d2 <configure_S70FL01+0x202>
    28d8:	2201      	movs	r2, #1
    28da:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    28dc:	4211      	tst	r1, r2
    28de:	d0fc      	beq.n	28da <configure_S70FL01+0x20a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    28e0:	22c7      	movs	r2, #199	; 0xc7
    28e2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    28e4:	2101      	movs	r1, #1
    28e6:	7e1a      	ldrb	r2, [r3, #24]
		// Set reg to erase entire array
		while(spi_write(&spi_master_instance, S70FL01_BE) != STATUS_OK);
		
		// Wait until the erase completes (Status Reg 0x01)
		// Wait for the module to be ready
		while(!spi_is_ready_to_write(&spi_master_instance));
    28e8:	420a      	tst	r2, r1
    28ea:	d0fc      	beq.n	28e6 <configure_S70FL01+0x216>
    28ec:	2201      	movs	r2, #1
    28ee:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    28f0:	4211      	tst	r1, r2
    28f2:	d0fc      	beq.n	28ee <configure_S70FL01+0x21e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    28f4:	2205      	movs	r2, #5
    28f6:	629a      	str	r2, [r3, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28f8:	4b2c      	ldr	r3, [pc, #176]	; (29ac <configure_S70FL01+0x2dc>)
    28fa:	469a      	mov	sl, r3
		while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
		do{
			// Wait for the peripheral to be ready
			while(!spi_is_ready_to_read(&spi_master_instance));
			// Read back the contents of the shift reg
			while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 1, 0xFF)) != STATUS_OK);
    28fc:	1c1d      	adds	r5, r3, #0
    28fe:	4c2f      	ldr	r4, [pc, #188]	; (29bc <configure_S70FL01+0x2ec>)
    2900:	4653      	mov	r3, sl
    2902:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2904:	2204      	movs	r2, #4
    2906:	7e0b      	ldrb	r3, [r1, #24]
		while(!spi_is_ready_to_write(&spi_master_instance));
		// Write the buffer to read back written data
		while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
		do{
			// Wait for the peripheral to be ready
			while(!spi_is_ready_to_read(&spi_master_instance));
    2908:	4213      	tst	r3, r2
    290a:	d0fc      	beq.n	2906 <configure_S70FL01+0x236>
			// Read back the contents of the shift reg
			while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 1, 0xFF)) != STATUS_OK);
    290c:	4e2e      	ldr	r6, [pc, #184]	; (29c8 <configure_S70FL01+0x2f8>)
    290e:	1c28      	adds	r0, r5, #0
    2910:	1c21      	adds	r1, r4, #0
    2912:	2201      	movs	r2, #1
    2914:	23ff      	movs	r3, #255	; 0xff
    2916:	47b0      	blx	r6
    2918:	4b2a      	ldr	r3, [pc, #168]	; (29c4 <configure_S70FL01+0x2f4>)
    291a:	7018      	strb	r0, [r3, #0]
    291c:	2800      	cmp	r0, #0
    291e:	d1f6      	bne.n	290e <configure_S70FL01+0x23e>
		}while(rxBuffer[0] & 0x01);
    2920:	4b26      	ldr	r3, [pc, #152]	; (29bc <configure_S70FL01+0x2ec>)
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	07db      	lsls	r3, r3, #31
    2926:	d4eb      	bmi.n	2900 <configure_S70FL01+0x230>
    2928:	4b25      	ldr	r3, [pc, #148]	; (29c0 <configure_S70FL01+0x2f0>)
    292a:	3b01      	subs	r3, #1
	}
	// We need to delay because the GPIO is faster than the serial out 100 is sufficient for 1 byte => we have no idea how long this may take so max it out
	for(int i = 0; i < 65535; i++);
    292c:	2b00      	cmp	r3, #0
    292e:	d1fc      	bne.n	292a <configure_S70FL01+0x25a>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2930:	4642      	mov	r2, r8
    2932:	2a00      	cmp	r2, #0
    2934:	d104      	bne.n	2940 <configure_S70FL01+0x270>
		return &(ports[port_index]->Group[group_index]);
    2936:	464b      	mov	r3, r9
    2938:	01db      	lsls	r3, r3, #7
    293a:	4a15      	ldr	r2, [pc, #84]	; (2990 <configure_S70FL01+0x2c0>)
    293c:	4694      	mov	ip, r2
    293e:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2940:	619f      	str	r7, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2942:	2280      	movs	r2, #128	; 0x80
    2944:	02d2      	lsls	r2, r2, #11
    2946:	4b12      	ldr	r3, [pc, #72]	; (2990 <configure_S70FL01+0x2c0>)
    2948:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    294a:	4b18      	ldr	r3, [pc, #96]	; (29ac <configure_S70FL01+0x2dc>)
    294c:	681a      	ldr	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    294e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2950:	2b00      	cmp	r3, #0
    2952:	d1fc      	bne.n	294e <configure_S70FL01+0x27e>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2954:	6813      	ldr	r3, [r2, #0]
    2956:	2102      	movs	r1, #2
    2958:	438b      	bics	r3, r1
    295a:	6013      	str	r3, [r2, #0]
	port_pin_set_output_level(die_cs, true);
	port_pin_set_output_level(S70FL01_EN, false);
	spi_disable(&spi_master_instance);
	spi_enabled = false;
    295c:	2300      	movs	r3, #0
    295e:	4a16      	ldr	r2, [pc, #88]	; (29b8 <configure_S70FL01+0x2e8>)
    2960:	7013      	strb	r3, [r2, #0]
	S70FL01_active_die = S70FL01_CS1;
    2962:	3103      	adds	r1, #3
    2964:	4a07      	ldr	r2, [pc, #28]	; (2984 <configure_S70FL01+0x2b4>)
    2966:	7011      	strb	r1, [r2, #0]
	S70FL01_address = 0;
    2968:	4a07      	ldr	r2, [pc, #28]	; (2988 <configure_S70FL01+0x2b8>)
    296a:	6013      	str	r3, [r2, #0]
	return 1;
    296c:	2001      	movs	r0, #1
    296e:	e002      	b.n	2976 <configure_S70FL01+0x2a6>
	for(int i = 0; i < 1000; i++);
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDID)) != STATUS_OK);
    2970:	4a14      	ldr	r2, [pc, #80]	; (29c4 <configure_S70FL01+0x2f4>)
    2972:	7010      	strb	r0, [r2, #0]
    2974:	e750      	b.n	2818 <configure_S70FL01+0x148>
	spi_enabled = false;
	S70FL01_active_die = S70FL01_CS1;
	S70FL01_address = 0;
	return 1;
	
}
    2976:	b013      	add	sp, #76	; 0x4c
    2978:	bc3c      	pop	{r2, r3, r4, r5}
    297a:	4690      	mov	r8, r2
    297c:	4699      	mov	r9, r3
    297e:	46a2      	mov	sl, r4
    2980:	46ab      	mov	fp, r5
    2982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2984:	20001c36 	.word	0x20001c36
    2988:	20001e44 	.word	0x20001e44
    298c:	00004405 	.word	0x00004405
    2990:	40002800 	.word	0x40002800
    2994:	20001e40 	.word	0x20001e40
    2998:	00003c05 	.word	0x00003c05
    299c:	00002710 	.word	0x00002710
    29a0:	00090003 	.word	0x00090003
    29a4:	000a0003 	.word	0x000a0003
    29a8:	000b0003 	.word	0x000b0003
    29ac:	20001e34 	.word	0x20001e34
    29b0:	42000800 	.word	0x42000800
    29b4:	00003121 	.word	0x00003121
    29b8:	200000cc 	.word	0x200000cc
    29bc:	20000050 	.word	0x20000050
    29c0:	0000ffff 	.word	0x0000ffff
    29c4:	20001e9e 	.word	0x20001e9e
    29c8:	00003475 	.word	0x00003475

000029cc <S70FL01_verified_write>:
/* @params[in] die the die to write to in the memory module
/* @params[in] address the address to write to in the given die
/* @returns 0 if failure 1 if successful
/************************************************************************/
uint8_t S70FL01_verified_write(uint8_t byte, uint8_t die, uint32_t address)
{
    29cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ce:	4657      	mov	r7, sl
    29d0:	464e      	mov	r6, r9
    29d2:	4645      	mov	r5, r8
    29d4:	b4e0      	push	{r5, r6, r7}
    29d6:	b088      	sub	sp, #32
    29d8:	4680      	mov	r8, r0
	if(!spi_enabled)
    29da:	4bbc      	ldr	r3, [pc, #752]	; (2ccc <S70FL01_verified_write+0x300>)
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	2b00      	cmp	r3, #0
    29e0:	d10b      	bne.n	29fa <S70FL01_verified_write+0x2e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    29e2:	4bbb      	ldr	r3, [pc, #748]	; (2cd0 <S70FL01_verified_write+0x304>)
    29e4:	6818      	ldr	r0, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    29e6:	69c3      	ldr	r3, [r0, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    29e8:	2b00      	cmp	r3, #0
    29ea:	d1fc      	bne.n	29e6 <S70FL01_verified_write+0x1a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    29ec:	6804      	ldr	r4, [r0, #0]
    29ee:	3302      	adds	r3, #2
    29f0:	4323      	orrs	r3, r4
    29f2:	6003      	str	r3, [r0, #0]
	{
		spi_enable(&spi_master_instance);
		spi_enabled = true;
    29f4:	2001      	movs	r0, #1
    29f6:	4bb5      	ldr	r3, [pc, #724]	; (2ccc <S70FL01_verified_write+0x300>)
    29f8:	7018      	strb	r0, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    29fa:	2080      	movs	r0, #128	; 0x80
    29fc:	02c0      	lsls	r0, r0, #11
    29fe:	4bb5      	ldr	r3, [pc, #724]	; (2cd4 <S70FL01_verified_write+0x308>)
    2a00:	6198      	str	r0, [r3, #24]
    2a02:	4bb5      	ldr	r3, [pc, #724]	; (2cd8 <S70FL01_verified_write+0x30c>)
    2a04:	3b01      	subs	r3, #1
	}
	// Enable the chip
	port_pin_set_output_level(S70FL01_EN, true);
	for(int i = 0; i < 65535; i++);
    2a06:	2b00      	cmp	r3, #0
    2a08:	d1fc      	bne.n	2a04 <S70FL01_verified_write+0x38>
	
	uint8_t rxBuffer[20];
	uint8_t wrBuffer[5] = {S70FL01_PP, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF, byte};
    2a0a:	ab01      	add	r3, sp, #4
    2a0c:	2002      	movs	r0, #2
    2a0e:	7018      	strb	r0, [r3, #0]
    2a10:	0c14      	lsrs	r4, r2, #16
    2a12:	b2e4      	uxtb	r4, r4
    2a14:	705c      	strb	r4, [r3, #1]
    2a16:	0a10      	lsrs	r0, r2, #8
    2a18:	b2c0      	uxtb	r0, r0
    2a1a:	7098      	strb	r0, [r3, #2]
    2a1c:	b2d2      	uxtb	r2, r2
    2a1e:	70da      	strb	r2, [r3, #3]
    2a20:	4645      	mov	r5, r8
    2a22:	711d      	strb	r5, [r3, #4]
	uint8_t vfyBuffer[4] = {S70FL01_READ, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF};
    2a24:	2303      	movs	r3, #3
    2a26:	466d      	mov	r5, sp
    2a28:	702b      	strb	r3, [r5, #0]
    2a2a:	706c      	strb	r4, [r5, #1]
    2a2c:	70a8      	strb	r0, [r5, #2]
    2a2e:	70ea      	strb	r2, [r5, #3]
    2a30:	ab03      	add	r3, sp, #12
    2a32:	a808      	add	r0, sp, #32
		
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
		rxBuffer[i] = 0;
    2a34:	2200      	movs	r2, #0
    2a36:	701a      	strb	r2, [r3, #0]
    2a38:	3301      	adds	r3, #1
	uint8_t rxBuffer[20];
	uint8_t wrBuffer[5] = {S70FL01_PP, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF, byte};
	uint8_t vfyBuffer[4] = {S70FL01_READ, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF};
		
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
    2a3a:	4283      	cmp	r3, r0
    2a3c:	d1fb      	bne.n	2a36 <S70FL01_verified_write+0x6a>
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    2a3e:	09ce      	lsrs	r6, r1, #7
	uint8_t group_index = (gpio_pin / 32);
    2a40:	094b      	lsrs	r3, r1, #5
    2a42:	4699      	mov	r9, r3

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2a44:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2a46:	2e00      	cmp	r6, #0
    2a48:	d104      	bne.n	2a54 <S70FL01_verified_write+0x88>
		return &(ports[port_index]->Group[group_index]);
    2a4a:	464b      	mov	r3, r9
    2a4c:	01db      	lsls	r3, r3, #7
    2a4e:	4aa1      	ldr	r2, [pc, #644]	; (2cd4 <S70FL01_verified_write+0x308>)
    2a50:	4694      	mov	ip, r2
    2a52:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2a54:	251f      	movs	r5, #31
    2a56:	4029      	ands	r1, r5
    2a58:	3d1e      	subs	r5, #30
    2a5a:	408d      	lsls	r5, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2a5c:	615d      	str	r5, [r3, #20]
    2a5e:	23fa      	movs	r3, #250	; 0xfa
    2a60:	009b      	lsls	r3, r3, #2
    2a62:	3b01      	subs	r3, #1
		rxBuffer[i] = 0;
	}
	
	// Select chip
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 1000; i++);
    2a64:	2b00      	cmp	r3, #0
    2a66:	d1fc      	bne.n	2a62 <S70FL01_verified_write+0x96>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2a68:	4b99      	ldr	r3, [pc, #612]	; (2cd0 <S70FL01_verified_write+0x304>)
    2a6a:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2a6c:	2101      	movs	r1, #1
    2a6e:	7e13      	ldrb	r3, [r2, #24]
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    2a70:	420b      	tst	r3, r1
    2a72:	d0fc      	beq.n	2a6e <S70FL01_verified_write+0xa2>
    2a74:	2101      	movs	r1, #1
    2a76:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2a78:	420b      	tst	r3, r1
    2a7a:	d0fc      	beq.n	2a76 <S70FL01_verified_write+0xaa>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2a7c:	2306      	movs	r3, #6
    2a7e:	6293      	str	r3, [r2, #40]	; 0x28
    2a80:	23fa      	movs	r3, #250	; 0xfa
    2a82:	009b      	lsls	r3, r3, #2
    2a84:	3b01      	subs	r3, #1
	// Set WREN so we can write to memory
	while(spi_write(&spi_master_instance, S70FL01_WREN) != STATUS_OK);
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 1000; i++);
    2a86:	2b00      	cmp	r3, #0
    2a88:	d1fc      	bne.n	2a84 <S70FL01_verified_write+0xb8>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2a8a:	2e00      	cmp	r6, #0
    2a8c:	d104      	bne.n	2a98 <S70FL01_verified_write+0xcc>
		return &(ports[port_index]->Group[group_index]);
    2a8e:	464b      	mov	r3, r9
    2a90:	01db      	lsls	r3, r3, #7
    2a92:	4990      	ldr	r1, [pc, #576]	; (2cd4 <S70FL01_verified_write+0x308>)
    2a94:	468c      	mov	ip, r1
    2a96:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2a98:	619d      	str	r5, [r3, #24]
    2a9a:	2364      	movs	r3, #100	; 0x64
    2a9c:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d1fc      	bne.n	2a9c <S70FL01_verified_write+0xd0>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2aa2:	2e00      	cmp	r6, #0
    2aa4:	d104      	bne.n	2ab0 <S70FL01_verified_write+0xe4>
		return &(ports[port_index]->Group[group_index]);
    2aa6:	464b      	mov	r3, r9
    2aa8:	01db      	lsls	r3, r3, #7
    2aaa:	498a      	ldr	r1, [pc, #552]	; (2cd4 <S70FL01_verified_write+0x308>)
    2aac:	468c      	mov	ip, r1
    2aae:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ab0:	615d      	str	r5, [r3, #20]
    2ab2:	23fa      	movs	r3, #250	; 0xfa
    2ab4:	005b      	lsls	r3, r3, #1
    2ab6:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d1fc      	bne.n	2ab6 <S70FL01_verified_write+0xea>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2abc:	2101      	movs	r1, #1
    2abe:	7e13      	ldrb	r3, [r2, #24]
	
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    2ac0:	420b      	tst	r3, r1
    2ac2:	d0fc      	beq.n	2abe <S70FL01_verified_write+0xf2>
    2ac4:	2101      	movs	r1, #1
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDSR)) != STATUS_OK);
    2ac6:	2005      	movs	r0, #5
    2ac8:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2aca:	420b      	tst	r3, r1
    2acc:	d100      	bne.n	2ad0 <S70FL01_verified_write+0x104>
    2ace:	e0f4      	b.n	2cba <S70FL01_verified_write+0x2ee>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2ad0:	2305      	movs	r3, #5
    2ad2:	6293      	str	r3, [r2, #40]	; 0x28
    2ad4:	2100      	movs	r1, #0
    2ad6:	4b81      	ldr	r3, [pc, #516]	; (2cdc <S70FL01_verified_write+0x310>)
    2ad8:	7019      	strb	r1, [r3, #0]
    2ada:	23fa      	movs	r3, #250	; 0xfa
    2adc:	009b      	lsls	r3, r3, #2
    2ade:	3b01      	subs	r3, #1
	for(int i = 0; i < 1000; i++);
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d1fc      	bne.n	2ade <S70FL01_verified_write+0x112>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ae4:	2104      	movs	r1, #4
    2ae6:	7e13      	ldrb	r3, [r2, #24]
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_read(&spi_master_instance));
    2ae8:	420b      	tst	r3, r1
    2aea:	d0fc      	beq.n	2ae6 <S70FL01_verified_write+0x11a>
	// Read back the contents of the shift reg
	// For some reason, if the buffer length is set to 1 the readout does not occur
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
    2aec:	4f7c      	ldr	r7, [pc, #496]	; (2ce0 <S70FL01_verified_write+0x314>)
    2aee:	4c7b      	ldr	r4, [pc, #492]	; (2cdc <S70FL01_verified_write+0x310>)
    2af0:	4877      	ldr	r0, [pc, #476]	; (2cd0 <S70FL01_verified_write+0x304>)
    2af2:	a903      	add	r1, sp, #12
    2af4:	2214      	movs	r2, #20
    2af6:	23ff      	movs	r3, #255	; 0xff
    2af8:	47b8      	blx	r7
    2afa:	7020      	strb	r0, [r4, #0]
    2afc:	2800      	cmp	r0, #0
    2afe:	d1f7      	bne.n	2af0 <S70FL01_verified_write+0x124>
	
	if(!(rxBuffer[0] & 0x02)){
    2b00:	ab03      	add	r3, sp, #12
    2b02:	781b      	ldrb	r3, [r3, #0]
    2b04:	3002      	adds	r0, #2
    2b06:	4018      	ands	r0, r3
    2b08:	d10c      	bne.n	2b24 <S70FL01_verified_write+0x158>
	} else {
		Assert(false);
		return NULL;
    2b0a:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b0c:	2e00      	cmp	r6, #0
    2b0e:	d103      	bne.n	2b18 <S70FL01_verified_write+0x14c>
		return &(ports[port_index]->Group[group_index]);
    2b10:	464b      	mov	r3, r9
    2b12:	01df      	lsls	r7, r3, #7
    2b14:	4b6f      	ldr	r3, [pc, #444]	; (2cd4 <S70FL01_verified_write+0x308>)
    2b16:	18fb      	adds	r3, r7, r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b18:	619d      	str	r5, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b1a:	2280      	movs	r2, #128	; 0x80
    2b1c:	02d2      	lsls	r2, r2, #11
    2b1e:	4b6d      	ldr	r3, [pc, #436]	; (2cd4 <S70FL01_verified_write+0x308>)
    2b20:	615a      	str	r2, [r3, #20]
		// WREN didn't work, so we don't need to waste time doing the rest of the operations.
	 	port_pin_set_output_level(die, true);
	 	port_pin_set_output_level(S70FL01_EN, false);
		return 0;
    2b22:	e0cd      	b.n	2cc0 <S70FL01_verified_write+0x2f4>
    2b24:	23fa      	movs	r3, #250	; 0xfa
    2b26:	009b      	lsls	r3, r3, #2
    2b28:	3b01      	subs	r3, #1
	}
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 1000; i++);
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d1fc      	bne.n	2b28 <S70FL01_verified_write+0x15c>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b2e:	2e00      	cmp	r6, #0
    2b30:	d104      	bne.n	2b3c <S70FL01_verified_write+0x170>
		return &(ports[port_index]->Group[group_index]);
    2b32:	464b      	mov	r3, r9
    2b34:	01db      	lsls	r3, r3, #7
    2b36:	4a67      	ldr	r2, [pc, #412]	; (2cd4 <S70FL01_verified_write+0x308>)
    2b38:	4694      	mov	ip, r2
    2b3a:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b3c:	619d      	str	r5, [r3, #24]
    2b3e:	2364      	movs	r3, #100	; 0x64
    2b40:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    2b42:	2b00      	cmp	r3, #0
    2b44:	d1fc      	bne.n	2b40 <S70FL01_verified_write+0x174>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b46:	2e00      	cmp	r6, #0
    2b48:	d104      	bne.n	2b54 <S70FL01_verified_write+0x188>
		return &(ports[port_index]->Group[group_index]);
    2b4a:	464b      	mov	r3, r9
    2b4c:	01db      	lsls	r3, r3, #7
    2b4e:	4a61      	ldr	r2, [pc, #388]	; (2cd4 <S70FL01_verified_write+0x308>)
    2b50:	4694      	mov	ip, r2
    2b52:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b54:	615d      	str	r5, [r3, #20]
    2b56:	23fa      	movs	r3, #250	; 0xfa
    2b58:	005b      	lsls	r3, r3, #1
    2b5a:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d1fc      	bne.n	2b5a <S70FL01_verified_write+0x18e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b60:	4b5b      	ldr	r3, [pc, #364]	; (2cd0 <S70FL01_verified_write+0x304>)
    2b62:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2b64:	2201      	movs	r2, #1
    2b66:	7e0b      	ldrb	r3, [r1, #24]
	
	
	// Wait for the module to be ready -- maybe not necessary here
	while(!spi_is_ready_to_write(&spi_master_instance));
    2b68:	4213      	tst	r3, r2
    2b6a:	d0fc      	beq.n	2b66 <S70FL01_verified_write+0x19a>
	// Perform write operation
	while(spi_write_buffer_wait(&spi_master_instance, wrBuffer, 5) != STATUS_OK);
    2b6c:	4f58      	ldr	r7, [pc, #352]	; (2cd0 <S70FL01_verified_write+0x304>)
    2b6e:	4c5d      	ldr	r4, [pc, #372]	; (2ce4 <S70FL01_verified_write+0x318>)
    2b70:	1c38      	adds	r0, r7, #0
    2b72:	a901      	add	r1, sp, #4
    2b74:	2205      	movs	r2, #5
    2b76:	47a0      	blx	r4
    2b78:	2800      	cmp	r0, #0
    2b7a:	d1f9      	bne.n	2b70 <S70FL01_verified_write+0x1a4>
    2b7c:	23fa      	movs	r3, #250	; 0xfa
    2b7e:	005b      	lsls	r3, r3, #1
    2b80:	3b01      	subs	r3, #1
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 500; i++);
    2b82:	2b00      	cmp	r3, #0
    2b84:	d1fc      	bne.n	2b80 <S70FL01_verified_write+0x1b4>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b86:	2e00      	cmp	r6, #0
    2b88:	d104      	bne.n	2b94 <S70FL01_verified_write+0x1c8>
		return &(ports[port_index]->Group[group_index]);
    2b8a:	464b      	mov	r3, r9
    2b8c:	01db      	lsls	r3, r3, #7
    2b8e:	4a51      	ldr	r2, [pc, #324]	; (2cd4 <S70FL01_verified_write+0x308>)
    2b90:	4694      	mov	ip, r2
    2b92:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b94:	619d      	str	r5, [r3, #24]
    2b96:	2364      	movs	r3, #100	; 0x64
    2b98:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d1fc      	bne.n	2b98 <S70FL01_verified_write+0x1cc>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b9e:	2e00      	cmp	r6, #0
    2ba0:	d104      	bne.n	2bac <S70FL01_verified_write+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    2ba2:	464b      	mov	r3, r9
    2ba4:	01db      	lsls	r3, r3, #7
    2ba6:	4a4b      	ldr	r2, [pc, #300]	; (2cd4 <S70FL01_verified_write+0x308>)
    2ba8:	4694      	mov	ip, r2
    2baa:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2bac:	615d      	str	r5, [r3, #20]
    2bae:	23fa      	movs	r3, #250	; 0xfa
    2bb0:	005b      	lsls	r3, r3, #1
    2bb2:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d1fc      	bne.n	2bb2 <S70FL01_verified_write+0x1e6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2bb8:	4b45      	ldr	r3, [pc, #276]	; (2cd0 <S70FL01_verified_write+0x304>)
    2bba:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2bbc:	2101      	movs	r1, #1
    2bbe:	7e13      	ldrb	r3, [r2, #24]
	
	// Wait until the write completes (Status Reg 0x01)
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    2bc0:	420b      	tst	r3, r1
    2bc2:	d0fc      	beq.n	2bbe <S70FL01_verified_write+0x1f2>
    2bc4:	2301      	movs	r3, #1
    2bc6:	7e11      	ldrb	r1, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2bc8:	4219      	tst	r1, r3
    2bca:	d0fc      	beq.n	2bc6 <S70FL01_verified_write+0x1fa>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2bcc:	2305      	movs	r3, #5
    2bce:	6293      	str	r3, [r2, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2bd0:	4b3f      	ldr	r3, [pc, #252]	; (2cd0 <S70FL01_verified_write+0x304>)
    2bd2:	469a      	mov	sl, r3
	while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
	do{
		// Wait for the peripheral to be ready
		while(!spi_is_ready_to_read(&spi_master_instance));
		// Read back the contents of the shift reg
		status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF);
    2bd4:	4c42      	ldr	r4, [pc, #264]	; (2ce0 <S70FL01_verified_write+0x314>)
    2bd6:	4653      	mov	r3, sl
    2bd8:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2bda:	2204      	movs	r2, #4
    2bdc:	7e0b      	ldrb	r3, [r1, #24]
	while(!spi_is_ready_to_write(&spi_master_instance));
	// Write the buffer to read back written data
	while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
	do{
		// Wait for the peripheral to be ready
		while(!spi_is_ready_to_read(&spi_master_instance));
    2bde:	4213      	tst	r3, r2
    2be0:	d0fc      	beq.n	2bdc <S70FL01_verified_write+0x210>
		// Read back the contents of the shift reg
		status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF);
    2be2:	af03      	add	r7, sp, #12
    2be4:	483a      	ldr	r0, [pc, #232]	; (2cd0 <S70FL01_verified_write+0x304>)
    2be6:	1c39      	adds	r1, r7, #0
    2be8:	2214      	movs	r2, #20
    2bea:	23ff      	movs	r3, #255	; 0xff
    2bec:	47a0      	blx	r4
    2bee:	4b3b      	ldr	r3, [pc, #236]	; (2cdc <S70FL01_verified_write+0x310>)
    2bf0:	7018      	strb	r0, [r3, #0]
	}while(rxBuffer[0] & 0x01);
    2bf2:	783b      	ldrb	r3, [r7, #0]
    2bf4:	07db      	lsls	r3, r3, #31
    2bf6:	d4ee      	bmi.n	2bd6 <S70FL01_verified_write+0x20a>
    2bf8:	4b37      	ldr	r3, [pc, #220]	; (2cd8 <S70FL01_verified_write+0x30c>)
    2bfa:	3b01      	subs	r3, #1
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 65535; i++);
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d1fc      	bne.n	2bfa <S70FL01_verified_write+0x22e>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2c00:	2e00      	cmp	r6, #0
    2c02:	d104      	bne.n	2c0e <S70FL01_verified_write+0x242>
		return &(ports[port_index]->Group[group_index]);
    2c04:	464b      	mov	r3, r9
    2c06:	01db      	lsls	r3, r3, #7
    2c08:	4a32      	ldr	r2, [pc, #200]	; (2cd4 <S70FL01_verified_write+0x308>)
    2c0a:	4694      	mov	ip, r2
    2c0c:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2c0e:	619d      	str	r5, [r3, #24]
    2c10:	2364      	movs	r3, #100	; 0x64
    2c12:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    2c14:	2b00      	cmp	r3, #0
    2c16:	d1fc      	bne.n	2c12 <S70FL01_verified_write+0x246>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2c18:	2e00      	cmp	r6, #0
    2c1a:	d104      	bne.n	2c26 <S70FL01_verified_write+0x25a>
		return &(ports[port_index]->Group[group_index]);
    2c1c:	464b      	mov	r3, r9
    2c1e:	01db      	lsls	r3, r3, #7
    2c20:	4a2c      	ldr	r2, [pc, #176]	; (2cd4 <S70FL01_verified_write+0x308>)
    2c22:	4694      	mov	ip, r2
    2c24:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2c26:	615d      	str	r5, [r3, #20]
    2c28:	23fa      	movs	r3, #250	; 0xfa
    2c2a:	005b      	lsls	r3, r3, #1
    2c2c:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d1fc      	bne.n	2c2c <S70FL01_verified_write+0x260>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c32:	4b27      	ldr	r3, [pc, #156]	; (2cd0 <S70FL01_verified_write+0x304>)
    2c34:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2c36:	2201      	movs	r2, #1
    2c38:	7e0b      	ldrb	r3, [r1, #24]
	
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    2c3a:	4213      	tst	r3, r2
    2c3c:	d0fc      	beq.n	2c38 <S70FL01_verified_write+0x26c>
	// Write the buffer to read back written data
	while(spi_write_buffer_wait(&spi_master_instance, vfyBuffer, 4) != STATUS_OK);
    2c3e:	4f24      	ldr	r7, [pc, #144]	; (2cd0 <S70FL01_verified_write+0x304>)
    2c40:	4c28      	ldr	r4, [pc, #160]	; (2ce4 <S70FL01_verified_write+0x318>)
    2c42:	1c38      	adds	r0, r7, #0
    2c44:	4669      	mov	r1, sp
    2c46:	2204      	movs	r2, #4
    2c48:	47a0      	blx	r4
    2c4a:	2800      	cmp	r0, #0
    2c4c:	d1f9      	bne.n	2c42 <S70FL01_verified_write+0x276>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c4e:	4b20      	ldr	r3, [pc, #128]	; (2cd0 <S70FL01_verified_write+0x304>)
    2c50:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c52:	2204      	movs	r2, #4
    2c54:	7e0b      	ldrb	r3, [r1, #24]
	// Read back the contents of the shift reg
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_read(&spi_master_instance));
    2c56:	4213      	tst	r3, r2
    2c58:	d0fc      	beq.n	2c54 <S70FL01_verified_write+0x288>
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
    2c5a:	4f1d      	ldr	r7, [pc, #116]	; (2cd0 <S70FL01_verified_write+0x304>)
    2c5c:	4b20      	ldr	r3, [pc, #128]	; (2ce0 <S70FL01_verified_write+0x314>)
    2c5e:	469a      	mov	sl, r3
    2c60:	4c1e      	ldr	r4, [pc, #120]	; (2cdc <S70FL01_verified_write+0x310>)
    2c62:	1c38      	adds	r0, r7, #0
    2c64:	a903      	add	r1, sp, #12
    2c66:	2214      	movs	r2, #20
    2c68:	23ff      	movs	r3, #255	; 0xff
    2c6a:	47d0      	blx	sl
    2c6c:	7020      	strb	r0, [r4, #0]
    2c6e:	2800      	cmp	r0, #0
    2c70:	d1f7      	bne.n	2c62 <S70FL01_verified_write+0x296>
    2c72:	23fa      	movs	r3, #250	; 0xfa
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	3b01      	subs	r3, #1
	// We need to delay because the GPIO is faster than the serial out 100 is sufficient for 1 byte => 2000 should be good
	for(int i = 0; i < 2000; i++);
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d1fc      	bne.n	2c76 <S70FL01_verified_write+0x2aa>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2c7c:	2e00      	cmp	r6, #0
    2c7e:	d103      	bne.n	2c88 <S70FL01_verified_write+0x2bc>
		return &(ports[port_index]->Group[group_index]);
    2c80:	464b      	mov	r3, r9
    2c82:	01df      	lsls	r7, r3, #7
    2c84:	4b13      	ldr	r3, [pc, #76]	; (2cd4 <S70FL01_verified_write+0x308>)
    2c86:	18fb      	adds	r3, r7, r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2c88:	619d      	str	r5, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2c8a:	2280      	movs	r2, #128	; 0x80
    2c8c:	02d2      	lsls	r2, r2, #11
    2c8e:	4b11      	ldr	r3, [pc, #68]	; (2cd4 <S70FL01_verified_write+0x308>)
    2c90:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c92:	4b0f      	ldr	r3, [pc, #60]	; (2cd0 <S70FL01_verified_write+0x304>)
    2c94:	681a      	ldr	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2c96:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d1fc      	bne.n	2c96 <S70FL01_verified_write+0x2ca>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2c9c:	6813      	ldr	r3, [r2, #0]
    2c9e:	2102      	movs	r1, #2
    2ca0:	438b      	bics	r3, r1
    2ca2:	6013      	str	r3, [r2, #0]
	port_pin_set_output_level(die, true);
	port_pin_set_output_level(S70FL01_EN, false);
	spi_disable(&spi_master_instance);
	spi_enabled = false;
    2ca4:	2200      	movs	r2, #0
    2ca6:	4b09      	ldr	r3, [pc, #36]	; (2ccc <S70FL01_verified_write+0x300>)
    2ca8:	701a      	strb	r2, [r3, #0]
	return rxBuffer[0] == byte ? 1 : 0;
    2caa:	ab03      	add	r3, sp, #12
    2cac:	7818      	ldrb	r0, [r3, #0]
    2cae:	4643      	mov	r3, r8
    2cb0:	1ac0      	subs	r0, r0, r3
    2cb2:	4243      	negs	r3, r0
    2cb4:	4158      	adcs	r0, r3
    2cb6:	b2c0      	uxtb	r0, r0
    2cb8:	e002      	b.n	2cc0 <S70FL01_verified_write+0x2f4>
	for(int i = 0; i < 500; i++);
	
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDSR)) != STATUS_OK);
    2cba:	4b08      	ldr	r3, [pc, #32]	; (2cdc <S70FL01_verified_write+0x310>)
    2cbc:	7018      	strb	r0, [r3, #0]
    2cbe:	e703      	b.n	2ac8 <S70FL01_verified_write+0xfc>
	port_pin_set_output_level(die, true);
	port_pin_set_output_level(S70FL01_EN, false);
	spi_disable(&spi_master_instance);
	spi_enabled = false;
	return rxBuffer[0] == byte ? 1 : 0;
}
    2cc0:	b008      	add	sp, #32
    2cc2:	bc1c      	pop	{r2, r3, r4}
    2cc4:	4690      	mov	r8, r2
    2cc6:	4699      	mov	r9, r3
    2cc8:	46a2      	mov	sl, r4
    2cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ccc:	200000cc 	.word	0x200000cc
    2cd0:	20001e34 	.word	0x20001e34
    2cd4:	40002800 	.word	0x40002800
    2cd8:	0000ffff 	.word	0x0000ffff
    2cdc:	20001e9e 	.word	0x20001e9e
    2ce0:	00003475 	.word	0x00003475
    2ce4:	00003581 	.word	0x00003581

00002ce8 <configure_SP1ML>:
/* @brief configure_SP1ML configures the sp1ml radio module including the SAM L21 USART module
/* @params none
/* @returns none
/************************************************************************/
void configure_SP1ML(void)
{
    2ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cea:	4657      	mov	r7, sl
    2cec:	464e      	mov	r6, r9
    2cee:	4645      	mov	r5, r8
    2cf0:	b4e0      	push	{r5, r6, r7}
    2cf2:	b082      	sub	sp, #8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2cf4:	ad01      	add	r5, sp, #4
    2cf6:	2380      	movs	r3, #128	; 0x80
    2cf8:	702b      	strb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2cfa:	2400      	movs	r4, #0
    2cfc:	2600      	movs	r6, #0
    2cfe:	70ec      	strb	r4, [r5, #3]
	// Configure the extra pins needed like the enable pin, the mode pin, and the shutown pin
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2d00:	3b7f      	subs	r3, #127	; 0x7f
    2d02:	4698      	mov	r8, r3
    2d04:	706b      	strb	r3, [r5, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
    2d06:	2702      	movs	r7, #2
    2d08:	70af      	strb	r7, [r5, #2]

	// Enable
 	system_pinmux_pin_set_config(SP1ML_EN_PIN, &config_pinmux);
    2d0a:	201b      	movs	r0, #27
    2d0c:	1c29      	adds	r1, r5, #0
    2d0e:	4b36      	ldr	r3, [pc, #216]	; (2de8 <configure_SP1ML+0x100>)
    2d10:	469a      	mov	sl, r3
    2d12:	4798      	blx	r3
    2d14:	4b35      	ldr	r3, [pc, #212]	; (2dec <configure_SP1ML+0x104>)
    2d16:	4699      	mov	r9, r3
    2d18:	2380      	movs	r3, #128	; 0x80
    2d1a:	051b      	lsls	r3, r3, #20
    2d1c:	464a      	mov	r2, r9
    2d1e:	6153      	str	r3, [r2, #20]
 	port_pin_set_output_level(SP1ML_EN_PIN, false);
	
	// Mode 0
	system_pinmux_pin_set_config(SP1ML_MODE_PIN, &config_pinmux);
    2d20:	2001      	movs	r0, #1
    2d22:	1c29      	adds	r1, r5, #0
    2d24:	47d0      	blx	sl
    2d26:	464b      	mov	r3, r9
    2d28:	615f      	str	r7, [r3, #20]
	port_pin_set_output_level(SP1ML_MODE_PIN, false);

	// SHDN
	system_pinmux_pin_set_config(SP1ML_SHDN_PIN, &config_pinmux);
    2d2a:	2002      	movs	r0, #2
    2d2c:	1c29      	adds	r1, r5, #0
    2d2e:	47d0      	blx	sl
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2d30:	2304      	movs	r3, #4
    2d32:	464a      	mov	r2, r9
    2d34:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2d36:	4b2e      	ldr	r3, [pc, #184]	; (2df0 <configure_SP1ML+0x108>)
    2d38:	2280      	movs	r2, #128	; 0x80
    2d3a:	05d2      	lsls	r2, r2, #23
    2d3c:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2d3e:	605c      	str	r4, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2d40:	22ff      	movs	r2, #255	; 0xff
    2d42:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2d44:	729c      	strb	r4, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2d46:	72dc      	strb	r4, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2d48:	3adb      	subs	r2, #219	; 0xdb
    2d4a:	4641      	mov	r1, r8
    2d4c:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    2d4e:	3201      	adds	r2, #1
    2d50:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    2d52:	3201      	adds	r2, #1
    2d54:	549c      	strb	r4, [r3, r2]
	config->use_external_clock = false;
    2d56:	3201      	adds	r2, #1
    2d58:	549c      	strb	r4, [r3, r2]
	config->ext_clock_freq   = 0;
    2d5a:	629c      	str	r4, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2d5c:	3205      	adds	r2, #5
    2d5e:	549c      	strb	r4, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2d60:	615c      	str	r4, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2d62:	821c      	strh	r4, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2d64:	2200      	movs	r2, #0
    2d66:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2d68:	761e      	strb	r6, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2d6a:	771e      	strb	r6, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2d6c:	765e      	strb	r6, [r3, #25]
	config->receive_pulse_length                    = 19;
    2d6e:	2213      	movs	r2, #19
    2d70:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2d72:	775e      	strb	r6, [r3, #29]
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	// Configure SAM L21 USART to talk to the SP1ML (no parity, 1 stop bit, lsb first, 8 bit data)
	usart_get_config_defaults(&config_usart);
	config_usart.generator_source = GCLK_GENERATOR_2;
    2d74:	321a      	adds	r2, #26
    2d76:	549f      	strb	r7, [r3, r2]
	config_usart.run_in_standby = false;
	config_usart.baudrate = 115200;
    2d78:	22e1      	movs	r2, #225	; 0xe1
    2d7a:	0252      	lsls	r2, r2, #9
    2d7c:	621a      	str	r2, [r3, #32]
	config_usart.parity = USART_PARITY_NONE;
	config_usart.stopbits = USART_STOPBITS_1;
	config_usart.data_order = USART_DATAORDER_LSB;
	config_usart.character_size = USART_CHARACTER_SIZE_8BIT;
	// RXPO PAD03 TXPO PAD02
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    2d7e:	22c4      	movs	r2, #196	; 0xc4
    2d80:	0392      	lsls	r2, r2, #14
    2d82:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    2d84:	2201      	movs	r2, #1
    2d86:	4252      	negs	r2, r2
    2d88:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    2d8a:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA06D_SERCOM0_PAD2;
    2d8c:	4a19      	ldr	r2, [pc, #100]	; (2df4 <configure_SP1ML+0x10c>)
    2d8e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    2d90:	4a19      	ldr	r2, [pc, #100]	; (2df8 <configure_SP1ML+0x110>)
    2d92:	63da      	str	r2, [r3, #60]	; 0x3c
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
    2d94:	4d19      	ldr	r5, [pc, #100]	; (2dfc <configure_SP1ML+0x114>)
    2d96:	1c1c      	adds	r4, r3, #0
    2d98:	4e19      	ldr	r6, [pc, #100]	; (2e00 <configure_SP1ML+0x118>)
    2d9a:	1c28      	adds	r0, r5, #0
    2d9c:	2184      	movs	r1, #132	; 0x84
    2d9e:	05c9      	lsls	r1, r1, #23
    2da0:	1c22      	adds	r2, r4, #0
    2da2:	47b0      	blx	r6
    2da4:	4b17      	ldr	r3, [pc, #92]	; (2e04 <configure_SP1ML+0x11c>)
    2da6:	7018      	strb	r0, [r3, #0]
    2da8:	2800      	cmp	r0, #0
    2daa:	d1f6      	bne.n	2d9a <configure_SP1ML+0xb2>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2dac:	4b13      	ldr	r3, [pc, #76]	; (2dfc <configure_SP1ML+0x114>)
    2dae:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2db0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2db2:	2b00      	cmp	r3, #0
    2db4:	d1fc      	bne.n	2db0 <configure_SP1ML+0xc8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2db6:	6811      	ldr	r1, [r2, #0]
    2db8:	3302      	adds	r3, #2
    2dba:	430b      	orrs	r3, r1
    2dbc:	6013      	str	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2dbe:	2204      	movs	r2, #4
    2dc0:	4b0a      	ldr	r3, [pc, #40]	; (2dec <configure_SP1ML+0x104>)
    2dc2:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2dc4:	4b0d      	ldr	r3, [pc, #52]	; (2dfc <configure_SP1ML+0x114>)
    2dc6:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2dc8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d1fc      	bne.n	2dc8 <configure_SP1ML+0xe0>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2dce:	6813      	ldr	r3, [r2, #0]
    2dd0:	2102      	movs	r1, #2
    2dd2:	438b      	bics	r3, r1
    2dd4:	6013      	str	r3, [r2, #0]
	// Set the shutdown pin low so we save power (even though the module is off)
	port_pin_set_output_level(SP1ML_SHDN_PIN, false);
	
	// Disable the USART module again to save power
	usart_disable(&usart_instance);
	usart_enabled = false;
    2dd6:	2200      	movs	r2, #0
    2dd8:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <configure_SP1ML+0x120>)
    2dda:	701a      	strb	r2, [r3, #0]
}
    2ddc:	b002      	add	sp, #8
    2dde:	bc1c      	pop	{r2, r3, r4}
    2de0:	4690      	mov	r8, r2
    2de2:	4699      	mov	r9, r3
    2de4:	46a2      	mov	sl, r4
    2de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de8:	00004405 	.word	0x00004405
    2dec:	40002800 	.word	0x40002800
    2df0:	20001c38 	.word	0x20001c38
    2df4:	00060003 	.word	0x00060003
    2df8:	00070003 	.word	0x00070003
    2dfc:	200000c0 	.word	0x200000c0
    2e00:	00002e0d 	.word	0x00002e0d
    2e04:	20001e9e 	.word	0x20001e9e
    2e08:	20001c34 	.word	0x20001c34

00002e0c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e0e:	465f      	mov	r7, fp
    2e10:	4656      	mov	r6, sl
    2e12:	464d      	mov	r5, r9
    2e14:	4644      	mov	r4, r8
    2e16:	b4f0      	push	{r4, r5, r6, r7}
    2e18:	b091      	sub	sp, #68	; 0x44
    2e1a:	1c06      	adds	r6, r0, #0
    2e1c:	1c0c      	adds	r4, r1, #0
    2e1e:	1c15      	adds	r5, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2e20:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2e22:	1c08      	adds	r0, r1, #0
    2e24:	4bb3      	ldr	r3, [pc, #716]	; (30f4 <usart_init+0x2e8>)
    2e26:	4798      	blx	r3
    2e28:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
    2e2a:	2a05      	cmp	r2, #5
    2e2c:	d003      	beq.n	2e36 <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2e2e:	1c07      	adds	r7, r0, #0
    2e30:	3712      	adds	r7, #18
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2e32:	1c03      	adds	r3, r0, #0
    2e34:	e001      	b.n	2e3a <usart_init+0x2e>
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    2e36:	2718      	movs	r7, #24
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    2e38:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2e3a:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2e3c:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2e3e:	07c9      	lsls	r1, r1, #31
    2e40:	d500      	bpl.n	2e44 <usart_init+0x38>
    2e42:	e150      	b.n	30e6 <usart_init+0x2da>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2e44:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2e46:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2e48:	0789      	lsls	r1, r1, #30
    2e4a:	d500      	bpl.n	2e4e <usart_init+0x42>
    2e4c:	e14b      	b.n	30e6 <usart_init+0x2da>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
    2e4e:	2a05      	cmp	r2, #5
    2e50:	d106      	bne.n	2e60 <usart_init+0x54>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    2e52:	49a9      	ldr	r1, [pc, #676]	; (30f8 <usart_init+0x2ec>)
    2e54:	6a0a      	ldr	r2, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    2e56:	381b      	subs	r0, #27
    2e58:	4098      	lsls	r0, r3
    2e5a:	4310      	orrs	r0, r2
    2e5c:	6208      	str	r0, [r1, #32]
    2e5e:	e005      	b.n	2e6c <usart_init+0x60>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    2e60:	49a5      	ldr	r1, [pc, #660]	; (30f8 <usart_init+0x2ec>)
    2e62:	69ca      	ldr	r2, [r1, #28]
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    2e64:	2001      	movs	r0, #1
    2e66:	4098      	lsls	r0, r3
    2e68:	4310      	orrs	r0, r2
    2e6a:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2e6c:	a90f      	add	r1, sp, #60	; 0x3c
    2e6e:	232d      	movs	r3, #45	; 0x2d
    2e70:	4698      	mov	r8, r3
    2e72:	5ceb      	ldrb	r3, [r5, r3]
    2e74:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2e76:	b2ff      	uxtb	r7, r7
    2e78:	1c38      	adds	r0, r7, #0
    2e7a:	4ba0      	ldr	r3, [pc, #640]	; (30fc <usart_init+0x2f0>)
    2e7c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2e7e:	1c38      	adds	r0, r7, #0
    2e80:	4b9f      	ldr	r3, [pc, #636]	; (3100 <usart_init+0x2f4>)
    2e82:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2e84:	4643      	mov	r3, r8
    2e86:	5ce8      	ldrb	r0, [r5, r3]
    2e88:	2100      	movs	r1, #0
    2e8a:	4b9e      	ldr	r3, [pc, #632]	; (3104 <usart_init+0x2f8>)
    2e8c:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2e8e:	7aeb      	ldrb	r3, [r5, #11]
    2e90:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2e92:	2324      	movs	r3, #36	; 0x24
    2e94:	5ceb      	ldrb	r3, [r5, r3]
    2e96:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2e98:	2325      	movs	r3, #37	; 0x25
    2e9a:	5ceb      	ldrb	r3, [r5, r3]
    2e9c:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    2e9e:	7eeb      	ldrb	r3, [r5, #27]
    2ea0:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2ea2:	7f2b      	ldrb	r3, [r5, #28]
    2ea4:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ea6:	6833      	ldr	r3, [r6, #0]
    2ea8:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2eaa:	1c18      	adds	r0, r3, #0
    2eac:	4b91      	ldr	r3, [pc, #580]	; (30f4 <usart_init+0x2e8>)
    2eae:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2eb0:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2eb2:	2200      	movs	r2, #0
    2eb4:	230e      	movs	r3, #14
    2eb6:	a906      	add	r1, sp, #24
    2eb8:	468c      	mov	ip, r1
    2eba:	4463      	add	r3, ip
    2ebc:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    2ebe:	8a2b      	ldrh	r3, [r5, #16]
    2ec0:	4699      	mov	r9, r3
    2ec2:	2380      	movs	r3, #128	; 0x80
    2ec4:	01db      	lsls	r3, r3, #7
    2ec6:	4599      	cmp	r9, r3
    2ec8:	d019      	beq.n	2efe <usart_init+0xf2>
    2eca:	d804      	bhi.n	2ed6 <usart_init+0xca>
    2ecc:	2380      	movs	r3, #128	; 0x80
    2ece:	019b      	lsls	r3, r3, #6
    2ed0:	4599      	cmp	r9, r3
    2ed2:	d00a      	beq.n	2eea <usart_init+0xde>
    2ed4:	e0e8      	b.n	30a8 <usart_init+0x29c>
    2ed6:	23c0      	movs	r3, #192	; 0xc0
    2ed8:	01db      	lsls	r3, r3, #7
    2eda:	4599      	cmp	r9, r3
    2edc:	d00a      	beq.n	2ef4 <usart_init+0xe8>
    2ede:	2380      	movs	r3, #128	; 0x80
    2ee0:	021b      	lsls	r3, r3, #8
    2ee2:	4599      	cmp	r9, r3
    2ee4:	d100      	bne.n	2ee8 <usart_init+0xdc>
    2ee6:	e0e4      	b.n	30b2 <usart_init+0x2a6>
    2ee8:	e0de      	b.n	30a8 <usart_init+0x29c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2eea:	2310      	movs	r3, #16
    2eec:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2eee:	3b0f      	subs	r3, #15
    2ef0:	9307      	str	r3, [sp, #28]
    2ef2:	e0e2      	b.n	30ba <usart_init+0x2ae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2ef4:	2308      	movs	r3, #8
    2ef6:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2ef8:	3b07      	subs	r3, #7
    2efa:	9307      	str	r3, [sp, #28]
    2efc:	e0dd      	b.n	30ba <usart_init+0x2ae>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2efe:	682b      	ldr	r3, [r5, #0]
    2f00:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    2f02:	68eb      	ldr	r3, [r5, #12]
    2f04:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2f06:	696b      	ldr	r3, [r5, #20]
    2f08:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2f0a:	7e2b      	ldrb	r3, [r5, #24]
    2f0c:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2f0e:	2326      	movs	r3, #38	; 0x26
    2f10:	5ceb      	ldrb	r3, [r5, r3]
    2f12:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2f14:	686a      	ldr	r2, [r5, #4]
    2f16:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2f18:	2a00      	cmp	r2, #0
    2f1a:	d016      	beq.n	2f4a <usart_init+0x13e>
    2f1c:	2380      	movs	r3, #128	; 0x80
    2f1e:	055b      	lsls	r3, r3, #21
    2f20:	429a      	cmp	r2, r3
    2f22:	d139      	bne.n	2f98 <usart_init+0x18c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2f24:	2327      	movs	r3, #39	; 0x27
    2f26:	5ceb      	ldrb	r3, [r5, r3]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d139      	bne.n	2fa0 <usart_init+0x194>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2f2c:	6a2b      	ldr	r3, [r5, #32]
    2f2e:	4698      	mov	r8, r3
    2f30:	b2c0      	uxtb	r0, r0
    2f32:	4b75      	ldr	r3, [pc, #468]	; (3108 <usart_init+0x2fc>)
    2f34:	4798      	blx	r3
    2f36:	1c01      	adds	r1, r0, #0
    2f38:	4640      	mov	r0, r8
    2f3a:	220e      	movs	r2, #14
    2f3c:	ab06      	add	r3, sp, #24
    2f3e:	469c      	mov	ip, r3
    2f40:	4462      	add	r2, ip
    2f42:	4b72      	ldr	r3, [pc, #456]	; (310c <usart_init+0x300>)
    2f44:	4798      	blx	r3
    2f46:	1c03      	adds	r3, r0, #0
    2f48:	e027      	b.n	2f9a <usart_init+0x18e>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2f4a:	2308      	movs	r3, #8
    2f4c:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2f4e:	2300      	movs	r3, #0
    2f50:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2f52:	2327      	movs	r3, #39	; 0x27
    2f54:	5ceb      	ldrb	r3, [r5, r3]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d00c      	beq.n	2f74 <usart_init+0x168>
				status_code =
    2f5a:	4643      	mov	r3, r8
    2f5c:	9300      	str	r3, [sp, #0]
    2f5e:	6a28      	ldr	r0, [r5, #32]
    2f60:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    2f62:	220e      	movs	r2, #14
    2f64:	ab06      	add	r3, sp, #24
    2f66:	469c      	mov	ip, r3
    2f68:	4462      	add	r2, ip
    2f6a:	9b07      	ldr	r3, [sp, #28]
    2f6c:	4f68      	ldr	r7, [pc, #416]	; (3110 <usart_init+0x304>)
    2f6e:	47b8      	blx	r7
    2f70:	1c03      	adds	r3, r0, #0
    2f72:	e012      	b.n	2f9a <usart_init+0x18e>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2f74:	6a2b      	ldr	r3, [r5, #32]
    2f76:	1c1f      	adds	r7, r3, #0
    2f78:	b2c0      	uxtb	r0, r0
    2f7a:	4b63      	ldr	r3, [pc, #396]	; (3108 <usart_init+0x2fc>)
    2f7c:	4798      	blx	r3
    2f7e:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2f80:	4643      	mov	r3, r8
    2f82:	9300      	str	r3, [sp, #0]
    2f84:	1c38      	adds	r0, r7, #0
    2f86:	220e      	movs	r2, #14
    2f88:	ab06      	add	r3, sp, #24
    2f8a:	469c      	mov	ip, r3
    2f8c:	4462      	add	r2, ip
    2f8e:	9b07      	ldr	r3, [sp, #28]
    2f90:	4f5f      	ldr	r7, [pc, #380]	; (3110 <usart_init+0x304>)
    2f92:	47b8      	blx	r7
    2f94:	1c03      	adds	r3, r0, #0
    2f96:	e000      	b.n	2f9a <usart_init+0x18e>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2f98:	2300      	movs	r3, #0
    2f9a:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2f9c:	d000      	beq.n	2fa0 <usart_init+0x194>
    2f9e:	e0a2      	b.n	30e6 <usart_init+0x2da>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    2fa0:	7e6b      	ldrb	r3, [r5, #25]
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d002      	beq.n	2fac <usart_init+0x1a0>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2fa6:	7eab      	ldrb	r3, [r5, #26]
    2fa8:	4652      	mov	r2, sl
    2faa:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2fac:	6832      	ldr	r2, [r6, #0]
    2fae:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2fb0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d1fc      	bne.n	2fb0 <usart_init+0x1a4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2fb6:	330e      	adds	r3, #14
    2fb8:	aa06      	add	r2, sp, #24
    2fba:	4694      	mov	ip, r2
    2fbc:	4463      	add	r3, ip
    2fbe:	881b      	ldrh	r3, [r3, #0]
    2fc0:	4652      	mov	r2, sl
    2fc2:	8193      	strh	r3, [r2, #12]
    2fc4:	9b02      	ldr	r3, [sp, #8]
    2fc6:	465a      	mov	r2, fp
    2fc8:	4313      	orrs	r3, r2
    2fca:	9a03      	ldr	r2, [sp, #12]
    2fcc:	4313      	orrs	r3, r2
    2fce:	433b      	orrs	r3, r7
    2fd0:	464a      	mov	r2, r9
    2fd2:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2fd4:	9a04      	ldr	r2, [sp, #16]
    2fd6:	0212      	lsls	r2, r2, #8
    2fd8:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2fda:	9a05      	ldr	r2, [sp, #20]
    2fdc:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    2fde:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    2fe0:	2327      	movs	r3, #39	; 0x27
    2fe2:	5ceb      	ldrb	r3, [r5, r3]
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d101      	bne.n	2fec <usart_init+0x1e0>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2fe8:	3304      	adds	r3, #4
    2fea:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2fec:	7f2b      	ldrb	r3, [r5, #28]
    2fee:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2ff0:	7e6a      	ldrb	r2, [r5, #25]
    2ff2:	0293      	lsls	r3, r2, #10
    2ff4:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2ff6:	7f6a      	ldrb	r2, [r5, #29]
    2ff8:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2ffa:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2ffc:	2224      	movs	r2, #36	; 0x24
    2ffe:	5caa      	ldrb	r2, [r5, r2]
    3000:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3002:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3004:	2225      	movs	r2, #37	; 0x25
    3006:	5caa      	ldrb	r2, [r5, r2]
    3008:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    300a:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    300c:	7ae9      	ldrb	r1, [r5, #11]
    300e:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3010:	892b      	ldrh	r3, [r5, #8]
    3012:	2bff      	cmp	r3, #255	; 0xff
    3014:	d004      	beq.n	3020 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3016:	2280      	movs	r2, #128	; 0x80
    3018:	0452      	lsls	r2, r2, #17
    301a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    301c:	4319      	orrs	r1, r3
    301e:	e005      	b.n	302c <usart_init+0x220>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3020:	7eeb      	ldrb	r3, [r5, #27]
    3022:	2b00      	cmp	r3, #0
    3024:	d002      	beq.n	302c <usart_init+0x220>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3026:	2380      	movs	r3, #128	; 0x80
    3028:	04db      	lsls	r3, r3, #19
    302a:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    302c:	232c      	movs	r3, #44	; 0x2c
    302e:	5ceb      	ldrb	r3, [r5, r3]
    3030:	2b00      	cmp	r3, #0
    3032:	d103      	bne.n	303c <usart_init+0x230>
    3034:	4b37      	ldr	r3, [pc, #220]	; (3114 <usart_init+0x308>)
    3036:	789b      	ldrb	r3, [r3, #2]
    3038:	079b      	lsls	r3, r3, #30
    303a:	d501      	bpl.n	3040 <usart_init+0x234>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    303c:	2380      	movs	r3, #128	; 0x80
    303e:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3040:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3042:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3044:	2b00      	cmp	r3, #0
    3046:	d1fc      	bne.n	3042 <usart_init+0x236>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3048:	4653      	mov	r3, sl
    304a:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    304c:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    304e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3050:	2b00      	cmp	r3, #0
    3052:	d1fc      	bne.n	304e <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3054:	4653      	mov	r3, sl
    3056:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3058:	ab0e      	add	r3, sp, #56	; 0x38
    305a:	2280      	movs	r2, #128	; 0x80
    305c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    305e:	2200      	movs	r2, #0
    3060:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3062:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3064:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    3066:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    3068:	930a      	str	r3, [sp, #40]	; 0x28
    306a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    306c:	930b      	str	r3, [sp, #44]	; 0x2c
    306e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3070:	930c      	str	r3, [sp, #48]	; 0x30
    3072:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    3074:	9302      	str	r3, [sp, #8]
    3076:	930d      	str	r3, [sp, #52]	; 0x34
    3078:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    307a:	ad0e      	add	r5, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    307c:	4e26      	ldr	r6, [pc, #152]	; (3118 <usart_init+0x30c>)
    307e:	b2f9      	uxtb	r1, r7
    3080:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3082:	aa0a      	add	r2, sp, #40	; 0x28
    3084:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3086:	2800      	cmp	r0, #0
    3088:	d102      	bne.n	3090 <usart_init+0x284>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    308a:	1c20      	adds	r0, r4, #0
    308c:	4b23      	ldr	r3, [pc, #140]	; (311c <usart_init+0x310>)
    308e:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3090:	1c43      	adds	r3, r0, #1
    3092:	d004      	beq.n	309e <usart_init+0x292>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3094:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3096:	0c00      	lsrs	r0, r0, #16
    3098:	b2c0      	uxtb	r0, r0
    309a:	1c29      	adds	r1, r5, #0
    309c:	47b0      	blx	r6
    309e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    30a0:	2f04      	cmp	r7, #4
    30a2:	d1ec      	bne.n	307e <usart_init+0x272>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    30a4:	2000      	movs	r0, #0
    30a6:	e01e      	b.n	30e6 <usart_init+0x2da>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    30a8:	2310      	movs	r3, #16
    30aa:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    30ac:	2300      	movs	r3, #0
    30ae:	9307      	str	r3, [sp, #28]
    30b0:	e003      	b.n	30ba <usart_init+0x2ae>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    30b2:	2303      	movs	r3, #3
    30b4:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    30b6:	2300      	movs	r3, #0
    30b8:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    30ba:	682b      	ldr	r3, [r5, #0]
    30bc:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    30be:	68eb      	ldr	r3, [r5, #12]
    30c0:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    30c2:	696b      	ldr	r3, [r5, #20]
    30c4:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    30c6:	7e2b      	ldrb	r3, [r5, #24]
    30c8:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    30ca:	2326      	movs	r3, #38	; 0x26
    30cc:	5ceb      	ldrb	r3, [r5, r3]
    30ce:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    30d0:	686a      	ldr	r2, [r5, #4]
    30d2:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    30d4:	2a00      	cmp	r2, #0
    30d6:	d100      	bne.n	30da <usart_init+0x2ce>
    30d8:	e73b      	b.n	2f52 <usart_init+0x146>
    30da:	2380      	movs	r3, #128	; 0x80
    30dc:	055b      	lsls	r3, r3, #21
    30de:	429a      	cmp	r2, r3
    30e0:	d100      	bne.n	30e4 <usart_init+0x2d8>
    30e2:	e71f      	b.n	2f24 <usart_init+0x118>
    30e4:	e75c      	b.n	2fa0 <usart_init+0x194>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    30e6:	b011      	add	sp, #68	; 0x44
    30e8:	bc3c      	pop	{r2, r3, r4, r5}
    30ea:	4690      	mov	r8, r2
    30ec:	4699      	mov	r9, r3
    30ee:	46a2      	mov	sl, r4
    30f0:	46ab      	mov	fp, r5
    30f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f4:	00003b35 	.word	0x00003b35
    30f8:	40000400 	.word	0x40000400
    30fc:	00004309 	.word	0x00004309
    3100:	000042a1 	.word	0x000042a1
    3104:	0000397d 	.word	0x0000397d
    3108:	0000432d 	.word	0x0000432d
    310c:	0000378d 	.word	0x0000378d
    3110:	000037b5 	.word	0x000037b5
    3114:	41002000 	.word	0x41002000
    3118:	00004405 	.word	0x00004405
    311c:	000039c9 	.word	0x000039c9

00003120 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3120:	b5f0      	push	{r4, r5, r6, r7, lr}
    3122:	465f      	mov	r7, fp
    3124:	4656      	mov	r6, sl
    3126:	464d      	mov	r5, r9
    3128:	4644      	mov	r4, r8
    312a:	b4f0      	push	{r4, r5, r6, r7}
    312c:	b08b      	sub	sp, #44	; 0x2c
    312e:	1c06      	adds	r6, r0, #0
    3130:	1c0d      	adds	r5, r1, #0
    3132:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3134:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3136:	680b      	ldr	r3, [r1, #0]
    3138:	079b      	lsls	r3, r3, #30
    313a:	d400      	bmi.n	313e <spi_init+0x1e>
    313c:	e0ab      	b.n	3296 <spi_init+0x176>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    313e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3140:	9305      	str	r3, [sp, #20]
    3142:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3144:	9306      	str	r3, [sp, #24]
    3146:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3148:	9307      	str	r3, [sp, #28]
    314a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    314c:	9308      	str	r3, [sp, #32]
    314e:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    3150:	231f      	movs	r3, #31
    3152:	4699      	mov	r9, r3
    3154:	b2f9      	uxtb	r1, r7
    3156:	00bb      	lsls	r3, r7, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3158:	aa05      	add	r2, sp, #20
    315a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    315c:	2800      	cmp	r0, #0
    315e:	d102      	bne.n	3166 <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3160:	1c28      	adds	r0, r5, #0
    3162:	4bb9      	ldr	r3, [pc, #740]	; (3448 <spi_init+0x328>)
    3164:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    3166:	1c43      	adds	r3, r0, #1
    3168:	d02b      	beq.n	31c2 <spi_init+0xa2>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    316a:	0401      	lsls	r1, r0, #16
    316c:	0c0b      	lsrs	r3, r1, #16
    316e:	469b      	mov	fp, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    3170:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3172:	b2c3      	uxtb	r3, r0
    3174:	469c      	mov	ip, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3176:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3178:	0602      	lsls	r2, r0, #24
    317a:	d405      	bmi.n	3188 <spi_init+0x68>
		return &(ports[port_index]->Group[group_index]);
    317c:	4663      	mov	r3, ip
    317e:	095b      	lsrs	r3, r3, #5
    3180:	01db      	lsls	r3, r3, #7
    3182:	4ab2      	ldr	r2, [pc, #712]	; (344c <spi_init+0x32c>)
    3184:	4690      	mov	r8, r2
    3186:	4443      	add	r3, r8
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    3188:	464a      	mov	r2, r9
    318a:	4660      	mov	r0, ip
    318c:	4002      	ands	r2, r0

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    318e:	1898      	adds	r0, r3, r2
    3190:	3040      	adds	r0, #64	; 0x40
    3192:	7800      	ldrb	r0, [r0, #0]
    3194:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    3196:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3198:	4651      	mov	r1, sl
    319a:	07c9      	lsls	r1, r1, #31
    319c:	d50b      	bpl.n	31b6 <spi_init+0x96>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    319e:	0852      	lsrs	r2, r2, #1
    31a0:	189b      	adds	r3, r3, r2
    31a2:	3330      	adds	r3, #48	; 0x30
    31a4:	7818      	ldrb	r0, [r3, #0]
    31a6:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    31a8:	4663      	mov	r3, ip
    31aa:	07db      	lsls	r3, r3, #31
    31ac:	d501      	bpl.n	31b2 <spi_init+0x92>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    31ae:	0900      	lsrs	r0, r0, #4
    31b0:	e001      	b.n	31b6 <spi_init+0x96>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    31b2:	230f      	movs	r3, #15
    31b4:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    31b6:	4583      	cmp	fp, r0
    31b8:	d003      	beq.n	31c2 <spi_init+0xa2>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    31ba:	2300      	movs	r3, #0
    31bc:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    31be:	201c      	movs	r0, #28
    31c0:	e13b      	b.n	343a <spi_init+0x31a>
    31c2:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    31c4:	2f04      	cmp	r7, #4
    31c6:	d1c5      	bne.n	3154 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    31c8:	2011      	movs	r0, #17
    31ca:	4ba1      	ldr	r3, [pc, #644]	; (3450 <spi_init+0x330>)
    31cc:	4798      	blx	r3
    31ce:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    31d0:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    31d2:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    31d4:	2b01      	cmp	r3, #1
    31d6:	d111      	bne.n	31fc <spi_init+0xdc>
		enum status_code error_code = _sercom_get_sync_baud_val(
    31d8:	69a0      	ldr	r0, [r4, #24]
    31da:	aa04      	add	r2, sp, #16
    31dc:	4b9d      	ldr	r3, [pc, #628]	; (3454 <spi_init+0x334>)
    31de:	4798      	blx	r3
    31e0:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    31e2:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    31e4:	2b00      	cmp	r3, #0
    31e6:	d000      	beq.n	31ea <spi_init+0xca>
    31e8:	e127      	b.n	343a <spi_init+0x31a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    31ea:	7b2b      	ldrb	r3, [r5, #12]
    31ec:	b2db      	uxtb	r3, r3
    31ee:	aa04      	add	r2, sp, #16
    31f0:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    31f2:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    31f4:	429a      	cmp	r2, r3
    31f6:	d000      	beq.n	31fa <spi_init+0xda>
    31f8:	e11f      	b.n	343a <spi_init+0x31a>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    31fa:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    31fc:	7823      	ldrb	r3, [r4, #0]
    31fe:	4698      	mov	r8, r3
    3200:	2b00      	cmp	r3, #0
    3202:	d116      	bne.n	3232 <spi_init+0x112>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    3204:	69a3      	ldr	r3, [r4, #24]
    3206:	469c      	mov	ip, r3

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    3208:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    320a:	682a      	ldr	r2, [r5, #0]
		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    320c:	7fe1      	ldrb	r1, [r4, #31]
    320e:	0409      	lsls	r1, r1, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3210:	7fa0      	ldrb	r0, [r4, #30]
    3212:	4301      	orrs	r1, r0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
    3214:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    3216:	4291      	cmp	r1, r2
    3218:	d000      	beq.n	321c <spi_init+0xfc>
    321a:	e10e      	b.n	343a <spi_init+0x31a>
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
    321c:	2220      	movs	r2, #32
    321e:	5ca2      	ldrb	r2, [r4, r2]
    3220:	2a00      	cmp	r2, #0
    3222:	d001      	beq.n	3228 <spi_init+0x108>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3224:	2240      	movs	r2, #64	; 0x40
    3226:	4313      	orrs	r3, r2
    3228:	2208      	movs	r2, #8
    322a:	4661      	mov	r1, ip
    322c:	4311      	orrs	r1, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    322e:	430f      	orrs	r7, r1
    3230:	e000      	b.n	3234 <spi_init+0x114>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
    3232:	2300      	movs	r3, #0
    3234:	68a2      	ldr	r2, [r4, #8]
    3236:	6861      	ldr	r1, [r4, #4]
    3238:	430a      	orrs	r2, r1
    323a:	68e1      	ldr	r1, [r4, #12]
    323c:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    323e:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3240:	7c21      	ldrb	r1, [r4, #16]
    3242:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
    3244:	7c61      	ldrb	r1, [r4, #17]
    3246:	2900      	cmp	r1, #0
    3248:	d001      	beq.n	324e <spi_init+0x12e>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    324a:	2180      	movs	r1, #128	; 0x80
    324c:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    324e:	7ca1      	ldrb	r1, [r4, #18]
    3250:	2900      	cmp	r1, #0
    3252:	d002      	beq.n	325a <spi_init+0x13a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3254:	2180      	movs	r1, #128	; 0x80
    3256:	0289      	lsls	r1, r1, #10
    3258:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    325a:	7ce1      	ldrb	r1, [r4, #19]
    325c:	2900      	cmp	r1, #0
    325e:	d002      	beq.n	3266 <spi_init+0x146>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3260:	2180      	movs	r1, #128	; 0x80
    3262:	0089      	lsls	r1, r1, #2
    3264:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3266:	7d21      	ldrb	r1, [r4, #20]
    3268:	2900      	cmp	r1, #0
    326a:	d002      	beq.n	3272 <spi_init+0x152>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    326c:	2180      	movs	r1, #128	; 0x80
    326e:	0189      	lsls	r1, r1, #6
    3270:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3272:	6828      	ldr	r0, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    3274:	2102      	movs	r1, #2
    3276:	430a      	orrs	r2, r1

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3278:	4282      	cmp	r2, r0
    327a:	d108      	bne.n	328e <spi_init+0x16e>
			spi_module->CTRLB.reg == ctrlb) {
    327c:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    327e:	429a      	cmp	r2, r3
    3280:	d105      	bne.n	328e <spi_init+0x16e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    3282:	4643      	mov	r3, r8
    3284:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    3286:	7c23      	ldrb	r3, [r4, #16]
    3288:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    328a:	2000      	movs	r0, #0
    328c:	e0d5      	b.n	343a <spi_init+0x31a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    328e:	2300      	movs	r3, #0
    3290:	6033      	str	r3, [r6, #0]

	return STATUS_ERR_DENIED;
    3292:	201c      	movs	r0, #28
    3294:	e0d1      	b.n	343a <spi_init+0x31a>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3296:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3298:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    329a:	07db      	lsls	r3, r3, #31
    329c:	d500      	bpl.n	32a0 <spi_init+0x180>
    329e:	e0cc      	b.n	343a <spi_init+0x31a>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    32a0:	1c08      	adds	r0, r1, #0
    32a2:	4b6d      	ldr	r3, [pc, #436]	; (3458 <spi_init+0x338>)
    32a4:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
    32a6:	2805      	cmp	r0, #5
    32a8:	d100      	bne.n	32ac <spi_init+0x18c>
    32aa:	e0be      	b.n	342a <spi_init+0x30a>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32ac:	2312      	movs	r3, #18
    32ae:	469c      	mov	ip, r3
    32b0:	4484      	add	ip, r0
    32b2:	496a      	ldr	r1, [pc, #424]	; (345c <spi_init+0x33c>)
    32b4:	69cb      	ldr	r3, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    32b6:	2201      	movs	r2, #1
    32b8:	4082      	lsls	r2, r0
    32ba:	1c10      	adds	r0, r2, #0
    32bc:	4318      	orrs	r0, r3
    32be:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    32c0:	a909      	add	r1, sp, #36	; 0x24
    32c2:	2724      	movs	r7, #36	; 0x24
    32c4:	5de3      	ldrb	r3, [r4, r7]
    32c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    32c8:	4663      	mov	r3, ip
    32ca:	466a      	mov	r2, sp
    32cc:	7113      	strb	r3, [r2, #4]
    32ce:	7913      	ldrb	r3, [r2, #4]
    32d0:	9301      	str	r3, [sp, #4]
    32d2:	1c18      	adds	r0, r3, #0
    32d4:	4b62      	ldr	r3, [pc, #392]	; (3460 <spi_init+0x340>)
    32d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    32d8:	9801      	ldr	r0, [sp, #4]
    32da:	4b62      	ldr	r3, [pc, #392]	; (3464 <spi_init+0x344>)
    32dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    32de:	5de0      	ldrb	r0, [r4, r7]
    32e0:	2100      	movs	r1, #0
    32e2:	4b61      	ldr	r3, [pc, #388]	; (3468 <spi_init+0x348>)
    32e4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    32e6:	7823      	ldrb	r3, [r4, #0]
    32e8:	2b01      	cmp	r3, #1
    32ea:	d103      	bne.n	32f4 <spi_init+0x1d4>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    32ec:	682a      	ldr	r2, [r5, #0]
    32ee:	330b      	adds	r3, #11
    32f0:	4313      	orrs	r3, r2
    32f2:	602b      	str	r3, [r5, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    32f4:	7823      	ldrb	r3, [r4, #0]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d103      	bne.n	3302 <spi_init+0x1e2>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    32fa:	682a      	ldr	r2, [r5, #0]
    32fc:	3308      	adds	r3, #8
    32fe:	4313      	orrs	r3, r2
    3300:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3302:	6833      	ldr	r3, [r6, #0]
    3304:	4699      	mov	r9, r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3306:	ab04      	add	r3, sp, #16
    3308:	2280      	movs	r2, #128	; 0x80
    330a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    330c:	2200      	movs	r2, #0
    330e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3310:	2101      	movs	r1, #1
    3312:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3314:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    3316:	7823      	ldrb	r3, [r4, #0]
    3318:	2b00      	cmp	r3, #0
    331a:	d101      	bne.n	3320 <spi_init+0x200>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    331c:	ab04      	add	r3, sp, #16
    331e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    3320:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3322:	9305      	str	r3, [sp, #20]
    3324:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3326:	9306      	str	r3, [sp, #24]
    3328:	6b23      	ldr	r3, [r4, #48]	; 0x30
    332a:	9307      	str	r3, [sp, #28]
    332c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    332e:	9308      	str	r3, [sp, #32]
    3330:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3332:	ad04      	add	r5, sp, #16
    3334:	b2f9      	uxtb	r1, r7
    3336:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3338:	aa05      	add	r2, sp, #20
    333a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    333c:	2800      	cmp	r0, #0
    333e:	d102      	bne.n	3346 <spi_init+0x226>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3340:	4648      	mov	r0, r9
    3342:	4b41      	ldr	r3, [pc, #260]	; (3448 <spi_init+0x328>)
    3344:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3346:	1c43      	adds	r3, r0, #1
    3348:	d005      	beq.n	3356 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    334a:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    334c:	0c00      	lsrs	r0, r0, #16
    334e:	b2c0      	uxtb	r0, r0
    3350:	1c29      	adds	r1, r5, #0
    3352:	4b46      	ldr	r3, [pc, #280]	; (346c <spi_init+0x34c>)
    3354:	4798      	blx	r3
    3356:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3358:	2f04      	cmp	r7, #4
    335a:	d1eb      	bne.n	3334 <spi_init+0x214>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    335c:	7823      	ldrb	r3, [r4, #0]
    335e:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    3360:	7c23      	ldrb	r3, [r4, #16]
    3362:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    3364:	7ca3      	ldrb	r3, [r4, #18]
    3366:	71f3      	strb	r3, [r6, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3368:	7d23      	ldrb	r3, [r4, #20]
    336a:	7233      	strb	r3, [r6, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    336c:	2200      	movs	r2, #0
    336e:	ab02      	add	r3, sp, #8
    3370:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3372:	7823      	ldrb	r3, [r4, #0]
    3374:	2b01      	cmp	r3, #1
    3376:	d115      	bne.n	33a4 <spi_init+0x284>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3378:	6830      	ldr	r0, [r6, #0]
    337a:	4b37      	ldr	r3, [pc, #220]	; (3458 <spi_init+0x338>)
    337c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    337e:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3380:	b2c0      	uxtb	r0, r0
    3382:	4b33      	ldr	r3, [pc, #204]	; (3450 <spi_init+0x330>)
    3384:	4798      	blx	r3
    3386:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3388:	69a0      	ldr	r0, [r4, #24]
    338a:	ab02      	add	r3, sp, #8
    338c:	1d9a      	adds	r2, r3, #6
    338e:	4b31      	ldr	r3, [pc, #196]	; (3454 <spi_init+0x334>)
    3390:	4798      	blx	r3
    3392:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3394:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3396:	2b00      	cmp	r3, #0
    3398:	d14f      	bne.n	343a <spi_init+0x31a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    339a:	ab02      	add	r3, sp, #8
    339c:	3306      	adds	r3, #6
    339e:	781b      	ldrb	r3, [r3, #0]
    33a0:	464a      	mov	r2, r9
    33a2:	7313      	strb	r3, [r2, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    33a4:	7823      	ldrb	r3, [r4, #0]
    33a6:	2b00      	cmp	r3, #0
    33a8:	d110      	bne.n	33cc <spi_init+0x2ac>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    33aa:	69a6      	ldr	r6, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    33ac:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    33ae:	464a      	mov	r2, r9
    33b0:	6a50      	ldr	r0, [r2, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    33b2:	7fe1      	ldrb	r1, [r4, #31]
    33b4:	0409      	lsls	r1, r1, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    33b6:	7fa5      	ldrb	r5, [r4, #30]
    33b8:	4329      	orrs	r1, r5

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    33ba:	4301      	orrs	r1, r0
    33bc:	6251      	str	r1, [r2, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    33be:	2220      	movs	r2, #32
    33c0:	5ca2      	ldrb	r2, [r4, r2]
    33c2:	2a00      	cmp	r2, #0
    33c4:	d004      	beq.n	33d0 <spi_init+0x2b0>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    33c6:	2140      	movs	r1, #64	; 0x40
    33c8:	430b      	orrs	r3, r1
    33ca:	e001      	b.n	33d0 <spi_init+0x2b0>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    33cc:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    33ce:	2600      	movs	r6, #0
    33d0:	68a2      	ldr	r2, [r4, #8]
    33d2:	6861      	ldr	r1, [r4, #4]
    33d4:	430a      	orrs	r2, r1
    33d6:	68e1      	ldr	r1, [r4, #12]
    33d8:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    33da:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
    33dc:	7c21      	ldrb	r1, [r4, #16]
    33de:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    33e0:	7c61      	ldrb	r1, [r4, #17]
    33e2:	2900      	cmp	r1, #0
    33e4:	d103      	bne.n	33ee <spi_init+0x2ce>
    33e6:	4922      	ldr	r1, [pc, #136]	; (3470 <spi_init+0x350>)
    33e8:	7889      	ldrb	r1, [r1, #2]
    33ea:	0789      	lsls	r1, r1, #30
    33ec:	d501      	bpl.n	33f2 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    33ee:	2180      	movs	r1, #128	; 0x80
    33f0:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    33f2:	7ca1      	ldrb	r1, [r4, #18]
    33f4:	2900      	cmp	r1, #0
    33f6:	d002      	beq.n	33fe <spi_init+0x2de>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    33f8:	2180      	movs	r1, #128	; 0x80
    33fa:	0289      	lsls	r1, r1, #10
    33fc:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    33fe:	7ce1      	ldrb	r1, [r4, #19]
    3400:	2900      	cmp	r1, #0
    3402:	d002      	beq.n	340a <spi_init+0x2ea>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3404:	2180      	movs	r1, #128	; 0x80
    3406:	0089      	lsls	r1, r1, #2
    3408:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    340a:	7d21      	ldrb	r1, [r4, #20]
    340c:	2900      	cmp	r1, #0
    340e:	d002      	beq.n	3416 <spi_init+0x2f6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3410:	2180      	movs	r1, #128	; 0x80
    3412:	0189      	lsls	r1, r1, #6
    3414:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3416:	4649      	mov	r1, r9
    3418:	6809      	ldr	r1, [r1, #0]
    341a:	430a      	orrs	r2, r1
    341c:	4649      	mov	r1, r9
    341e:	600a      	str	r2, [r1, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3420:	684a      	ldr	r2, [r1, #4]
    3422:	4313      	orrs	r3, r2
    3424:	604b      	str	r3, [r1, #4]

	return STATUS_OK;
    3426:	2000      	movs	r0, #0
    3428:	e007      	b.n	343a <spi_init+0x31a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    342a:	4a0c      	ldr	r2, [pc, #48]	; (345c <spi_init+0x33c>)
    342c:	6a11      	ldr	r1, [r2, #32]
    342e:	2302      	movs	r3, #2
    3430:	430b      	orrs	r3, r1
    3432:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    3434:	2318      	movs	r3, #24
    3436:	469c      	mov	ip, r3
    3438:	e742      	b.n	32c0 <spi_init+0x1a0>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    343a:	b00b      	add	sp, #44	; 0x2c
    343c:	bc3c      	pop	{r2, r3, r4, r5}
    343e:	4690      	mov	r8, r2
    3440:	4699      	mov	r9, r3
    3442:	46a2      	mov	sl, r4
    3444:	46ab      	mov	fp, r5
    3446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3448:	000039c9 	.word	0x000039c9
    344c:	40002800 	.word	0x40002800
    3450:	0000432d 	.word	0x0000432d
    3454:	0000378d 	.word	0x0000378d
    3458:	00003b35 	.word	0x00003b35
    345c:	40000400 	.word	0x40000400
    3460:	00004309 	.word	0x00004309
    3464:	000042a1 	.word	0x000042a1
    3468:	0000397d 	.word	0x0000397d
    346c:	00004405 	.word	0x00004405
    3470:	41002000 	.word	0x41002000

00003474 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    3474:	b5f0      	push	{r4, r5, r6, r7, lr}
    3476:	4657      	mov	r7, sl
    3478:	464e      	mov	r6, r9
    347a:	4645      	mov	r5, r8
    347c:	b4e0      	push	{r5, r6, r7}
    347e:	468c      	mov	ip, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3480:	2117      	movs	r1, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    3482:	2a00      	cmp	r2, #0
    3484:	d074      	beq.n	3570 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    3486:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    3488:	3105      	adds	r1, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    348a:	2c00      	cmp	r4, #0
    348c:	d070      	beq.n	3570 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_DENIED;
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    348e:	7941      	ldrb	r1, [r0, #5]
    3490:	2900      	cmp	r1, #0
    3492:	d105      	bne.n	34a0 <spi_read_buffer_wait+0x2c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3494:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3496:	7e0c      	ldrb	r4, [r1, #24]
    3498:	07a4      	lsls	r4, r4, #30
    349a:	d501      	bpl.n	34a0 <spi_read_buffer_wait+0x2c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    349c:	2402      	movs	r4, #2
    349e:	760c      	strb	r4, [r1, #24]
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    34a0:	2700      	movs	r7, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34a2:	2504      	movs	r5, #4

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    34a4:	4935      	ldr	r1, [pc, #212]	; (357c <spi_read_buffer_wait+0x108>)
    34a6:	4689      	mov	r9, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    34a8:	2102      	movs	r1, #2
    34aa:	4688      	mov	r8, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    34ac:	3901      	subs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    34ae:	05db      	lsls	r3, r3, #23
    34b0:	0ddb      	lsrs	r3, r3, #23
    34b2:	469a      	mov	sl, r3
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    34b4:	7944      	ldrb	r4, [r0, #5]
    34b6:	2c01      	cmp	r4, #1
    34b8:	d156      	bne.n	3568 <spi_read_buffer_wait+0xf4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34ba:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    34bc:	7e34      	ldrb	r4, [r6, #24]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    34be:	420c      	tst	r4, r1
    34c0:	d0fc      	beq.n	34bc <spi_read_buffer_wait+0x48>
    34c2:	7e34      	ldrb	r4, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    34c4:	420c      	tst	r4, r1
    34c6:	d014      	beq.n	34f2 <spi_read_buffer_wait+0x7e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    34c8:	4653      	mov	r3, sl
    34ca:	62b3      	str	r3, [r6, #40]	; 0x28
    34cc:	e04c      	b.n	3568 <spi_read_buffer_wait+0xf4>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34ce:	7e1e      	ldrb	r6, [r3, #24]

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    34d0:	422e      	tst	r6, r5
    34d2:	d102      	bne.n	34da <spi_read_buffer_wait+0x66>
    34d4:	3c01      	subs	r4, #1
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    34d6:	2c00      	cmp	r4, #0
    34d8:	d1f9      	bne.n	34ce <spi_read_buffer_wait+0x5a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34da:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    34dc:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    34de:	4643      	mov	r3, r8
    34e0:	421e      	tst	r6, r3
    34e2:	d003      	beq.n	34ec <spi_read_buffer_wait+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    34e4:	2302      	movs	r3, #2
    34e6:	7623      	strb	r3, [r4, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    34e8:	2104      	movs	r1, #4
    34ea:	e041      	b.n	3570 <spi_read_buffer_wait+0xfc>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34ec:	7e24      	ldrb	r4, [r4, #24]
			}

			if (!spi_is_ready_to_read(module)) {
    34ee:	422c      	tst	r4, r5
    34f0:	d032      	beq.n	3558 <spi_read_buffer_wait+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34f2:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34f4:	7e34      	ldrb	r4, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    34f6:	422c      	tst	r4, r5
    34f8:	d0fc      	beq.n	34f4 <spi_read_buffer_wait+0x80>
    34fa:	7e34      	ldrb	r4, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    34fc:	422c      	tst	r4, r5
    34fe:	d014      	beq.n	352a <spi_read_buffer_wait+0xb6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3500:	8b73      	ldrh	r3, [r6, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3502:	2400      	movs	r4, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3504:	422b      	tst	r3, r5
    3506:	d004      	beq.n	3512 <spi_read_buffer_wait+0x9e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3508:	8b73      	ldrh	r3, [r6, #26]
    350a:	3404      	adds	r4, #4
    350c:	431c      	orrs	r4, r3
    350e:	8374      	strh	r4, [r6, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    3510:	241e      	movs	r4, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3512:	7983      	ldrb	r3, [r0, #6]
    3514:	2b01      	cmp	r3, #1
    3516:	d103      	bne.n	3520 <spi_read_buffer_wait+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3518:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    351a:	05f6      	lsls	r6, r6, #23
    351c:	0df6      	lsrs	r6, r6, #23
    351e:	e001      	b.n	3524 <spi_read_buffer_wait+0xb0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3520:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    3522:	b2f6      	uxtb	r6, r6
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    3524:	2c00      	cmp	r4, #0
    3526:	d003      	beq.n	3530 <spi_read_buffer_wait+0xbc>
    3528:	e000      	b.n	352c <spi_read_buffer_wait+0xb8>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
    352a:	2410      	movs	r4, #16
			/* Overflow, abort */
			return retval;
    352c:	1c21      	adds	r1, r4, #0
    352e:	e01f      	b.n	3570 <spi_read_buffer_wait+0xfc>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3530:	1c7c      	adds	r4, r7, #1
    3532:	b2a4      	uxth	r4, r4
    3534:	4663      	mov	r3, ip
    3536:	55de      	strb	r6, [r3, r7]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3538:	7983      	ldrb	r3, [r0, #6]
    353a:	2b01      	cmp	r3, #1
    353c:	d105      	bne.n	354a <spi_read_buffer_wait+0xd6>
			rx_data[rx_pos++] = (received_data >> 8);
    353e:	3702      	adds	r7, #2
    3540:	b2bf      	uxth	r7, r7
    3542:	0a36      	lsrs	r6, r6, #8
    3544:	4663      	mov	r3, ip
    3546:	551e      	strb	r6, [r3, r4]
    3548:	e000      	b.n	354c <spi_read_buffer_wait+0xd8>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    354a:	1c27      	adds	r7, r4, #0
    354c:	3a01      	subs	r2, #1
    354e:	b292      	uxth	r2, r2
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    3550:	2a00      	cmp	r2, #0
    3552:	d1af      	bne.n	34b4 <spi_read_buffer_wait+0x40>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    3554:	2100      	movs	r1, #0
    3556:	e00b      	b.n	3570 <spi_read_buffer_wait+0xfc>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3558:	2112      	movs	r1, #18
    355a:	e009      	b.n	3570 <spi_read_buffer_wait+0xfc>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    355c:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    355e:	7e1c      	ldrb	r4, [r3, #24]

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    3560:	422c      	tst	r4, r5
    3562:	d1ba      	bne.n	34da <spi_read_buffer_wait+0x66>
    3564:	464c      	mov	r4, r9
    3566:	e7b2      	b.n	34ce <spi_read_buffer_wait+0x5a>
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    3568:	7944      	ldrb	r4, [r0, #5]
    356a:	2c00      	cmp	r4, #0
    356c:	d0f6      	beq.n	355c <spi_read_buffer_wait+0xe8>
    356e:	e7c0      	b.n	34f2 <spi_read_buffer_wait+0x7e>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    3570:	1c08      	adds	r0, r1, #0
    3572:	bc1c      	pop	{r2, r3, r4}
    3574:	4690      	mov	r8, r2
    3576:	4699      	mov	r9, r3
    3578:	46a2      	mov	sl, r4
    357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    357c:	00002710 	.word	0x00002710

00003580 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3580:	b5f0      	push	{r4, r5, r6, r7, lr}
    3582:	465f      	mov	r7, fp
    3584:	4656      	mov	r6, sl
    3586:	464d      	mov	r5, r9
    3588:	4644      	mov	r4, r8
    358a:	b4f0      	push	{r4, r5, r6, r7}
    358c:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    358e:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    3590:	2a00      	cmp	r2, #0
    3592:	d100      	bne.n	3596 <spi_write_buffer_wait+0x16>
    3594:	e0ec      	b.n	3770 <spi_write_buffer_wait+0x1f0>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    3596:	7943      	ldrb	r3, [r0, #5]
    3598:	2b00      	cmp	r3, #0
    359a:	d105      	bne.n	35a8 <spi_write_buffer_wait+0x28>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    359c:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    359e:	7e1c      	ldrb	r4, [r3, #24]
    35a0:	07a4      	lsls	r4, r4, #30
    35a2:	d501      	bpl.n	35a8 <spi_write_buffer_wait+0x28>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    35a4:	2402      	movs	r4, #2
    35a6:	761c      	strb	r4, [r3, #24]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    35a8:	4693      	mov	fp, r2
    35aa:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    35ac:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    35ae:	2502      	movs	r5, #2
    35b0:	46ac      	mov	ip, r5
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    35b2:	3502      	adds	r5, #2
    35b4:	46a9      	mov	r9, r5
    35b6:	e08e      	b.n	36d6 <spi_write_buffer_wait+0x156>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    35b8:	7945      	ldrb	r5, [r0, #5]
    35ba:	2d00      	cmp	r5, #0
    35bc:	d117      	bne.n	35ee <spi_write_buffer_wait+0x6e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35be:	6807      	ldr	r7, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    35c0:	7e3d      	ldrb	r5, [r7, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
    35c2:	421d      	tst	r5, r3
    35c4:	d106      	bne.n	35d4 <spi_write_buffer_wait+0x54>
    35c6:	4d6e      	ldr	r5, [pc, #440]	; (3780 <spi_write_buffer_wait+0x200>)
    35c8:	7e3e      	ldrb	r6, [r7, #24]
    35ca:	421e      	tst	r6, r3
    35cc:	d102      	bne.n	35d4 <spi_write_buffer_wait+0x54>
    35ce:	3d01      	subs	r5, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    35d0:	2d00      	cmp	r5, #0
    35d2:	d1f9      	bne.n	35c8 <spi_write_buffer_wait+0x48>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35d4:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    35d6:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    35d8:	4667      	mov	r7, ip
    35da:	423d      	tst	r5, r7
    35dc:	d003      	beq.n	35e6 <spi_write_buffer_wait+0x66>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    35de:	2302      	movs	r3, #2
    35e0:	7633      	strb	r3, [r6, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    35e2:	3302      	adds	r3, #2
    35e4:	e0c4      	b.n	3770 <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    35e6:	7e35      	ldrb	r5, [r6, #24]
			}

			if (!spi_is_ready_to_write(module)) {
    35e8:	421d      	tst	r5, r3
    35ea:	d100      	bne.n	35ee <spi_write_buffer_wait+0x6e>
    35ec:	e0b7      	b.n	375e <spi_write_buffer_wait+0x1de>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35ee:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    35f0:	7e35      	ldrb	r5, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    35f2:	421d      	tst	r5, r3
    35f4:	d0fc      	beq.n	35f0 <spi_write_buffer_wait+0x70>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    35f6:	1c65      	adds	r5, r4, #1
    35f8:	b2ad      	uxth	r5, r5
    35fa:	46a8      	mov	r8, r5
    35fc:	5d0d      	ldrb	r5, [r1, r4]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    35fe:	7987      	ldrb	r7, [r0, #6]
    3600:	2f01      	cmp	r7, #1
    3602:	d002      	beq.n	360a <spi_write_buffer_wait+0x8a>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3604:	b2ad      	uxth	r5, r5
    3606:	4644      	mov	r4, r8
    3608:	e005      	b.n	3616 <spi_write_buffer_wait+0x96>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    360a:	3402      	adds	r4, #2
    360c:	b2a4      	uxth	r4, r4
    360e:	4647      	mov	r7, r8
    3610:	5dcf      	ldrb	r7, [r1, r7]
    3612:	023f      	lsls	r7, r7, #8
    3614:	433d      	orrs	r5, r7
    3616:	7e37      	ldrb	r7, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3618:	421f      	tst	r7, r3
    361a:	d002      	beq.n	3622 <spi_write_buffer_wait+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    361c:	05ed      	lsls	r5, r5, #23
    361e:	0ded      	lsrs	r5, r5, #23
    3620:	62b5      	str	r5, [r6, #40]	; 0x28
    3622:	1e55      	subs	r5, r2, #1
    3624:	b2ad      	uxth	r5, r5
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    3626:	79c6      	ldrb	r6, [r0, #7]
    3628:	2e00      	cmp	r6, #0
    362a:	d057      	beq.n	36dc <spi_write_buffer_wait+0x15c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    362c:	7945      	ldrb	r5, [r0, #5]
    362e:	2d00      	cmp	r5, #0
    3630:	d137      	bne.n	36a2 <spi_write_buffer_wait+0x122>
    3632:	4f54      	ldr	r7, [pc, #336]	; (3784 <spi_write_buffer_wait+0x204>)
    3634:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3636:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3638:	7e2e      	ldrb	r6, [r5, #24]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
    363a:	421e      	tst	r6, r3
    363c:	d01c      	beq.n	3678 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    363e:	1c66      	adds	r6, r4, #1
    3640:	b2b1      	uxth	r1, r6
    3642:	4688      	mov	r8, r1
    3644:	9901      	ldr	r1, [sp, #4]
    3646:	5d09      	ldrb	r1, [r1, r4]
    3648:	9100      	str	r1, [sp, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    364a:	7981      	ldrb	r1, [r0, #6]
    364c:	2901      	cmp	r1, #1
    364e:	d003      	beq.n	3658 <spi_write_buffer_wait+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    3650:	4669      	mov	r1, sp
    3652:	880e      	ldrh	r6, [r1, #0]
    3654:	4644      	mov	r4, r8
    3656:	e007      	b.n	3668 <spi_write_buffer_wait+0xe8>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
    3658:	3402      	adds	r4, #2
    365a:	b2a4      	uxth	r4, r4
    365c:	4641      	mov	r1, r8
    365e:	9e01      	ldr	r6, [sp, #4]
    3660:	5c71      	ldrb	r1, [r6, r1]
    3662:	0209      	lsls	r1, r1, #8
    3664:	9e00      	ldr	r6, [sp, #0]
    3666:	430e      	orrs	r6, r1
    3668:	7e29      	ldrb	r1, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    366a:	4219      	tst	r1, r3
    366c:	d002      	beq.n	3674 <spi_write_buffer_wait+0xf4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    366e:	05f6      	lsls	r6, r6, #23
    3670:	0df6      	lsrs	r6, r6, #23
    3672:	62ae      	str	r6, [r5, #40]	; 0x28
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
    3674:	3a01      	subs	r2, #1
    3676:	b292      	uxth	r2, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3678:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    367a:	7e35      	ldrb	r5, [r6, #24]
					}
					if (spi_is_ready_to_read(module)) {
    367c:	4649      	mov	r1, r9
    367e:	420d      	tst	r5, r1
    3680:	d102      	bne.n	3688 <spi_write_buffer_wait+0x108>
    3682:	3f01      	subs	r7, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3684:	2f00      	cmp	r7, #0
    3686:	d1d6      	bne.n	3636 <spi_write_buffer_wait+0xb6>
    3688:	9901      	ldr	r1, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    368a:	7e35      	ldrb	r5, [r6, #24]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    368c:	4667      	mov	r7, ip
    368e:	423d      	tst	r5, r7
    3690:	d003      	beq.n	369a <spi_write_buffer_wait+0x11a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3692:	2302      	movs	r3, #2
    3694:	7633      	strb	r3, [r6, #24]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
    3696:	3302      	adds	r3, #2
    3698:	e06a      	b.n	3770 <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    369a:	7e35      	ldrb	r5, [r6, #24]
				}

				if (!spi_is_ready_to_read(module)) {
    369c:	464e      	mov	r6, r9
    369e:	4235      	tst	r5, r6
    36a0:	d05f      	beq.n	3762 <spi_write_buffer_wait+0x1e2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    36a2:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36a4:	7e35      	ldrb	r5, [r6, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    36a6:	464f      	mov	r7, r9
    36a8:	423d      	tst	r5, r7
    36aa:	d0fb      	beq.n	36a4 <spi_write_buffer_wait+0x124>
    36ac:	7e35      	ldrb	r5, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    36ae:	423d      	tst	r5, r7
    36b0:	d00d      	beq.n	36ce <spi_write_buffer_wait+0x14e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    36b2:	8b75      	ldrh	r5, [r6, #26]
    36b4:	423d      	tst	r5, r7
    36b6:	d004      	beq.n	36c2 <spi_write_buffer_wait+0x142>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    36b8:	8b75      	ldrh	r5, [r6, #26]
    36ba:	2704      	movs	r7, #4
    36bc:	433d      	orrs	r5, r7
    36be:	b2ad      	uxth	r5, r5
    36c0:	8375      	strh	r5, [r6, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36c2:	7985      	ldrb	r5, [r0, #6]
    36c4:	2d01      	cmp	r5, #1
    36c6:	d101      	bne.n	36cc <spi_write_buffer_wait+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    36c8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    36ca:	e000      	b.n	36ce <spi_write_buffer_wait+0x14e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    36cc:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    36ce:	465d      	mov	r5, fp
    36d0:	3d01      	subs	r5, #1
    36d2:	b2ad      	uxth	r5, r5
    36d4:	46ab      	mov	fp, r5
    36d6:	3a01      	subs	r2, #1
    36d8:	b292      	uxth	r2, r2
    36da:	e000      	b.n	36de <spi_write_buffer_wait+0x15e>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    36dc:	1c2a      	adds	r2, r5, #0

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    36de:	4d2a      	ldr	r5, [pc, #168]	; (3788 <spi_write_buffer_wait+0x208>)
    36e0:	42aa      	cmp	r2, r5
    36e2:	d000      	beq.n	36e6 <spi_write_buffer_wait+0x166>
    36e4:	e768      	b.n	35b8 <spi_write_buffer_wait+0x38>
    36e6:	465a      	mov	r2, fp
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    36e8:	7943      	ldrb	r3, [r0, #5]
    36ea:	2b01      	cmp	r3, #1
    36ec:	d106      	bne.n	36fc <spi_write_buffer_wait+0x17c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    36ee:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    36f0:	2202      	movs	r2, #2
    36f2:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    36f4:	4213      	tst	r3, r2
    36f6:	d0fc      	beq.n	36f2 <spi_write_buffer_wait+0x172>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    36f8:	2300      	movs	r3, #0
    36fa:	e039      	b.n	3770 <spi_write_buffer_wait+0x1f0>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    36fc:	2b00      	cmp	r3, #0
    36fe:	d132      	bne.n	3766 <spi_write_buffer_wait+0x1e6>
		if (module->receiver_enabled) {
    3700:	79c1      	ldrb	r1, [r0, #7]
    3702:	2900      	cmp	r1, #0
    3704:	d034      	beq.n	3770 <spi_write_buffer_wait+0x1f0>
			while (flush_length) {
    3706:	2a00      	cmp	r2, #0
    3708:	d11f      	bne.n	374a <spi_write_buffer_wait+0x1ca>
    370a:	e031      	b.n	3770 <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    370c:	7e22      	ldrb	r2, [r4, #24]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    370e:	420a      	tst	r2, r1
    3710:	d102      	bne.n	3718 <spi_write_buffer_wait+0x198>
    3712:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3714:	2b00      	cmp	r3, #0
    3716:	d1f9      	bne.n	370c <spi_write_buffer_wait+0x18c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3718:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    371a:	7e1a      	ldrb	r2, [r3, #24]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
    371c:	420a      	tst	r2, r1
    371e:	d024      	beq.n	376a <spi_write_buffer_wait+0x1ea>
    3720:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3722:	420a      	tst	r2, r1
    3724:	d00c      	beq.n	3740 <spi_write_buffer_wait+0x1c0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3726:	8b5a      	ldrh	r2, [r3, #26]
    3728:	420a      	tst	r2, r1
    372a:	d003      	beq.n	3734 <spi_write_buffer_wait+0x1b4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    372c:	8b5a      	ldrh	r2, [r3, #26]
    372e:	4332      	orrs	r2, r6
    3730:	b292      	uxth	r2, r2
    3732:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3734:	7982      	ldrb	r2, [r0, #6]
    3736:	2a01      	cmp	r2, #1
    3738:	d101      	bne.n	373e <spi_write_buffer_wait+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    373c:	e000      	b.n	3740 <spi_write_buffer_wait+0x1c0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
    3740:	3f01      	subs	r7, #1
    3742:	b2bf      	uxth	r7, r7
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
    3744:	2f00      	cmp	r7, #0
    3746:	d104      	bne.n	3752 <spi_write_buffer_wait+0x1d2>
    3748:	e011      	b.n	376e <spi_write_buffer_wait+0x1ee>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    374a:	2104      	movs	r1, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    374c:	4d0c      	ldr	r5, [pc, #48]	; (3780 <spi_write_buffer_wait+0x200>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    374e:	2604      	movs	r6, #4
    3750:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3752:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3754:	7e23      	ldrb	r3, [r4, #24]
    3756:	420b      	tst	r3, r1
    3758:	d1de      	bne.n	3718 <spi_write_buffer_wait+0x198>
    375a:	1c2b      	adds	r3, r5, #0
    375c:	e7d6      	b.n	370c <spi_write_buffer_wait+0x18c>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    375e:	2312      	movs	r3, #18
    3760:	e006      	b.n	3770 <spi_write_buffer_wait+0x1f0>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    3762:	2312      	movs	r3, #18
    3764:	e004      	b.n	3770 <spi_write_buffer_wait+0x1f0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    3766:	2300      	movs	r3, #0
    3768:	e002      	b.n	3770 <spi_write_buffer_wait+0x1f0>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    376a:	2312      	movs	r3, #18
    376c:	e000      	b.n	3770 <spi_write_buffer_wait+0x1f0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    376e:	2300      	movs	r3, #0
}
    3770:	1c18      	adds	r0, r3, #0
    3772:	b003      	add	sp, #12
    3774:	bc3c      	pop	{r2, r3, r4, r5}
    3776:	4690      	mov	r8, r2
    3778:	4699      	mov	r9, r3
    377a:	46a2      	mov	sl, r4
    377c:	46ab      	mov	fp, r5
    377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3780:	00002710 	.word	0x00002710
    3784:	00002711 	.word	0x00002711
    3788:	0000ffff 	.word	0x0000ffff

0000378c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    378c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    378e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3790:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3792:	4281      	cmp	r1, r0
    3794:	d30c      	bcc.n	37b0 <_sercom_get_sync_baud_val+0x24>
    3796:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    3798:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    379a:	3301      	adds	r3, #1
    379c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    379e:	4288      	cmp	r0, r1
    37a0:	d9fa      	bls.n	3798 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    37a2:	3b01      	subs	r3, #1
    37a4:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37a6:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    37a8:	2bff      	cmp	r3, #255	; 0xff
    37aa:	d801      	bhi.n	37b0 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    37ac:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    37ae:	2400      	movs	r4, #0
	}
}
    37b0:	1c20      	adds	r0, r4, #0
    37b2:	bd10      	pop	{r4, pc}

000037b4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    37b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37b6:	465f      	mov	r7, fp
    37b8:	4656      	mov	r6, sl
    37ba:	464d      	mov	r5, r9
    37bc:	4644      	mov	r4, r8
    37be:	b4f0      	push	{r4, r5, r6, r7}
    37c0:	b089      	sub	sp, #36	; 0x24
    37c2:	1c1c      	adds	r4, r3, #0
    37c4:	ab12      	add	r3, sp, #72	; 0x48
    37c6:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    37c8:	1c06      	adds	r6, r0, #0
    37ca:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37cc:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    37ce:	428e      	cmp	r6, r1
    37d0:	d900      	bls.n	37d4 <_sercom_get_async_baud_val+0x20>
    37d2:	e0c7      	b.n	3964 <_sercom_get_async_baud_val+0x1b0>
    37d4:	1c25      	adds	r5, r4, #0
    37d6:	9207      	str	r2, [sp, #28]
    37d8:	1c0c      	adds	r4, r1, #0
    37da:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    37dc:	2d00      	cmp	r5, #0
    37de:	d151      	bne.n	3884 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    37e0:	1c18      	adds	r0, r3, #0
    37e2:	2100      	movs	r1, #0
    37e4:	2300      	movs	r3, #0
    37e6:	4d63      	ldr	r5, [pc, #396]	; (3974 <_sercom_get_async_baud_val+0x1c0>)
    37e8:	47a8      	blx	r5
    37ea:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    37ec:	1c26      	adds	r6, r4, #0
    37ee:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    37f0:	2300      	movs	r3, #0
    37f2:	2400      	movs	r4, #0
    37f4:	9302      	str	r3, [sp, #8]
    37f6:	9403      	str	r4, [sp, #12]
    37f8:	2200      	movs	r2, #0
    37fa:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    37fc:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    37fe:	2120      	movs	r1, #32
    3800:	468c      	mov	ip, r1
    3802:	391f      	subs	r1, #31
    3804:	9600      	str	r6, [sp, #0]
    3806:	9701      	str	r7, [sp, #4]
    3808:	2420      	movs	r4, #32
    380a:	4264      	negs	r4, r4
    380c:	1904      	adds	r4, r0, r4
    380e:	d403      	bmi.n	3818 <_sercom_get_async_baud_val+0x64>
    3810:	1c0d      	adds	r5, r1, #0
    3812:	40a5      	lsls	r5, r4
    3814:	46a8      	mov	r8, r5
    3816:	e004      	b.n	3822 <_sercom_get_async_baud_val+0x6e>
    3818:	4664      	mov	r4, ip
    381a:	1a24      	subs	r4, r4, r0
    381c:	1c0d      	adds	r5, r1, #0
    381e:	40e5      	lsrs	r5, r4
    3820:	46a8      	mov	r8, r5
    3822:	1c0c      	adds	r4, r1, #0
    3824:	4084      	lsls	r4, r0
    3826:	46a1      	mov	r9, r4

		r = r << 1;
    3828:	1c14      	adds	r4, r2, #0
    382a:	1c1d      	adds	r5, r3, #0
    382c:	18a4      	adds	r4, r4, r2
    382e:	415d      	adcs	r5, r3
    3830:	1c22      	adds	r2, r4, #0
    3832:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    3834:	465e      	mov	r6, fp
    3836:	4647      	mov	r7, r8
    3838:	423e      	tst	r6, r7
    383a:	d003      	beq.n	3844 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    383c:	1c0e      	adds	r6, r1, #0
    383e:	4326      	orrs	r6, r4
    3840:	1c32      	adds	r2, r6, #0
    3842:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    3844:	9c01      	ldr	r4, [sp, #4]
    3846:	429c      	cmp	r4, r3
    3848:	d810      	bhi.n	386c <_sercom_get_async_baud_val+0xb8>
    384a:	d102      	bne.n	3852 <_sercom_get_async_baud_val+0x9e>
    384c:	9c00      	ldr	r4, [sp, #0]
    384e:	4294      	cmp	r4, r2
    3850:	d80c      	bhi.n	386c <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    3852:	9c00      	ldr	r4, [sp, #0]
    3854:	9d01      	ldr	r5, [sp, #4]
    3856:	1b12      	subs	r2, r2, r4
    3858:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    385a:	464d      	mov	r5, r9
    385c:	9e02      	ldr	r6, [sp, #8]
    385e:	9f03      	ldr	r7, [sp, #12]
    3860:	4335      	orrs	r5, r6
    3862:	1c3c      	adds	r4, r7, #0
    3864:	4646      	mov	r6, r8
    3866:	4334      	orrs	r4, r6
    3868:	9502      	str	r5, [sp, #8]
    386a:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    386c:	3801      	subs	r0, #1
    386e:	d2cb      	bcs.n	3808 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3870:	2200      	movs	r2, #0
    3872:	2301      	movs	r3, #1
    3874:	9802      	ldr	r0, [sp, #8]
    3876:	9903      	ldr	r1, [sp, #12]
    3878:	1a12      	subs	r2, r2, r0
    387a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    387c:	0c11      	lsrs	r1, r2, #16
    387e:	041b      	lsls	r3, r3, #16
    3880:	4319      	orrs	r1, r3
    3882:	e06c      	b.n	395e <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    3884:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3886:	2d01      	cmp	r5, #1
    3888:	d169      	bne.n	395e <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    388a:	0f61      	lsrs	r1, r4, #29
    388c:	1c0f      	adds	r7, r1, #0
    388e:	00e1      	lsls	r1, r4, #3
    3890:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    3892:	1c18      	adds	r0, r3, #0
    3894:	2100      	movs	r1, #0
    3896:	2300      	movs	r3, #0
    3898:	4c36      	ldr	r4, [pc, #216]	; (3974 <_sercom_get_async_baud_val+0x1c0>)
    389a:	47a0      	blx	r4
    389c:	1c04      	adds	r4, r0, #0
    389e:	1c0d      	adds	r5, r1, #0
    38a0:	2300      	movs	r3, #0
    38a2:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    38a4:	3320      	adds	r3, #32
    38a6:	469b      	mov	fp, r3
    38a8:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    38aa:	4663      	mov	r3, ip
    38ac:	9305      	str	r3, [sp, #20]
    38ae:	46b9      	mov	r9, r7
    38b0:	466b      	mov	r3, sp
    38b2:	7d1b      	ldrb	r3, [r3, #20]
    38b4:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    38b6:	2300      	movs	r3, #0
    38b8:	469c      	mov	ip, r3
    38ba:	2000      	movs	r0, #0
    38bc:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    38be:	223f      	movs	r2, #63	; 0x3f
    38c0:	9400      	str	r4, [sp, #0]
    38c2:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    38c4:	2320      	movs	r3, #32
    38c6:	425b      	negs	r3, r3
    38c8:	18d3      	adds	r3, r2, r3
    38ca:	d403      	bmi.n	38d4 <_sercom_get_async_baud_val+0x120>
    38cc:	1c34      	adds	r4, r6, #0
    38ce:	409c      	lsls	r4, r3
    38d0:	1c23      	adds	r3, r4, #0
    38d2:	e004      	b.n	38de <_sercom_get_async_baud_val+0x12a>
    38d4:	465b      	mov	r3, fp
    38d6:	1a9b      	subs	r3, r3, r2
    38d8:	1c34      	adds	r4, r6, #0
    38da:	40dc      	lsrs	r4, r3
    38dc:	1c23      	adds	r3, r4, #0
    38de:	1c37      	adds	r7, r6, #0
    38e0:	4097      	lsls	r7, r2

		r = r << 1;
    38e2:	1c04      	adds	r4, r0, #0
    38e4:	1c0d      	adds	r5, r1, #0
    38e6:	1824      	adds	r4, r4, r0
    38e8:	414d      	adcs	r5, r1
    38ea:	1c20      	adds	r0, r4, #0
    38ec:	1c29      	adds	r1, r5, #0
    38ee:	9002      	str	r0, [sp, #8]
    38f0:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    38f2:	4644      	mov	r4, r8
    38f4:	403c      	ands	r4, r7
    38f6:	46a2      	mov	sl, r4
    38f8:	464c      	mov	r4, r9
    38fa:	4023      	ands	r3, r4
    38fc:	4654      	mov	r4, sl
    38fe:	4323      	orrs	r3, r4
    3900:	d005      	beq.n	390e <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    3902:	9b02      	ldr	r3, [sp, #8]
    3904:	9c03      	ldr	r4, [sp, #12]
    3906:	1c1d      	adds	r5, r3, #0
    3908:	4335      	orrs	r5, r6
    390a:	1c28      	adds	r0, r5, #0
    390c:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    390e:	9b01      	ldr	r3, [sp, #4]
    3910:	428b      	cmp	r3, r1
    3912:	d80a      	bhi.n	392a <_sercom_get_async_baud_val+0x176>
    3914:	d102      	bne.n	391c <_sercom_get_async_baud_val+0x168>
    3916:	9b00      	ldr	r3, [sp, #0]
    3918:	4283      	cmp	r3, r0
    391a:	d806      	bhi.n	392a <_sercom_get_async_baud_val+0x176>
			r = r - d;
    391c:	9b00      	ldr	r3, [sp, #0]
    391e:	9c01      	ldr	r4, [sp, #4]
    3920:	1ac0      	subs	r0, r0, r3
    3922:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    3924:	4663      	mov	r3, ip
    3926:	433b      	orrs	r3, r7
    3928:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    392a:	3a01      	subs	r2, #1
    392c:	d2ca      	bcs.n	38c4 <_sercom_get_async_baud_val+0x110>
    392e:	9c00      	ldr	r4, [sp, #0]
    3930:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    3932:	4662      	mov	r2, ip
    3934:	9905      	ldr	r1, [sp, #20]
    3936:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    3938:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    393a:	4a0f      	ldr	r2, [pc, #60]	; (3978 <_sercom_get_async_baud_val+0x1c4>)
    393c:	4293      	cmp	r3, r2
    393e:	d908      	bls.n	3952 <_sercom_get_async_baud_val+0x19e>
    3940:	9a06      	ldr	r2, [sp, #24]
    3942:	3201      	adds	r2, #1
    3944:	b2d2      	uxtb	r2, r2
    3946:	9206      	str	r2, [sp, #24]
    3948:	1c0a      	adds	r2, r1, #0
    394a:	3201      	adds	r2, #1
    394c:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    394e:	2a08      	cmp	r2, #8
    3950:	d1ae      	bne.n	38b0 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3952:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    3954:	9a06      	ldr	r2, [sp, #24]
    3956:	2a08      	cmp	r2, #8
    3958:	d004      	beq.n	3964 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    395a:	0351      	lsls	r1, r2, #13
    395c:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    395e:	9b07      	ldr	r3, [sp, #28]
    3960:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    3962:	2500      	movs	r5, #0
}
    3964:	1c28      	adds	r0, r5, #0
    3966:	b009      	add	sp, #36	; 0x24
    3968:	bc3c      	pop	{r2, r3, r4, r5}
    396a:	4690      	mov	r8, r2
    396c:	4699      	mov	r9, r3
    396e:	46a2      	mov	sl, r4
    3970:	46ab      	mov	fp, r5
    3972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3974:	00004961 	.word	0x00004961
    3978:	00001fff 	.word	0x00001fff

0000397c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    397c:	b510      	push	{r4, lr}
    397e:	b082      	sub	sp, #8
    3980:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3982:	4b0e      	ldr	r3, [pc, #56]	; (39bc <sercom_set_gclk_generator+0x40>)
    3984:	781b      	ldrb	r3, [r3, #0]
    3986:	2b00      	cmp	r3, #0
    3988:	d001      	beq.n	398e <sercom_set_gclk_generator+0x12>
    398a:	2900      	cmp	r1, #0
    398c:	d00d      	beq.n	39aa <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    398e:	a901      	add	r1, sp, #4
    3990:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3992:	2011      	movs	r0, #17
    3994:	4b0a      	ldr	r3, [pc, #40]	; (39c0 <sercom_set_gclk_generator+0x44>)
    3996:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3998:	2011      	movs	r0, #17
    399a:	4b0a      	ldr	r3, [pc, #40]	; (39c4 <sercom_set_gclk_generator+0x48>)
    399c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    399e:	4b07      	ldr	r3, [pc, #28]	; (39bc <sercom_set_gclk_generator+0x40>)
    39a0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    39a2:	2201      	movs	r2, #1
    39a4:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    39a6:	2000      	movs	r0, #0
    39a8:	e006      	b.n	39b8 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    39aa:	4b04      	ldr	r3, [pc, #16]	; (39bc <sercom_set_gclk_generator+0x40>)
    39ac:	785b      	ldrb	r3, [r3, #1]
    39ae:	4283      	cmp	r3, r0
    39b0:	d001      	beq.n	39b6 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    39b2:	201d      	movs	r0, #29
    39b4:	e000      	b.n	39b8 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    39b6:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    39b8:	b002      	add	sp, #8
    39ba:	bd10      	pop	{r4, pc}
    39bc:	20000064 	.word	0x20000064
    39c0:	00004309 	.word	0x00004309
    39c4:	000042a1 	.word	0x000042a1

000039c8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    39c8:	4b40      	ldr	r3, [pc, #256]	; (3acc <_sercom_get_default_pad+0x104>)
    39ca:	4298      	cmp	r0, r3
    39cc:	d034      	beq.n	3a38 <_sercom_get_default_pad+0x70>
    39ce:	d807      	bhi.n	39e0 <_sercom_get_default_pad+0x18>
    39d0:	2384      	movs	r3, #132	; 0x84
    39d2:	05db      	lsls	r3, r3, #23
    39d4:	4298      	cmp	r0, r3
    39d6:	d00d      	beq.n	39f4 <_sercom_get_default_pad+0x2c>
    39d8:	4b3d      	ldr	r3, [pc, #244]	; (3ad0 <_sercom_get_default_pad+0x108>)
    39da:	4298      	cmp	r0, r3
    39dc:	d01b      	beq.n	3a16 <_sercom_get_default_pad+0x4e>
    39de:	e067      	b.n	3ab0 <_sercom_get_default_pad+0xe8>
    39e0:	4b3c      	ldr	r3, [pc, #240]	; (3ad4 <_sercom_get_default_pad+0x10c>)
    39e2:	4298      	cmp	r0, r3
    39e4:	d04a      	beq.n	3a7c <_sercom_get_default_pad+0xb4>
    39e6:	4b3c      	ldr	r3, [pc, #240]	; (3ad8 <_sercom_get_default_pad+0x110>)
    39e8:	4298      	cmp	r0, r3
    39ea:	d050      	beq.n	3a8e <_sercom_get_default_pad+0xc6>
    39ec:	4b3b      	ldr	r3, [pc, #236]	; (3adc <_sercom_get_default_pad+0x114>)
    39ee:	4298      	cmp	r0, r3
    39f0:	d15e      	bne.n	3ab0 <_sercom_get_default_pad+0xe8>
    39f2:	e032      	b.n	3a5a <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    39f4:	2901      	cmp	r1, #1
    39f6:	d006      	beq.n	3a06 <_sercom_get_default_pad+0x3e>
    39f8:	2900      	cmp	r1, #0
    39fa:	d05b      	beq.n	3ab4 <_sercom_get_default_pad+0xec>
    39fc:	2902      	cmp	r1, #2
    39fe:	d006      	beq.n	3a0e <_sercom_get_default_pad+0x46>
    3a00:	2903      	cmp	r1, #3
    3a02:	d006      	beq.n	3a12 <_sercom_get_default_pad+0x4a>
    3a04:	e001      	b.n	3a0a <_sercom_get_default_pad+0x42>
    3a06:	4836      	ldr	r0, [pc, #216]	; (3ae0 <_sercom_get_default_pad+0x118>)
    3a08:	e05f      	b.n	3aca <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3a0a:	2000      	movs	r0, #0
    3a0c:	e05d      	b.n	3aca <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3a0e:	4835      	ldr	r0, [pc, #212]	; (3ae4 <_sercom_get_default_pad+0x11c>)
    3a10:	e05b      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a12:	4835      	ldr	r0, [pc, #212]	; (3ae8 <_sercom_get_default_pad+0x120>)
    3a14:	e059      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a16:	2901      	cmp	r1, #1
    3a18:	d006      	beq.n	3a28 <_sercom_get_default_pad+0x60>
    3a1a:	2900      	cmp	r1, #0
    3a1c:	d04c      	beq.n	3ab8 <_sercom_get_default_pad+0xf0>
    3a1e:	2902      	cmp	r1, #2
    3a20:	d006      	beq.n	3a30 <_sercom_get_default_pad+0x68>
    3a22:	2903      	cmp	r1, #3
    3a24:	d006      	beq.n	3a34 <_sercom_get_default_pad+0x6c>
    3a26:	e001      	b.n	3a2c <_sercom_get_default_pad+0x64>
    3a28:	4830      	ldr	r0, [pc, #192]	; (3aec <_sercom_get_default_pad+0x124>)
    3a2a:	e04e      	b.n	3aca <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3a2c:	2000      	movs	r0, #0
    3a2e:	e04c      	b.n	3aca <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3a30:	482f      	ldr	r0, [pc, #188]	; (3af0 <_sercom_get_default_pad+0x128>)
    3a32:	e04a      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a34:	482f      	ldr	r0, [pc, #188]	; (3af4 <_sercom_get_default_pad+0x12c>)
    3a36:	e048      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a38:	2901      	cmp	r1, #1
    3a3a:	d006      	beq.n	3a4a <_sercom_get_default_pad+0x82>
    3a3c:	2900      	cmp	r1, #0
    3a3e:	d03d      	beq.n	3abc <_sercom_get_default_pad+0xf4>
    3a40:	2902      	cmp	r1, #2
    3a42:	d006      	beq.n	3a52 <_sercom_get_default_pad+0x8a>
    3a44:	2903      	cmp	r1, #3
    3a46:	d006      	beq.n	3a56 <_sercom_get_default_pad+0x8e>
    3a48:	e001      	b.n	3a4e <_sercom_get_default_pad+0x86>
    3a4a:	482b      	ldr	r0, [pc, #172]	; (3af8 <_sercom_get_default_pad+0x130>)
    3a4c:	e03d      	b.n	3aca <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3a4e:	2000      	movs	r0, #0
    3a50:	e03b      	b.n	3aca <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3a52:	482a      	ldr	r0, [pc, #168]	; (3afc <_sercom_get_default_pad+0x134>)
    3a54:	e039      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a56:	482a      	ldr	r0, [pc, #168]	; (3b00 <_sercom_get_default_pad+0x138>)
    3a58:	e037      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a5a:	2901      	cmp	r1, #1
    3a5c:	d006      	beq.n	3a6c <_sercom_get_default_pad+0xa4>
    3a5e:	2900      	cmp	r1, #0
    3a60:	d02e      	beq.n	3ac0 <_sercom_get_default_pad+0xf8>
    3a62:	2902      	cmp	r1, #2
    3a64:	d006      	beq.n	3a74 <_sercom_get_default_pad+0xac>
    3a66:	2903      	cmp	r1, #3
    3a68:	d006      	beq.n	3a78 <_sercom_get_default_pad+0xb0>
    3a6a:	e001      	b.n	3a70 <_sercom_get_default_pad+0xa8>
    3a6c:	4825      	ldr	r0, [pc, #148]	; (3b04 <_sercom_get_default_pad+0x13c>)
    3a6e:	e02c      	b.n	3aca <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3a70:	2000      	movs	r0, #0
    3a72:	e02a      	b.n	3aca <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3a74:	4824      	ldr	r0, [pc, #144]	; (3b08 <_sercom_get_default_pad+0x140>)
    3a76:	e028      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a78:	4824      	ldr	r0, [pc, #144]	; (3b0c <_sercom_get_default_pad+0x144>)
    3a7a:	e026      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a7c:	2902      	cmp	r1, #2
    3a7e:	d002      	beq.n	3a86 <_sercom_get_default_pad+0xbe>
    3a80:	2903      	cmp	r1, #3
    3a82:	d002      	beq.n	3a8a <_sercom_get_default_pad+0xc2>
    3a84:	e01e      	b.n	3ac4 <_sercom_get_default_pad+0xfc>
    3a86:	4822      	ldr	r0, [pc, #136]	; (3b10 <_sercom_get_default_pad+0x148>)
    3a88:	e01f      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a8a:	4822      	ldr	r0, [pc, #136]	; (3b14 <_sercom_get_default_pad+0x14c>)
    3a8c:	e01d      	b.n	3aca <_sercom_get_default_pad+0x102>
    3a8e:	2901      	cmp	r1, #1
    3a90:	d006      	beq.n	3aa0 <_sercom_get_default_pad+0xd8>
    3a92:	2900      	cmp	r1, #0
    3a94:	d018      	beq.n	3ac8 <_sercom_get_default_pad+0x100>
    3a96:	2902      	cmp	r1, #2
    3a98:	d006      	beq.n	3aa8 <_sercom_get_default_pad+0xe0>
    3a9a:	2903      	cmp	r1, #3
    3a9c:	d006      	beq.n	3aac <_sercom_get_default_pad+0xe4>
    3a9e:	e001      	b.n	3aa4 <_sercom_get_default_pad+0xdc>
    3aa0:	481d      	ldr	r0, [pc, #116]	; (3b18 <_sercom_get_default_pad+0x150>)
    3aa2:	e012      	b.n	3aca <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3aa4:	2000      	movs	r0, #0
    3aa6:	e010      	b.n	3aca <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3aa8:	481c      	ldr	r0, [pc, #112]	; (3b1c <_sercom_get_default_pad+0x154>)
    3aaa:	e00e      	b.n	3aca <_sercom_get_default_pad+0x102>
    3aac:	481c      	ldr	r0, [pc, #112]	; (3b20 <_sercom_get_default_pad+0x158>)
    3aae:	e00c      	b.n	3aca <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3ab0:	2000      	movs	r0, #0
    3ab2:	e00a      	b.n	3aca <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3ab4:	481b      	ldr	r0, [pc, #108]	; (3b24 <_sercom_get_default_pad+0x15c>)
    3ab6:	e008      	b.n	3aca <_sercom_get_default_pad+0x102>
    3ab8:	2003      	movs	r0, #3
    3aba:	e006      	b.n	3aca <_sercom_get_default_pad+0x102>
    3abc:	481a      	ldr	r0, [pc, #104]	; (3b28 <_sercom_get_default_pad+0x160>)
    3abe:	e004      	b.n	3aca <_sercom_get_default_pad+0x102>
    3ac0:	481a      	ldr	r0, [pc, #104]	; (3b2c <_sercom_get_default_pad+0x164>)
    3ac2:	e002      	b.n	3aca <_sercom_get_default_pad+0x102>
    3ac4:	2000      	movs	r0, #0
    3ac6:	e000      	b.n	3aca <_sercom_get_default_pad+0x102>
    3ac8:	4819      	ldr	r0, [pc, #100]	; (3b30 <_sercom_get_default_pad+0x168>)
	}

	Assert(false);
	return 0;
}
    3aca:	4770      	bx	lr
    3acc:	42000800 	.word	0x42000800
    3ad0:	42000400 	.word	0x42000400
    3ad4:	42001000 	.word	0x42001000
    3ad8:	43000400 	.word	0x43000400
    3adc:	42000c00 	.word	0x42000c00
    3ae0:	00050003 	.word	0x00050003
    3ae4:	00060003 	.word	0x00060003
    3ae8:	00070003 	.word	0x00070003
    3aec:	00010003 	.word	0x00010003
    3af0:	001e0003 	.word	0x001e0003
    3af4:	001f0003 	.word	0x001f0003
    3af8:	00090003 	.word	0x00090003
    3afc:	000a0003 	.word	0x000a0003
    3b00:	000b0003 	.word	0x000b0003
    3b04:	00110003 	.word	0x00110003
    3b08:	00120003 	.word	0x00120003
    3b0c:	00130003 	.word	0x00130003
    3b10:	000e0003 	.word	0x000e0003
    3b14:	000f0003 	.word	0x000f0003
    3b18:	00170003 	.word	0x00170003
    3b1c:	00180003 	.word	0x00180003
    3b20:	00190003 	.word	0x00190003
    3b24:	00040003 	.word	0x00040003
    3b28:	00080003 	.word	0x00080003
    3b2c:	00100003 	.word	0x00100003
    3b30:	00160003 	.word	0x00160003

00003b34 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3b34:	b530      	push	{r4, r5, lr}
    3b36:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3b38:	4b0c      	ldr	r3, [pc, #48]	; (3b6c <_sercom_get_sercom_inst_index+0x38>)
    3b3a:	466a      	mov	r2, sp
    3b3c:	cb32      	ldmia	r3!, {r1, r4, r5}
    3b3e:	c232      	stmia	r2!, {r1, r4, r5}
    3b40:	cb32      	ldmia	r3!, {r1, r4, r5}
    3b42:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3b44:	9b00      	ldr	r3, [sp, #0]
    3b46:	4283      	cmp	r3, r0
    3b48:	d006      	beq.n	3b58 <_sercom_get_sercom_inst_index+0x24>
    3b4a:	2301      	movs	r3, #1
    3b4c:	009a      	lsls	r2, r3, #2
    3b4e:	4669      	mov	r1, sp
    3b50:	5852      	ldr	r2, [r2, r1]
    3b52:	4282      	cmp	r2, r0
    3b54:	d103      	bne.n	3b5e <_sercom_get_sercom_inst_index+0x2a>
    3b56:	e000      	b.n	3b5a <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3b58:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    3b5a:	b2d8      	uxtb	r0, r3
    3b5c:	e003      	b.n	3b66 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3b5e:	3301      	adds	r3, #1
    3b60:	2b06      	cmp	r3, #6
    3b62:	d1f3      	bne.n	3b4c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3b64:	2000      	movs	r0, #0
}
    3b66:	b007      	add	sp, #28
    3b68:	bd30      	pop	{r4, r5, pc}
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	00004a54 	.word	0x00004a54

00003b70 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3b70:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3b72:	2a00      	cmp	r2, #0
    3b74:	d10d      	bne.n	3b92 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    3b76:	008b      	lsls	r3, r1, #2
    3b78:	4a07      	ldr	r2, [pc, #28]	; (3b98 <extint_register_callback+0x28>)
    3b7a:	589b      	ldr	r3, [r3, r2]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d103      	bne.n	3b88 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    3b80:	0089      	lsls	r1, r1, #2
    3b82:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3b84:	2300      	movs	r3, #0
    3b86:	e004      	b.n	3b92 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3b88:	4283      	cmp	r3, r0
    3b8a:	d001      	beq.n	3b90 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    3b8c:	231d      	movs	r3, #29
    3b8e:	e000      	b.n	3b92 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    3b90:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3b92:	1c18      	adds	r0, r3, #0
    3b94:	4770      	bx	lr
    3b96:	46c0      	nop			; (mov r8, r8)
    3b98:	20001f30 	.word	0x20001f30

00003b9c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3b9c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3b9e:	2200      	movs	r2, #0
    3ba0:	4b15      	ldr	r3, [pc, #84]	; (3bf8 <EIC_Handler+0x5c>)
    3ba2:	701a      	strb	r2, [r3, #0]
    3ba4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3ba6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3ba8:	4e14      	ldr	r6, [pc, #80]	; (3bfc <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3baa:	4c13      	ldr	r4, [pc, #76]	; (3bf8 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3bac:	2b1f      	cmp	r3, #31
    3bae:	d919      	bls.n	3be4 <EIC_Handler+0x48>
    3bb0:	e00f      	b.n	3bd2 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3bb2:	2100      	movs	r1, #0
    3bb4:	e000      	b.n	3bb8 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3bb6:	4912      	ldr	r1, [pc, #72]	; (3c00 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3bb8:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3bba:	009b      	lsls	r3, r3, #2
    3bbc:	599b      	ldr	r3, [r3, r6]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d000      	beq.n	3bc4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3bc2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3bc4:	7823      	ldrb	r3, [r4, #0]
    3bc6:	3301      	adds	r3, #1
    3bc8:	b2db      	uxtb	r3, r3
    3bca:	7023      	strb	r3, [r4, #0]
    3bcc:	2b0f      	cmp	r3, #15
    3bce:	d9ed      	bls.n	3bac <EIC_Handler+0x10>
    3bd0:	e011      	b.n	3bf6 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3bd2:	1c29      	adds	r1, r5, #0
    3bd4:	4019      	ands	r1, r3
    3bd6:	2201      	movs	r2, #1
    3bd8:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3bda:	2100      	movs	r1, #0
    3bdc:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    3bde:	4211      	tst	r1, r2
    3be0:	d1e7      	bne.n	3bb2 <EIC_Handler+0x16>
    3be2:	e7ef      	b.n	3bc4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3be4:	1c29      	adds	r1, r5, #0
    3be6:	4019      	ands	r1, r3
    3be8:	2201      	movs	r2, #1
    3bea:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3bec:	4904      	ldr	r1, [pc, #16]	; (3c00 <EIC_Handler+0x64>)
    3bee:	6949      	ldr	r1, [r1, #20]
    3bf0:	4211      	tst	r1, r2
    3bf2:	d1e0      	bne.n	3bb6 <EIC_Handler+0x1a>
    3bf4:	e7e6      	b.n	3bc4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3bf6:	bd70      	pop	{r4, r5, r6, pc}
    3bf8:	20002080 	.word	0x20002080
    3bfc:	20001f30 	.word	0x20001f30
    3c00:	40002400 	.word	0x40002400

00003c04 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3c04:	b500      	push	{lr}
    3c06:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3c08:	ab01      	add	r3, sp, #4
    3c0a:	2280      	movs	r2, #128	; 0x80
    3c0c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3c0e:	780a      	ldrb	r2, [r1, #0]
    3c10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3c12:	784a      	ldrb	r2, [r1, #1]
    3c14:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3c16:	788a      	ldrb	r2, [r1, #2]
    3c18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3c1a:	1c19      	adds	r1, r3, #0
    3c1c:	4b01      	ldr	r3, [pc, #4]	; (3c24 <port_pin_set_config+0x20>)
    3c1e:	4798      	blx	r3
}
    3c20:	b003      	add	sp, #12
    3c22:	bd00      	pop	{pc}
    3c24:	00004405 	.word	0x00004405

00003c28 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3c28:	4770      	bx	lr
    3c2a:	46c0      	nop			; (mov r8, r8)

00003c2c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3c2c:	4b0c      	ldr	r3, [pc, #48]	; (3c60 <cpu_irq_enter_critical+0x34>)
    3c2e:	681b      	ldr	r3, [r3, #0]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d110      	bne.n	3c56 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c34:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d109      	bne.n	3c50 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3c3c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3c3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3c42:	2200      	movs	r2, #0
    3c44:	4b07      	ldr	r3, [pc, #28]	; (3c64 <cpu_irq_enter_critical+0x38>)
    3c46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3c48:	3201      	adds	r2, #1
    3c4a:	4b07      	ldr	r3, [pc, #28]	; (3c68 <cpu_irq_enter_critical+0x3c>)
    3c4c:	701a      	strb	r2, [r3, #0]
    3c4e:	e002      	b.n	3c56 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3c50:	2200      	movs	r2, #0
    3c52:	4b05      	ldr	r3, [pc, #20]	; (3c68 <cpu_irq_enter_critical+0x3c>)
    3c54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3c56:	4a02      	ldr	r2, [pc, #8]	; (3c60 <cpu_irq_enter_critical+0x34>)
    3c58:	6813      	ldr	r3, [r2, #0]
    3c5a:	3301      	adds	r3, #1
    3c5c:	6013      	str	r3, [r2, #0]
}
    3c5e:	4770      	bx	lr
    3c60:	20000068 	.word	0x20000068
    3c64:	20000014 	.word	0x20000014
    3c68:	2000006c 	.word	0x2000006c

00003c6c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3c6c:	4b08      	ldr	r3, [pc, #32]	; (3c90 <cpu_irq_leave_critical+0x24>)
    3c6e:	681a      	ldr	r2, [r3, #0]
    3c70:	3a01      	subs	r2, #1
    3c72:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d109      	bne.n	3c8e <cpu_irq_leave_critical+0x22>
    3c7a:	4b06      	ldr	r3, [pc, #24]	; (3c94 <cpu_irq_leave_critical+0x28>)
    3c7c:	781b      	ldrb	r3, [r3, #0]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d005      	beq.n	3c8e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3c82:	2201      	movs	r2, #1
    3c84:	4b04      	ldr	r3, [pc, #16]	; (3c98 <cpu_irq_leave_critical+0x2c>)
    3c86:	701a      	strb	r2, [r3, #0]
    3c88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3c8c:	b662      	cpsie	i
	}
}
    3c8e:	4770      	bx	lr
    3c90:	20000068 	.word	0x20000068
    3c94:	2000006c 	.word	0x2000006c
    3c98:	20000014 	.word	0x20000014

00003c9c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3c9c:	b508      	push	{r3, lr}
	switch (clock_source) {
    3c9e:	2808      	cmp	r0, #8
    3ca0:	d803      	bhi.n	3caa <system_clock_source_get_hz+0xe>
    3ca2:	0080      	lsls	r0, r0, #2
    3ca4:	4b1c      	ldr	r3, [pc, #112]	; (3d18 <system_clock_source_get_hz+0x7c>)
    3ca6:	581b      	ldr	r3, [r3, r0]
    3ca8:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    3caa:	2000      	movs	r0, #0
    3cac:	e032      	b.n	3d14 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3cae:	4b1b      	ldr	r3, [pc, #108]	; (3d1c <system_clock_source_get_hz+0x80>)
    3cb0:	6918      	ldr	r0, [r3, #16]
    3cb2:	e02f      	b.n	3d14 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    3cb4:	4b1a      	ldr	r3, [pc, #104]	; (3d20 <system_clock_source_get_hz+0x84>)
    3cb6:	7d18      	ldrb	r0, [r3, #20]
    3cb8:	0700      	lsls	r0, r0, #28
    3cba:	0f80      	lsrs	r0, r0, #30
    3cbc:	3001      	adds	r0, #1
    3cbe:	4b19      	ldr	r3, [pc, #100]	; (3d24 <system_clock_source_get_hz+0x88>)
    3cc0:	4358      	muls	r0, r3
    3cc2:	e027      	b.n	3d14 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3cc4:	4b15      	ldr	r3, [pc, #84]	; (3d1c <system_clock_source_get_hz+0x80>)
    3cc6:	6958      	ldr	r0, [r3, #20]
    3cc8:	e024      	b.n	3d14 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    3cca:	4b14      	ldr	r3, [pc, #80]	; (3d1c <system_clock_source_get_hz+0x80>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	2002      	movs	r0, #2
    3cd0:	4018      	ands	r0, r3
    3cd2:	d01f      	beq.n	3d14 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3cd4:	4912      	ldr	r1, [pc, #72]	; (3d20 <system_clock_source_get_hz+0x84>)
    3cd6:	2280      	movs	r2, #128	; 0x80
    3cd8:	0052      	lsls	r2, r2, #1
    3cda:	68cb      	ldr	r3, [r1, #12]
    3cdc:	4213      	tst	r3, r2
    3cde:	d0fc      	beq.n	3cda <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    3ce0:	4b0e      	ldr	r3, [pc, #56]	; (3d1c <system_clock_source_get_hz+0x80>)
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	075b      	lsls	r3, r3, #29
    3ce6:	d514      	bpl.n	3d12 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3ce8:	2000      	movs	r0, #0
    3cea:	4b0f      	ldr	r3, [pc, #60]	; (3d28 <system_clock_source_get_hz+0x8c>)
    3cec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3cee:	4b0b      	ldr	r3, [pc, #44]	; (3d1c <system_clock_source_get_hz+0x80>)
    3cf0:	689b      	ldr	r3, [r3, #8]
    3cf2:	041b      	lsls	r3, r3, #16
    3cf4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3cf6:	4358      	muls	r0, r3
    3cf8:	e00c      	b.n	3d14 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3cfa:	2328      	movs	r3, #40	; 0x28
    3cfc:	4a08      	ldr	r2, [pc, #32]	; (3d20 <system_clock_source_get_hz+0x84>)
    3cfe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3d00:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3d02:	079b      	lsls	r3, r3, #30
    3d04:	d506      	bpl.n	3d14 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3d06:	4b05      	ldr	r3, [pc, #20]	; (3d1c <system_clock_source_get_hz+0x80>)
    3d08:	68d8      	ldr	r0, [r3, #12]
    3d0a:	e003      	b.n	3d14 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3d0c:	2080      	movs	r0, #128	; 0x80
    3d0e:	0200      	lsls	r0, r0, #8
    3d10:	e000      	b.n	3d14 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3d12:	4806      	ldr	r0, [pc, #24]	; (3d2c <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3d14:	bd08      	pop	{r3, pc}
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	00004a6c 	.word	0x00004a6c
    3d1c:	20000070 	.word	0x20000070
    3d20:	40000c00 	.word	0x40000c00
    3d24:	003d0900 	.word	0x003d0900
    3d28:	0000432d 	.word	0x0000432d
    3d2c:	02dc6c00 	.word	0x02dc6c00

00003d30 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    3d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d32:	4657      	mov	r7, sl
    3d34:	464e      	mov	r6, r9
    3d36:	4645      	mov	r5, r8
    3d38:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    3d3a:	4e1c      	ldr	r6, [pc, #112]	; (3dac <system_clock_source_osc32k_set_config+0x7c>)
    3d3c:	69b3      	ldr	r3, [r6, #24]
    3d3e:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    3d40:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    3d42:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3d44:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3d46:	78c3      	ldrb	r3, [r0, #3]
    3d48:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    3d4a:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    3d4c:	7883      	ldrb	r3, [r0, #2]
    3d4e:	2001      	movs	r0, #1
    3d50:	4003      	ands	r3, r0
    3d52:	009b      	lsls	r3, r3, #2
    3d54:	469a      	mov	sl, r3
    3d56:	2204      	movs	r2, #4
    3d58:	4690      	mov	r8, r2
    3d5a:	4662      	mov	r2, ip
    3d5c:	4643      	mov	r3, r8
    3d5e:	439a      	bics	r2, r3
    3d60:	1c13      	adds	r3, r2, #0
    3d62:	4652      	mov	r2, sl
    3d64:	431a      	orrs	r2, r3
    3d66:	1c13      	adds	r3, r2, #0
    3d68:	4001      	ands	r1, r0
    3d6a:	00c9      	lsls	r1, r1, #3
    3d6c:	2208      	movs	r2, #8
    3d6e:	4393      	bics	r3, r2
    3d70:	430b      	orrs	r3, r1
    3d72:	464a      	mov	r2, r9
    3d74:	4002      	ands	r2, r0
    3d76:	0192      	lsls	r2, r2, #6
    3d78:	2140      	movs	r1, #64	; 0x40
    3d7a:	438b      	bics	r3, r1
    3d7c:	4313      	orrs	r3, r2
    3d7e:	4007      	ands	r7, r0
    3d80:	01ff      	lsls	r7, r7, #7
    3d82:	2280      	movs	r2, #128	; 0x80
    3d84:	4393      	bics	r3, r2
    3d86:	433b      	orrs	r3, r7
    3d88:	3a79      	subs	r2, #121	; 0x79
    3d8a:	4015      	ands	r5, r2
    3d8c:	022d      	lsls	r5, r5, #8
    3d8e:	4f08      	ldr	r7, [pc, #32]	; (3db0 <system_clock_source_osc32k_set_config+0x80>)
    3d90:	403b      	ands	r3, r7
    3d92:	432b      	orrs	r3, r5
    3d94:	4004      	ands	r4, r0
    3d96:	0320      	lsls	r0, r4, #12
    3d98:	4c06      	ldr	r4, [pc, #24]	; (3db4 <system_clock_source_osc32k_set_config+0x84>)
    3d9a:	401c      	ands	r4, r3
    3d9c:	4304      	orrs	r4, r0
    3d9e:	61b4      	str	r4, [r6, #24]
}
    3da0:	bc1c      	pop	{r2, r3, r4}
    3da2:	4690      	mov	r8, r2
    3da4:	4699      	mov	r9, r3
    3da6:	46a2      	mov	sl, r4
    3da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	40001000 	.word	0x40001000
    3db0:	fffff8ff 	.word	0xfffff8ff
    3db4:	ffffefff 	.word	0xffffefff

00003db8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dba:	465f      	mov	r7, fp
    3dbc:	4656      	mov	r6, sl
    3dbe:	464d      	mov	r5, r9
    3dc0:	4644      	mov	r4, r8
    3dc2:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    3dc4:	4e25      	ldr	r6, [pc, #148]	; (3e5c <system_clock_source_xosc32k_set_config+0xa4>)
    3dc6:	6973      	ldr	r3, [r6, #20]
    3dc8:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    3dca:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    3dcc:	7803      	ldrb	r3, [r0, #0]
    3dce:	425a      	negs	r2, r3
    3dd0:	415a      	adcs	r2, r3
    3dd2:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    3dd4:	7883      	ldrb	r3, [r0, #2]
    3dd6:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
    3dd8:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    3dda:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3ddc:	7a02      	ldrb	r2, [r0, #8]
    3dde:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
    3de0:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3de2:	6842      	ldr	r2, [r0, #4]
    3de4:	481e      	ldr	r0, [pc, #120]	; (3e60 <system_clock_source_xosc32k_set_config+0xa8>)
    3de6:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
    3de8:	2001      	movs	r0, #1
    3dea:	4642      	mov	r2, r8
    3dec:	0092      	lsls	r2, r2, #2
    3dee:	4690      	mov	r8, r2
    3df0:	2204      	movs	r2, #4
    3df2:	4691      	mov	r9, r2
    3df4:	4662      	mov	r2, ip
    3df6:	4649      	mov	r1, r9
    3df8:	438a      	bics	r2, r1
    3dfa:	4694      	mov	ip, r2
    3dfc:	4642      	mov	r2, r8
    3dfe:	4661      	mov	r1, ip
    3e00:	430a      	orrs	r2, r1
    3e02:	4694      	mov	ip, r2
    3e04:	4003      	ands	r3, r0
    3e06:	00db      	lsls	r3, r3, #3
    3e08:	2208      	movs	r2, #8
    3e0a:	4690      	mov	r8, r2
    3e0c:	4662      	mov	r2, ip
    3e0e:	4641      	mov	r1, r8
    3e10:	438a      	bics	r2, r1
    3e12:	4313      	orrs	r3, r2
    3e14:	4651      	mov	r1, sl
    3e16:	4001      	ands	r1, r0
    3e18:	0109      	lsls	r1, r1, #4
    3e1a:	2210      	movs	r2, #16
    3e1c:	4393      	bics	r3, r2
    3e1e:	430b      	orrs	r3, r1
    3e20:	465a      	mov	r2, fp
    3e22:	4002      	ands	r2, r0
    3e24:	0192      	lsls	r2, r2, #6
    3e26:	2140      	movs	r1, #64	; 0x40
    3e28:	438b      	bics	r3, r1
    3e2a:	4313      	orrs	r3, r2
    3e2c:	4007      	ands	r7, r0
    3e2e:	01ff      	lsls	r7, r7, #7
    3e30:	2280      	movs	r2, #128	; 0x80
    3e32:	4393      	bics	r3, r2
    3e34:	433b      	orrs	r3, r7
    3e36:	3a79      	subs	r2, #121	; 0x79
    3e38:	4015      	ands	r5, r2
    3e3a:	022d      	lsls	r5, r5, #8
    3e3c:	4f09      	ldr	r7, [pc, #36]	; (3e64 <system_clock_source_xosc32k_set_config+0xac>)
    3e3e:	403b      	ands	r3, r7
    3e40:	432b      	orrs	r3, r5
    3e42:	4004      	ands	r4, r0
    3e44:	0320      	lsls	r0, r4, #12
    3e46:	4c08      	ldr	r4, [pc, #32]	; (3e68 <system_clock_source_xosc32k_set_config+0xb0>)
    3e48:	401c      	ands	r4, r3
    3e4a:	4304      	orrs	r4, r0
    3e4c:	6174      	str	r4, [r6, #20]
}
    3e4e:	bc3c      	pop	{r2, r3, r4, r5}
    3e50:	4690      	mov	r8, r2
    3e52:	4699      	mov	r9, r3
    3e54:	46a2      	mov	sl, r4
    3e56:	46ab      	mov	fp, r5
    3e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	40001000 	.word	0x40001000
    3e60:	20000070 	.word	0x20000070
    3e64:	fffff8ff 	.word	0xfffff8ff
    3e68:	ffffefff 	.word	0xffffefff

00003e6c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3e6c:	2808      	cmp	r0, #8
    3e6e:	d803      	bhi.n	3e78 <system_clock_source_enable+0xc>
    3e70:	0080      	lsls	r0, r0, #2
    3e72:	4b29      	ldr	r3, [pc, #164]	; (3f18 <system_clock_source_enable+0xac>)
    3e74:	581b      	ldr	r3, [r3, r0]
    3e76:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3e78:	2017      	movs	r0, #23
    3e7a:	e04b      	b.n	3f14 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    3e7c:	4a27      	ldr	r2, [pc, #156]	; (3f1c <system_clock_source_enable+0xb0>)
    3e7e:	7d11      	ldrb	r1, [r2, #20]
    3e80:	2302      	movs	r3, #2
    3e82:	430b      	orrs	r3, r1
    3e84:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    3e86:	2000      	movs	r0, #0
    3e88:	e044      	b.n	3f14 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    3e8a:	4a25      	ldr	r2, [pc, #148]	; (3f20 <system_clock_source_enable+0xb4>)
    3e8c:	6991      	ldr	r1, [r2, #24]
    3e8e:	2302      	movs	r3, #2
    3e90:	430b      	orrs	r3, r1
    3e92:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3e94:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    3e96:	e03d      	b.n	3f14 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3e98:	4a20      	ldr	r2, [pc, #128]	; (3f1c <system_clock_source_enable+0xb0>)
    3e9a:	8a11      	ldrh	r1, [r2, #16]
    3e9c:	2302      	movs	r3, #2
    3e9e:	430b      	orrs	r3, r1
    3ea0:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3ea2:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3ea4:	e036      	b.n	3f14 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    3ea6:	4a1e      	ldr	r2, [pc, #120]	; (3f20 <system_clock_source_enable+0xb4>)
    3ea8:	6951      	ldr	r1, [r2, #20]
    3eaa:	2302      	movs	r3, #2
    3eac:	430b      	orrs	r3, r1
    3eae:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3eb0:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    3eb2:	e02f      	b.n	3f14 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    3eb4:	491b      	ldr	r1, [pc, #108]	; (3f24 <system_clock_source_enable+0xb8>)
    3eb6:	680b      	ldr	r3, [r1, #0]
    3eb8:	2202      	movs	r2, #2
    3eba:	4313      	orrs	r3, r2
    3ebc:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    3ebe:	4b17      	ldr	r3, [pc, #92]	; (3f1c <system_clock_source_enable+0xb0>)
    3ec0:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3ec2:	1c19      	adds	r1, r3, #0
    3ec4:	32fe      	adds	r2, #254	; 0xfe
    3ec6:	68cb      	ldr	r3, [r1, #12]
    3ec8:	4213      	tst	r3, r2
    3eca:	d0fc      	beq.n	3ec6 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3ecc:	4a15      	ldr	r2, [pc, #84]	; (3f24 <system_clock_source_enable+0xb8>)
    3ece:	6891      	ldr	r1, [r2, #8]
    3ed0:	4b12      	ldr	r3, [pc, #72]	; (3f1c <system_clock_source_enable+0xb0>)
    3ed2:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3ed4:	6852      	ldr	r2, [r2, #4]
    3ed6:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    3ed8:	2200      	movs	r2, #0
    3eda:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3edc:	1c19      	adds	r1, r3, #0
    3ede:	3201      	adds	r2, #1
    3ee0:	32ff      	adds	r2, #255	; 0xff
    3ee2:	68cb      	ldr	r3, [r1, #12]
    3ee4:	4213      	tst	r3, r2
    3ee6:	d0fc      	beq.n	3ee2 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3ee8:	4b0e      	ldr	r3, [pc, #56]	; (3f24 <system_clock_source_enable+0xb8>)
    3eea:	681b      	ldr	r3, [r3, #0]
    3eec:	b29b      	uxth	r3, r3
    3eee:	4a0b      	ldr	r2, [pc, #44]	; (3f1c <system_clock_source_enable+0xb0>)
    3ef0:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3ef2:	2000      	movs	r0, #0
    3ef4:	e00e      	b.n	3f14 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    3ef6:	4909      	ldr	r1, [pc, #36]	; (3f1c <system_clock_source_enable+0xb0>)
    3ef8:	2228      	movs	r2, #40	; 0x28
    3efa:	5c88      	ldrb	r0, [r1, r2]
    3efc:	2302      	movs	r3, #2
    3efe:	4303      	orrs	r3, r0
    3f00:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    3f02:	1c08      	adds	r0, r1, #0
    3f04:	2138      	movs	r1, #56	; 0x38
    3f06:	3a26      	subs	r2, #38	; 0x26
    3f08:	5c43      	ldrb	r3, [r0, r1]
    3f0a:	4213      	tst	r3, r2
    3f0c:	d1fc      	bne.n	3f08 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3f0e:	2000      	movs	r0, #0
    3f10:	e000      	b.n	3f14 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3f12:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    3f14:	4770      	bx	lr
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	00004a90 	.word	0x00004a90
    3f1c:	40000c00 	.word	0x40000c00
    3f20:	40001000 	.word	0x40001000
    3f24:	20000070 	.word	0x20000070

00003f28 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3f28:	2808      	cmp	r0, #8
    3f2a:	d832      	bhi.n	3f92 <system_clock_source_disable+0x6a>
    3f2c:	0080      	lsls	r0, r0, #2
    3f2e:	4b1a      	ldr	r3, [pc, #104]	; (3f98 <system_clock_source_disable+0x70>)
    3f30:	581b      	ldr	r3, [r3, r0]
    3f32:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    3f34:	4a19      	ldr	r2, [pc, #100]	; (3f9c <system_clock_source_disable+0x74>)
    3f36:	7d13      	ldrb	r3, [r2, #20]
    3f38:	2102      	movs	r1, #2
    3f3a:	438b      	bics	r3, r1
    3f3c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3f3e:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    3f40:	e028      	b.n	3f94 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    3f42:	4a17      	ldr	r2, [pc, #92]	; (3fa0 <system_clock_source_disable+0x78>)
    3f44:	6993      	ldr	r3, [r2, #24]
    3f46:	2102      	movs	r1, #2
    3f48:	438b      	bics	r3, r1
    3f4a:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3f4c:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    3f4e:	e021      	b.n	3f94 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    3f50:	4a12      	ldr	r2, [pc, #72]	; (3f9c <system_clock_source_disable+0x74>)
    3f52:	8a13      	ldrh	r3, [r2, #16]
    3f54:	2102      	movs	r1, #2
    3f56:	438b      	bics	r3, r1
    3f58:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3f5a:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3f5c:	e01a      	b.n	3f94 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    3f5e:	4a10      	ldr	r2, [pc, #64]	; (3fa0 <system_clock_source_disable+0x78>)
    3f60:	6953      	ldr	r3, [r2, #20]
    3f62:	2102      	movs	r1, #2
    3f64:	438b      	bics	r3, r1
    3f66:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3f68:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    3f6a:	e013      	b.n	3f94 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    3f6c:	4b0d      	ldr	r3, [pc, #52]	; (3fa4 <system_clock_source_disable+0x7c>)
    3f6e:	681a      	ldr	r2, [r3, #0]
    3f70:	2102      	movs	r1, #2
    3f72:	438a      	bics	r2, r1
    3f74:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3f76:	681b      	ldr	r3, [r3, #0]
    3f78:	b29b      	uxth	r3, r3
    3f7a:	4a08      	ldr	r2, [pc, #32]	; (3f9c <system_clock_source_disable+0x74>)
    3f7c:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3f7e:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    3f80:	e008      	b.n	3f94 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    3f82:	4906      	ldr	r1, [pc, #24]	; (3f9c <system_clock_source_disable+0x74>)
    3f84:	2228      	movs	r2, #40	; 0x28
    3f86:	5c8b      	ldrb	r3, [r1, r2]
    3f88:	2002      	movs	r0, #2
    3f8a:	4383      	bics	r3, r0
    3f8c:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3f8e:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    3f90:	e000      	b.n	3f94 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f92:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    3f94:	4770      	bx	lr
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	00004ab4 	.word	0x00004ab4
    3f9c:	40000c00 	.word	0x40000c00
    3fa0:	40001000 	.word	0x40001000
    3fa4:	20000070 	.word	0x20000070

00003fa8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3faa:	464f      	mov	r7, r9
    3fac:	4646      	mov	r6, r8
    3fae:	b4c0      	push	{r6, r7}
    3fb0:	b089      	sub	sp, #36	; 0x24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    3fb2:	2280      	movs	r2, #128	; 0x80
    3fb4:	0052      	lsls	r2, r2, #1
    3fb6:	4b4e      	ldr	r3, [pc, #312]	; (40f0 <system_clock_init+0x148>)
    3fb8:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    3fba:	3afd      	subs	r2, #253	; 0xfd
    3fbc:	4b4d      	ldr	r3, [pc, #308]	; (40f4 <system_clock_init+0x14c>)
    3fbe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3fc0:	4a4d      	ldr	r2, [pc, #308]	; (40f8 <system_clock_init+0x150>)
    3fc2:	6853      	ldr	r3, [r2, #4]
    3fc4:	211e      	movs	r1, #30
    3fc6:	438b      	bics	r3, r1
    3fc8:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3fca:	2380      	movs	r3, #128	; 0x80
    3fcc:	05db      	lsls	r3, r3, #23
    3fce:	789b      	ldrb	r3, [r3, #2]
    3fd0:	2b02      	cmp	r3, #2
    3fd2:	d009      	beq.n	3fe8 <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3fd4:	2380      	movs	r3, #128	; 0x80
    3fd6:	05db      	lsls	r3, r3, #23
    3fd8:	2201      	movs	r2, #1
    3fda:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    3fdc:	3201      	adds	r2, #1
    3fde:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    3fe0:	1c1a      	adds	r2, r3, #0
    3fe2:	7993      	ldrb	r3, [r2, #6]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d0fc      	beq.n	3fe2 <system_clock_init+0x3a>
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    3fe8:	a805      	add	r0, sp, #20
    3fea:	2380      	movs	r3, #128	; 0x80
    3fec:	021b      	lsls	r3, r3, #8
    3fee:	6043      	str	r3, [r0, #4]
	config->enable_1khz_output  = false;
	config->enable_32khz_output = true;
    3ff0:	2301      	movs	r3, #1
    3ff2:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    3ff4:	2200      	movs	r2, #0
    3ff6:	7282      	strb	r2, [r0, #10]
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    3ff8:	7003      	strb	r3, [r0, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3ffa:	2104      	movs	r1, #4
    3ffc:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    3ffe:	7083      	strb	r3, [r0, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4000:	7242      	strb	r2, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    4002:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4004:	4b3d      	ldr	r3, [pc, #244]	; (40fc <system_clock_init+0x154>)
    4006:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4008:	2005      	movs	r0, #5
    400a:	4b3d      	ldr	r3, [pc, #244]	; (4100 <system_clock_init+0x158>)
    400c:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    400e:	493d      	ldr	r1, [pc, #244]	; (4104 <system_clock_init+0x15c>)
    4010:	2201      	movs	r2, #1
    4012:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4014:	421a      	tst	r2, r3
    4016:	d0fc      	beq.n	4012 <system_clock_init+0x6a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    4018:	4a3a      	ldr	r2, [pc, #232]	; (4104 <system_clock_init+0x15c>)
    401a:	6951      	ldr	r1, [r2, #20]
    401c:	2380      	movs	r3, #128	; 0x80
    401e:	430b      	orrs	r3, r1
    4020:	6153      	str	r3, [r2, #20]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    4022:	a803      	add	r0, sp, #12
    4024:	2501      	movs	r5, #1
    4026:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    4028:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    402a:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    402c:	2307      	movs	r3, #7
    402e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    4030:	2400      	movs	r4, #0
    4032:	7144      	strb	r4, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    4034:	70c5      	strb	r5, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4036:	4b34      	ldr	r3, [pc, #208]	; (4108 <system_clock_init+0x160>)
    4038:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    403a:	2004      	movs	r0, #4
    403c:	4b30      	ldr	r3, [pc, #192]	; (4100 <system_clock_init+0x158>)
    403e:	4798      	blx	r3
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    4040:	4b2b      	ldr	r3, [pc, #172]	; (40f0 <system_clock_init+0x148>)
    4042:	7d1a      	ldrb	r2, [r3, #20]
    4044:	2180      	movs	r1, #128	; 0x80
    4046:	4249      	negs	r1, r1
    4048:	430a      	orrs	r2, r1
    404a:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    404c:	7d19      	ldrb	r1, [r3, #20]
    404e:	2240      	movs	r2, #64	; 0x40
    4050:	430a      	orrs	r2, r1
    4052:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4054:	4b2d      	ldr	r3, [pc, #180]	; (410c <system_clock_init+0x164>)
    4056:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4058:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    405a:	466b      	mov	r3, sp
    405c:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    405e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4060:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4062:	2305      	movs	r3, #5
    4064:	466a      	mov	r2, sp
    4066:	7013      	strb	r3, [r2, #0]
    4068:	2001      	movs	r0, #1
    406a:	4669      	mov	r1, sp
    406c:	4b28      	ldr	r3, [pc, #160]	; (4110 <system_clock_init+0x168>)
    406e:	4698      	mov	r8, r3
    4070:	4798      	blx	r3
    4072:	2001      	movs	r0, #1
    4074:	4f27      	ldr	r7, [pc, #156]	; (4114 <system_clock_init+0x16c>)
    4076:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4078:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    407a:	466b      	mov	r3, sp
    407c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    407e:	2306      	movs	r3, #6
    4080:	4699      	mov	r9, r3
    4082:	466b      	mov	r3, sp
    4084:	464a      	mov	r2, r9
    4086:	701a      	strb	r2, [r3, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4088:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    408a:	725c      	strb	r4, [r3, #9]
    408c:	2002      	movs	r0, #2
    408e:	4669      	mov	r1, sp
    4090:	47c0      	blx	r8
    4092:	2002      	movs	r0, #2
    4094:	47b8      	blx	r7
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_CPUDIV_CPUDIV_Msk) == divider);
	MCLK->CPUDIV.reg = (uint32_t)divider;
    4096:	4e20      	ldr	r6, [pc, #128]	; (4118 <system_clock_init+0x170>)
    4098:	7134      	strb	r4, [r6, #4]
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_LPDIV_LPDIV_Msk) == divider);
	MCLK->LPDIV.reg = (uint32_t)divider;
    409a:	7174      	strb	r4, [r6, #5]
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_BUPDIV_BUPDIV_Msk) == divider);
	MCLK->BUPDIV.reg = (uint32_t)divider;
    409c:	71b4      	strb	r4, [r6, #6]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    409e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    40a0:	466b      	mov	r3, sp
    40a2:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    40a4:	464a      	mov	r2, r9
    40a6:	701a      	strb	r2, [r3, #0]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    40a8:	725c      	strb	r4, [r3, #9]
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    40aa:	721d      	strb	r5, [r3, #8]
    40ac:	2000      	movs	r0, #0
    40ae:	4669      	mov	r1, sp
    40b0:	47c0      	blx	r8
    40b2:	2000      	movs	r0, #0
    40b4:	47b8      	blx	r7
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> (MCLK->CPUDIV.reg - 1));
    40b6:	2000      	movs	r0, #0
    40b8:	4b18      	ldr	r3, [pc, #96]	; (411c <system_clock_init+0x174>)
    40ba:	4798      	blx	r3
    40bc:	7933      	ldrb	r3, [r6, #4]
    40be:	3b01      	subs	r3, #1
    40c0:	40d8      	lsrs	r0, r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    40c2:	4b17      	ldr	r3, [pc, #92]	; (4120 <system_clock_init+0x178>)
    40c4:	4298      	cmp	r0, r3
    40c6:	d80e      	bhi.n	40e6 <system_clock_init+0x13e>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    40c8:	2380      	movs	r3, #128	; 0x80
    40ca:	05db      	lsls	r3, r3, #23
    40cc:	789b      	ldrb	r3, [r3, #2]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d009      	beq.n	40e6 <system_clock_init+0x13e>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    40d2:	2380      	movs	r3, #128	; 0x80
    40d4:	05db      	lsls	r3, r3, #23
    40d6:	2201      	movs	r2, #1
    40d8:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    40da:	2200      	movs	r2, #0
    40dc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    40de:	1c1a      	adds	r2, r3, #0
    40e0:	7993      	ldrb	r3, [r2, #6]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d0fc      	beq.n	40e0 <system_clock_init+0x138>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    40e6:	b009      	add	sp, #36	; 0x24
    40e8:	bc0c      	pop	{r2, r3}
    40ea:	4690      	mov	r8, r2
    40ec:	4699      	mov	r9, r3
    40ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40f0:	40000c00 	.word	0x40000c00
    40f4:	40001400 	.word	0x40001400
    40f8:	41004000 	.word	0x41004000
    40fc:	00003db9 	.word	0x00003db9
    4100:	00003e6d 	.word	0x00003e6d
    4104:	40001000 	.word	0x40001000
    4108:	00003d31 	.word	0x00003d31
    410c:	00004125 	.word	0x00004125
    4110:	00004149 	.word	0x00004149
    4114:	000041f5 	.word	0x000041f5
    4118:	40000400 	.word	0x40000400
    411c:	00004235 	.word	0x00004235
    4120:	00b71b00 	.word	0x00b71b00

00004124 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    4124:	4a06      	ldr	r2, [pc, #24]	; (4140 <system_gclk_init+0x1c>)
    4126:	6951      	ldr	r1, [r2, #20]
    4128:	2340      	movs	r3, #64	; 0x40
    412a:	430b      	orrs	r3, r1
    412c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    412e:	2201      	movs	r2, #1
    4130:	4b04      	ldr	r3, [pc, #16]	; (4144 <system_gclk_init+0x20>)
    4132:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    4134:	1c19      	adds	r1, r3, #0
    4136:	780b      	ldrb	r3, [r1, #0]
    4138:	4213      	tst	r3, r2
    413a:	d1fc      	bne.n	4136 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    413c:	4770      	bx	lr
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	40000400 	.word	0x40000400
    4144:	40001800 	.word	0x40001800

00004148 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    414c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    414e:	784b      	ldrb	r3, [r1, #1]
    4150:	2b00      	cmp	r3, #0
    4152:	d002      	beq.n	415a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4154:	2380      	movs	r3, #128	; 0x80
    4156:	00db      	lsls	r3, r3, #3
    4158:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    415a:	7a4b      	ldrb	r3, [r1, #9]
    415c:	2b00      	cmp	r3, #0
    415e:	d002      	beq.n	4166 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4160:	2380      	movs	r3, #128	; 0x80
    4162:	011b      	lsls	r3, r3, #4
    4164:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4166:	684a      	ldr	r2, [r1, #4]
    4168:	2a01      	cmp	r2, #1
    416a:	d917      	bls.n	419c <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    416c:	1e53      	subs	r3, r2, #1
    416e:	421a      	tst	r2, r3
    4170:	d10f      	bne.n	4192 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4172:	2a02      	cmp	r2, #2
    4174:	d906      	bls.n	4184 <system_gclk_gen_set_config+0x3c>
    4176:	2302      	movs	r3, #2
    4178:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    417a:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    417c:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    417e:	429a      	cmp	r2, r3
    4180:	d8fb      	bhi.n	417a <system_gclk_gen_set_config+0x32>
    4182:	e000      	b.n	4186 <system_gclk_gen_set_config+0x3e>
    4184:	2000      	movs	r0, #0
    4186:	2380      	movs	r3, #128	; 0x80
    4188:	015b      	lsls	r3, r3, #5
    418a:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    418c:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    418e:	4305      	orrs	r5, r0
    4190:	e004      	b.n	419c <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    4192:	0412      	lsls	r2, r2, #16
    4194:	2380      	movs	r3, #128	; 0x80
    4196:	009b      	lsls	r3, r3, #2
    4198:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    419a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    419c:	7a0b      	ldrb	r3, [r1, #8]
    419e:	2b00      	cmp	r3, #0
    41a0:	d002      	beq.n	41a8 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    41a2:	2380      	movs	r3, #128	; 0x80
    41a4:	019b      	lsls	r3, r3, #6
    41a6:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    41a8:	2604      	movs	r6, #4
    41aa:	40a6      	lsls	r6, r4
    41ac:	490d      	ldr	r1, [pc, #52]	; (41e4 <system_gclk_gen_set_config+0x9c>)
    41ae:	4a0e      	ldr	r2, [pc, #56]	; (41e8 <system_gclk_gen_set_config+0xa0>)
    41b0:	684b      	ldr	r3, [r1, #4]
    41b2:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    41b4:	421e      	tst	r6, r3
    41b6:	d1fb      	bne.n	41b0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    41b8:	4b0c      	ldr	r3, [pc, #48]	; (41ec <system_gclk_gen_set_config+0xa4>)
    41ba:	4798      	blx	r3
    41bc:	00a4      	lsls	r4, r4, #2
    41be:	4b09      	ldr	r3, [pc, #36]	; (41e4 <system_gclk_gen_set_config+0x9c>)
    41c0:	469c      	mov	ip, r3
    41c2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    41c4:	6a20      	ldr	r0, [r4, #32]
    41c6:	2380      	movs	r3, #128	; 0x80
    41c8:	005b      	lsls	r3, r3, #1
    41ca:	4018      	ands	r0, r3
    41cc:	4328      	orrs	r0, r5
    41ce:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    41d0:	4661      	mov	r1, ip
    41d2:	4a05      	ldr	r2, [pc, #20]	; (41e8 <system_gclk_gen_set_config+0xa0>)
    41d4:	684b      	ldr	r3, [r1, #4]
    41d6:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    41d8:	421e      	tst	r6, r3
    41da:	d1fb      	bne.n	41d4 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    41dc:	4b04      	ldr	r3, [pc, #16]	; (41f0 <system_gclk_gen_set_config+0xa8>)
    41de:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    41e0:	bd70      	pop	{r4, r5, r6, pc}
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	40001800 	.word	0x40001800
    41e8:	000007fc 	.word	0x000007fc
    41ec:	00003c2d 	.word	0x00003c2d
    41f0:	00003c6d 	.word	0x00003c6d

000041f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    41f4:	b510      	push	{r4, lr}
    41f6:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    41f8:	2204      	movs	r2, #4
    41fa:	4082      	lsls	r2, r0
    41fc:	4809      	ldr	r0, [pc, #36]	; (4224 <system_gclk_gen_enable+0x30>)
    41fe:	490a      	ldr	r1, [pc, #40]	; (4228 <system_gclk_gen_enable+0x34>)
    4200:	6843      	ldr	r3, [r0, #4]
    4202:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    4204:	421a      	tst	r2, r3
    4206:	d1fb      	bne.n	4200 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4208:	4b08      	ldr	r3, [pc, #32]	; (422c <system_gclk_gen_enable+0x38>)
    420a:	4798      	blx	r3
    420c:	00a4      	lsls	r4, r4, #2
    420e:	4b05      	ldr	r3, [pc, #20]	; (4224 <system_gclk_gen_enable+0x30>)
    4210:	469c      	mov	ip, r3
    4212:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    4214:	6a23      	ldr	r3, [r4, #32]
    4216:	2280      	movs	r2, #128	; 0x80
    4218:	0052      	lsls	r2, r2, #1
    421a:	4313      	orrs	r3, r2
    421c:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    421e:	4b04      	ldr	r3, [pc, #16]	; (4230 <system_gclk_gen_enable+0x3c>)
    4220:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4222:	bd10      	pop	{r4, pc}
    4224:	40001800 	.word	0x40001800
    4228:	000007fc 	.word	0x000007fc
    422c:	00003c2d 	.word	0x00003c2d
    4230:	00003c6d 	.word	0x00003c6d

00004234 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4236:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4238:	2204      	movs	r2, #4
    423a:	4082      	lsls	r2, r0
    423c:	4812      	ldr	r0, [pc, #72]	; (4288 <system_gclk_gen_get_hz+0x54>)
    423e:	4913      	ldr	r1, [pc, #76]	; (428c <system_gclk_gen_get_hz+0x58>)
    4240:	6843      	ldr	r3, [r0, #4]
    4242:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    4244:	421a      	tst	r2, r3
    4246:	d1fb      	bne.n	4240 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4248:	4b11      	ldr	r3, [pc, #68]	; (4290 <system_gclk_gen_get_hz+0x5c>)
    424a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    424c:	4f0e      	ldr	r7, [pc, #56]	; (4288 <system_gclk_gen_get_hz+0x54>)
    424e:	3408      	adds	r4, #8
    4250:	00a4      	lsls	r4, r4, #2
    4252:	59e3      	ldr	r3, [r4, r7]
    4254:	200f      	movs	r0, #15
    4256:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4258:	4b0e      	ldr	r3, [pc, #56]	; (4294 <system_gclk_gen_get_hz+0x60>)
    425a:	4798      	blx	r3
    425c:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    425e:	59e5      	ldr	r5, [r4, r7]
    4260:	04ed      	lsls	r5, r5, #19
    4262:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    4264:	59e4      	ldr	r4, [r4, r7]
    4266:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4268:	4b0b      	ldr	r3, [pc, #44]	; (4298 <system_gclk_gen_get_hz+0x64>)
    426a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    426c:	2d00      	cmp	r5, #0
    426e:	d107      	bne.n	4280 <system_gclk_gen_get_hz+0x4c>
    4270:	2c01      	cmp	r4, #1
    4272:	d907      	bls.n	4284 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    4274:	1c30      	adds	r0, r6, #0
    4276:	1c21      	adds	r1, r4, #0
    4278:	4b08      	ldr	r3, [pc, #32]	; (429c <system_gclk_gen_get_hz+0x68>)
    427a:	4798      	blx	r3
    427c:	1c06      	adds	r6, r0, #0
    427e:	e001      	b.n	4284 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4280:	3401      	adds	r4, #1
    4282:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    4284:	1c30      	adds	r0, r6, #0
    4286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4288:	40001800 	.word	0x40001800
    428c:	000007fc 	.word	0x000007fc
    4290:	00003c2d 	.word	0x00003c2d
    4294:	00003c9d 	.word	0x00003c9d
    4298:	00003c6d 	.word	0x00003c6d
    429c:	0000461d 	.word	0x0000461d

000042a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    42a0:	b510      	push	{r4, lr}
    42a2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42a4:	4b08      	ldr	r3, [pc, #32]	; (42c8 <system_gclk_chan_enable+0x28>)
    42a6:	4798      	blx	r3
    42a8:	00a4      	lsls	r4, r4, #2
    42aa:	4b08      	ldr	r3, [pc, #32]	; (42cc <system_gclk_chan_enable+0x2c>)
    42ac:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    42ae:	2280      	movs	r2, #128	; 0x80
    42b0:	5881      	ldr	r1, [r0, r2]
    42b2:	2340      	movs	r3, #64	; 0x40
    42b4:	430b      	orrs	r3, r1
    42b6:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    42b8:	2180      	movs	r1, #128	; 0x80
    42ba:	3a40      	subs	r2, #64	; 0x40
    42bc:	5843      	ldr	r3, [r0, r1]
    42be:	421a      	tst	r2, r3
    42c0:	d0fc      	beq.n	42bc <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    42c2:	4b03      	ldr	r3, [pc, #12]	; (42d0 <system_gclk_chan_enable+0x30>)
    42c4:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    42c6:	bd10      	pop	{r4, pc}
    42c8:	00003c2d 	.word	0x00003c2d
    42cc:	40001800 	.word	0x40001800
    42d0:	00003c6d 	.word	0x00003c6d

000042d4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    42d4:	b510      	push	{r4, lr}
    42d6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42d8:	4b08      	ldr	r3, [pc, #32]	; (42fc <system_gclk_chan_disable+0x28>)
    42da:	4798      	blx	r3
    42dc:	00a4      	lsls	r4, r4, #2
    42de:	4b08      	ldr	r3, [pc, #32]	; (4300 <system_gclk_chan_disable+0x2c>)
    42e0:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    42e2:	2280      	movs	r2, #128	; 0x80
    42e4:	5883      	ldr	r3, [r0, r2]
    42e6:	2140      	movs	r1, #64	; 0x40
    42e8:	438b      	bics	r3, r1
    42ea:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    42ec:	3140      	adds	r1, #64	; 0x40
    42ee:	3a40      	subs	r2, #64	; 0x40
    42f0:	5843      	ldr	r3, [r0, r1]
    42f2:	421a      	tst	r2, r3
    42f4:	d1fc      	bne.n	42f0 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    42f6:	4b03      	ldr	r3, [pc, #12]	; (4304 <system_gclk_chan_disable+0x30>)
    42f8:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    42fa:	bd10      	pop	{r4, pc}
    42fc:	00003c2d 	.word	0x00003c2d
    4300:	40001800 	.word	0x40001800
    4304:	00003c6d 	.word	0x00003c6d

00004308 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4308:	b538      	push	{r3, r4, r5, lr}
    430a:	1c04      	adds	r4, r0, #0
    430c:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    430e:	4b05      	ldr	r3, [pc, #20]	; (4324 <system_gclk_chan_set_config+0x1c>)
    4310:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    4312:	782b      	ldrb	r3, [r5, #0]
    4314:	220f      	movs	r2, #15
    4316:	4013      	ands	r3, r2
    4318:	3420      	adds	r4, #32
    431a:	00a4      	lsls	r4, r4, #2
    431c:	4a02      	ldr	r2, [pc, #8]	; (4328 <system_gclk_chan_set_config+0x20>)
    431e:	50a3      	str	r3, [r4, r2]


}
    4320:	bd38      	pop	{r3, r4, r5, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	000042d5 	.word	0x000042d5
    4328:	40001800 	.word	0x40001800

0000432c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    432c:	b510      	push	{r4, lr}
    432e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4330:	4b06      	ldr	r3, [pc, #24]	; (434c <system_gclk_chan_get_hz+0x20>)
    4332:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    4334:	3420      	adds	r4, #32
    4336:	00a4      	lsls	r4, r4, #2
    4338:	4b05      	ldr	r3, [pc, #20]	; (4350 <system_gclk_chan_get_hz+0x24>)
    433a:	58e3      	ldr	r3, [r4, r3]
    433c:	240f      	movs	r4, #15
    433e:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4340:	4b04      	ldr	r3, [pc, #16]	; (4354 <system_gclk_chan_get_hz+0x28>)
    4342:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4344:	1c20      	adds	r0, r4, #0
    4346:	4b04      	ldr	r3, [pc, #16]	; (4358 <system_gclk_chan_get_hz+0x2c>)
    4348:	4798      	blx	r3
}
    434a:	bd10      	pop	{r4, pc}
    434c:	00003c2d 	.word	0x00003c2d
    4350:	40001800 	.word	0x40001800
    4354:	00003c6d 	.word	0x00003c6d
    4358:	00004235 	.word	0x00004235

0000435c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    435c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    435e:	78d3      	ldrb	r3, [r2, #3]
    4360:	2b00      	cmp	r3, #0
    4362:	d11e      	bne.n	43a2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4364:	7814      	ldrb	r4, [r2, #0]
    4366:	2c80      	cmp	r4, #128	; 0x80
    4368:	d004      	beq.n	4374 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    436a:	0624      	lsls	r4, r4, #24
    436c:	2380      	movs	r3, #128	; 0x80
    436e:	025b      	lsls	r3, r3, #9
    4370:	431c      	orrs	r4, r3
    4372:	e000      	b.n	4376 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4374:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4376:	7853      	ldrb	r3, [r2, #1]
    4378:	2502      	movs	r5, #2
    437a:	43ab      	bics	r3, r5
    437c:	d10a      	bne.n	4394 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    437e:	7893      	ldrb	r3, [r2, #2]
    4380:	2b00      	cmp	r3, #0
    4382:	d103      	bne.n	438c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4384:	2380      	movs	r3, #128	; 0x80
    4386:	029b      	lsls	r3, r3, #10
    4388:	431c      	orrs	r4, r3
    438a:	e002      	b.n	4392 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    438c:	23c0      	movs	r3, #192	; 0xc0
    438e:	02db      	lsls	r3, r3, #11
    4390:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4392:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4394:	7853      	ldrb	r3, [r2, #1]
    4396:	3b01      	subs	r3, #1
    4398:	2b01      	cmp	r3, #1
    439a:	d812      	bhi.n	43c2 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    439c:	4b18      	ldr	r3, [pc, #96]	; (4400 <_system_pinmux_config+0xa4>)
    439e:	401c      	ands	r4, r3
    43a0:	e00f      	b.n	43c2 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    43a2:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    43a4:	040b      	lsls	r3, r1, #16
    43a6:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    43a8:	24a0      	movs	r4, #160	; 0xa0
    43aa:	05e4      	lsls	r4, r4, #23
    43ac:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43ae:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    43b0:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    43b2:	24d0      	movs	r4, #208	; 0xd0
    43b4:	0624      	lsls	r4, r4, #24
    43b6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43b8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    43ba:	78d3      	ldrb	r3, [r2, #3]
    43bc:	2b00      	cmp	r3, #0
    43be:	d018      	beq.n	43f2 <_system_pinmux_config+0x96>
    43c0:	e01c      	b.n	43fc <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    43c2:	040b      	lsls	r3, r1, #16
    43c4:	0c1b      	lsrs	r3, r3, #16
    43c6:	25a0      	movs	r5, #160	; 0xa0
    43c8:	05ed      	lsls	r5, r5, #23
    43ca:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    43cc:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43ce:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    43d0:	0c0b      	lsrs	r3, r1, #16
    43d2:	25d0      	movs	r5, #208	; 0xd0
    43d4:	062d      	lsls	r5, r5, #24
    43d6:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    43d8:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    43da:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    43dc:	78d3      	ldrb	r3, [r2, #3]
    43de:	2b00      	cmp	r3, #0
    43e0:	d10c      	bne.n	43fc <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    43e2:	0363      	lsls	r3, r4, #13
    43e4:	d505      	bpl.n	43f2 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    43e6:	7893      	ldrb	r3, [r2, #2]
    43e8:	2b01      	cmp	r3, #1
    43ea:	d101      	bne.n	43f0 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    43ec:	6181      	str	r1, [r0, #24]
    43ee:	e000      	b.n	43f2 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    43f0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    43f2:	7853      	ldrb	r3, [r2, #1]
    43f4:	3b01      	subs	r3, #1
    43f6:	2b01      	cmp	r3, #1
    43f8:	d800      	bhi.n	43fc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    43fa:	6081      	str	r1, [r0, #8]
		}
	}
}
    43fc:	bd30      	pop	{r4, r5, pc}
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	fffbffff 	.word	0xfffbffff

00004404 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4404:	b508      	push	{r3, lr}
    4406:	1c03      	adds	r3, r0, #0
    4408:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    440a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    440c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    440e:	2900      	cmp	r1, #0
    4410:	d104      	bne.n	441c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    4412:	0958      	lsrs	r0, r3, #5
    4414:	01c0      	lsls	r0, r0, #7
    4416:	4905      	ldr	r1, [pc, #20]	; (442c <system_pinmux_pin_set_config+0x28>)
    4418:	468c      	mov	ip, r1
    441a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    441c:	211f      	movs	r1, #31
    441e:	400b      	ands	r3, r1
    4420:	391e      	subs	r1, #30
    4422:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    4424:	4b02      	ldr	r3, [pc, #8]	; (4430 <system_pinmux_pin_set_config+0x2c>)
    4426:	4798      	blx	r3
}
    4428:	bd08      	pop	{r3, pc}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	40002800 	.word	0x40002800
    4430:	0000435d 	.word	0x0000435d

00004434 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4434:	4770      	bx	lr
    4436:	46c0      	nop			; (mov r8, r8)

00004438 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4438:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    443a:	4b05      	ldr	r3, [pc, #20]	; (4450 <system_init+0x18>)
    443c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    443e:	4b05      	ldr	r3, [pc, #20]	; (4454 <system_init+0x1c>)
    4440:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4442:	4b05      	ldr	r3, [pc, #20]	; (4458 <system_init+0x20>)
    4444:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4446:	4b05      	ldr	r3, [pc, #20]	; (445c <system_init+0x24>)
    4448:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    444a:	4b05      	ldr	r3, [pc, #20]	; (4460 <system_init+0x28>)
    444c:	4798      	blx	r3
}
    444e:	bd08      	pop	{r3, pc}
    4450:	00003fa9 	.word	0x00003fa9
    4454:	00003c29 	.word	0x00003c29
    4458:	00000f8d 	.word	0x00000f8d
    445c:	00000fcd 	.word	0x00000fcd
    4460:	00004435 	.word	0x00004435

00004464 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    4464:	e7fe      	b.n	4464 <Dummy_Handler>
    4466:	46c0      	nop			; (mov r8, r8)

00004468 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4468:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    446a:	4b1d      	ldr	r3, [pc, #116]	; (44e0 <Reset_Handler+0x78>)
    446c:	4a1d      	ldr	r2, [pc, #116]	; (44e4 <Reset_Handler+0x7c>)
    446e:	429a      	cmp	r2, r3
    4470:	d003      	beq.n	447a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4472:	4b1d      	ldr	r3, [pc, #116]	; (44e8 <Reset_Handler+0x80>)
    4474:	4a1a      	ldr	r2, [pc, #104]	; (44e0 <Reset_Handler+0x78>)
    4476:	429a      	cmp	r2, r3
    4478:	d304      	bcc.n	4484 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    447a:	4b1c      	ldr	r3, [pc, #112]	; (44ec <Reset_Handler+0x84>)
    447c:	4a1c      	ldr	r2, [pc, #112]	; (44f0 <Reset_Handler+0x88>)
    447e:	429a      	cmp	r2, r3
    4480:	d310      	bcc.n	44a4 <Reset_Handler+0x3c>
    4482:	e01e      	b.n	44c2 <Reset_Handler+0x5a>
    4484:	4a1b      	ldr	r2, [pc, #108]	; (44f4 <Reset_Handler+0x8c>)
    4486:	4b18      	ldr	r3, [pc, #96]	; (44e8 <Reset_Handler+0x80>)
    4488:	3303      	adds	r3, #3
    448a:	1a9b      	subs	r3, r3, r2
    448c:	089b      	lsrs	r3, r3, #2
    448e:	3301      	adds	r3, #1
    4490:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4492:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4494:	4812      	ldr	r0, [pc, #72]	; (44e0 <Reset_Handler+0x78>)
    4496:	4913      	ldr	r1, [pc, #76]	; (44e4 <Reset_Handler+0x7c>)
    4498:	588c      	ldr	r4, [r1, r2]
    449a:	5084      	str	r4, [r0, r2]
    449c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    449e:	429a      	cmp	r2, r3
    44a0:	d1fa      	bne.n	4498 <Reset_Handler+0x30>
    44a2:	e7ea      	b.n	447a <Reset_Handler+0x12>
    44a4:	4a14      	ldr	r2, [pc, #80]	; (44f8 <Reset_Handler+0x90>)
    44a6:	4b11      	ldr	r3, [pc, #68]	; (44ec <Reset_Handler+0x84>)
    44a8:	3303      	adds	r3, #3
    44aa:	1a9b      	subs	r3, r3, r2
    44ac:	089b      	lsrs	r3, r3, #2
    44ae:	3301      	adds	r3, #1
    44b0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    44b2:	2200      	movs	r2, #0
                *pDest++ = 0;
    44b4:	480e      	ldr	r0, [pc, #56]	; (44f0 <Reset_Handler+0x88>)
    44b6:	2100      	movs	r1, #0
    44b8:	1814      	adds	r4, r2, r0
    44ba:	6021      	str	r1, [r4, #0]
    44bc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    44be:	429a      	cmp	r2, r3
    44c0:	d1fa      	bne.n	44b8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    44c2:	4a0e      	ldr	r2, [pc, #56]	; (44fc <Reset_Handler+0x94>)
    44c4:	21ff      	movs	r1, #255	; 0xff
    44c6:	4b0e      	ldr	r3, [pc, #56]	; (4500 <Reset_Handler+0x98>)
    44c8:	438b      	bics	r3, r1
    44ca:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    44cc:	4a0d      	ldr	r2, [pc, #52]	; (4504 <Reset_Handler+0x9c>)
    44ce:	6851      	ldr	r1, [r2, #4]
    44d0:	2380      	movs	r3, #128	; 0x80
    44d2:	430b      	orrs	r3, r1
    44d4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    44d6:	4b0c      	ldr	r3, [pc, #48]	; (4508 <Reset_Handler+0xa0>)
    44d8:	4798      	blx	r3

        /* Branch to main function */
        main();
    44da:	4b0c      	ldr	r3, [pc, #48]	; (450c <Reset_Handler+0xa4>)
    44dc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    44de:	e7fe      	b.n	44de <Reset_Handler+0x76>
    44e0:	20000000 	.word	0x20000000
    44e4:	00004af8 	.word	0x00004af8
    44e8:	20000018 	.word	0x20000018
    44ec:	20002084 	.word	0x20002084
    44f0:	20000018 	.word	0x20000018
    44f4:	20000004 	.word	0x20000004
    44f8:	2000001c 	.word	0x2000001c
    44fc:	e000ed00 	.word	0xe000ed00
    4500:	00000000 	.word	0x00000000
    4504:	41004000 	.word	0x41004000
    4508:	000049b5 	.word	0x000049b5
    450c:	00004515 	.word	0x00004515

00004510 <extint_callback>:
void extint_callback(void)
{
	while(true)
	{
		// do some stuff
	}
    4510:	e7fe      	b.n	4510 <extint_callback>
    4512:	46c0      	nop			; (mov r8, r8)

00004514 <main>:
 */
#include <asf.h>
#include "HAL.h"

int main (void)
{
    4514:	b570      	push	{r4, r5, r6, lr}
	system_init();
    4516:	4b28      	ldr	r3, [pc, #160]	; (45b8 <main+0xa4>)
    4518:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    451a:	2401      	movs	r4, #1
    451c:	4b27      	ldr	r3, [pc, #156]	; (45bc <main+0xa8>)
    451e:	701c      	strb	r4, [r3, #0]
    4520:	f3bf 8f5f 	dmb	sy
    4524:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	
	/* Configure various sensors and their associated peripherals */
  	configure_i2c();
    4526:	4b26      	ldr	r3, [pc, #152]	; (45c0 <main+0xac>)
    4528:	4798      	blx	r3
  	
 	configure_mag_sw_int(extint_callback);
    452a:	4826      	ldr	r0, [pc, #152]	; (45c4 <main+0xb0>)
    452c:	4b26      	ldr	r3, [pc, #152]	; (45c8 <main+0xb4>)
    452e:	4798      	blx	r3
  	configure_S70FL01(S70FL01_CS1, false);
    4530:	2005      	movs	r0, #5
    4532:	2100      	movs	r1, #0
    4534:	4b25      	ldr	r3, [pc, #148]	; (45cc <main+0xb8>)
    4536:	4798      	blx	r3
  	configure_SP1ML();
    4538:	4b25      	ldr	r3, [pc, #148]	; (45d0 <main+0xbc>)
    453a:	4798      	blx	r3
  	configure_ADXL375(); 	
    453c:	4b25      	ldr	r3, [pc, #148]	; (45d4 <main+0xc0>)
    453e:	4798      	blx	r3
 	configure_sleepmode();
    4540:	4b25      	ldr	r3, [pc, #148]	; (45d8 <main+0xc4>)
    4542:	4798      	blx	r3
  	configure_rtc();
    4544:	4b25      	ldr	r3, [pc, #148]	; (45dc <main+0xc8>)
    4546:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4548:	2280      	movs	r2, #128	; 0x80
    454a:	0512      	lsls	r2, r2, #20
    454c:	4b24      	ldr	r3, [pc, #144]	; (45e0 <main+0xcc>)
    454e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SP1ML_EN_PIN,true);
	configure_ADT7420();
    4550:	4b24      	ldr	r3, [pc, #144]	; (45e4 <main+0xd0>)
    4552:	4798      	blx	r3
	configure_databuffers();
    4554:	4b24      	ldr	r3, [pc, #144]	; (45e8 <main+0xd4>)
    4556:	4798      	blx	r3
	
	// Assume that we are in active mode during stationary period
	ucActiveInactive_Mode = ACTIVE_MODE;
    4558:	2200      	movs	r2, #0
    455a:	4b24      	ldr	r3, [pc, #144]	; (45ec <main+0xd8>)
    455c:	701a      	strb	r2, [r3, #0]
	ucMotion_State = STATIONARY_MODE;
    455e:	4b24      	ldr	r3, [pc, #144]	; (45f0 <main+0xdc>)
    4560:	701c      	strb	r4, [r3, #0]
	
	// Per Dr. Buck, 30C is the pivot point -- These don't necessarily have to be the same, they can build in some hysteresis depending upon the subject
	ucActivityTemperatureThreshold = 30;
    4562:	231e      	movs	r3, #30
    4564:	4a23      	ldr	r2, [pc, #140]	; (45f4 <main+0xe0>)
    4566:	7013      	strb	r3, [r2, #0]
	ucInactivityTemperatureThreshold = 30;
    4568:	4a23      	ldr	r2, [pc, #140]	; (45f8 <main+0xe4>)
    456a:	7013      	strb	r3, [r2, #0]
	
	while(true)
	{	
		if((uiAccelerometerMatrixPtr > (300 - 32)) || (ucTemperatureArrayPtr > 71)){
    456c:	4c23      	ldr	r4, [pc, #140]	; (45fc <main+0xe8>)
			// Accelerometer total buffer size minus the ADXL375 internal FIFO size
			// If either buffer is full enough that another set of samples cannot be stored, trigger an offload
			offload_data();
    456e:	4e24      	ldr	r6, [pc, #144]	; (4600 <main+0xec>)
			uiAccelerometerMatrixPtr = 0;
    4570:	1c25      	adds	r5, r4, #0
	ucActivityTemperatureThreshold = 30;
	ucInactivityTemperatureThreshold = 30;
	
	while(true)
	{	
		if((uiAccelerometerMatrixPtr > (300 - 32)) || (ucTemperatureArrayPtr > 71)){
    4572:	8822      	ldrh	r2, [r4, #0]
    4574:	2386      	movs	r3, #134	; 0x86
    4576:	005b      	lsls	r3, r3, #1
    4578:	429a      	cmp	r2, r3
    457a:	d803      	bhi.n	4584 <main+0x70>
    457c:	4b21      	ldr	r3, [pc, #132]	; (4604 <main+0xf0>)
    457e:	781b      	ldrb	r3, [r3, #0]
    4580:	2b47      	cmp	r3, #71	; 0x47
    4582:	d905      	bls.n	4590 <main+0x7c>
			// Accelerometer total buffer size minus the ADXL375 internal FIFO size
			// If either buffer is full enough that another set of samples cannot be stored, trigger an offload
			offload_data();
    4584:	47b0      	blx	r6
			uiAccelerometerMatrixPtr = 0;
    4586:	2300      	movs	r3, #0
    4588:	802b      	strh	r3, [r5, #0]
			ucTemperatureArrayPtr = 0;
    458a:	4b1e      	ldr	r3, [pc, #120]	; (4604 <main+0xf0>)
    458c:	2200      	movs	r2, #0
    458e:	701a      	strb	r2, [r3, #0]
		}
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die (ring buffer)
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    4590:	4b1d      	ldr	r3, [pc, #116]	; (4608 <main+0xf4>)
    4592:	681a      	ldr	r2, [r3, #0]
    4594:	4b1d      	ldr	r3, [pc, #116]	; (460c <main+0xf8>)
    4596:	429a      	cmp	r2, r3
    4598:	d908      	bls.n	45ac <main+0x98>
			S70FL01_active_die++;
			S70FL01_active_die %= 2;
    459a:	4a1d      	ldr	r2, [pc, #116]	; (4610 <main+0xfc>)
			ucTemperatureArrayPtr = 0;
		}
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die (ring buffer)
		if(S70FL01_address >= S70FL01_MAX_ADDR){
			S70FL01_active_die++;
    459c:	7813      	ldrb	r3, [r2, #0]
    459e:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    45a0:	2101      	movs	r1, #1
    45a2:	400b      	ands	r3, r1
    45a4:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    45a6:	2200      	movs	r2, #0
    45a8:	4b17      	ldr	r3, [pc, #92]	; (4608 <main+0xf4>)
    45aa:	601a      	str	r2, [r3, #0]
		}
		ADT7420_read_temp();
    45ac:	4b19      	ldr	r3, [pc, #100]	; (4614 <main+0x100>)
    45ae:	4798      	blx	r3
		// Housekeeping done -- go back to sleep
		sleep();
    45b0:	4b19      	ldr	r3, [pc, #100]	; (4618 <main+0x104>)
    45b2:	4798      	blx	r3
	}
    45b4:	e7dd      	b.n	4572 <main+0x5e>
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00004439 	.word	0x00004439
    45bc:	20000014 	.word	0x20000014
    45c0:	00002071 	.word	0x00002071
    45c4:	00004511 	.word	0x00004511
    45c8:	00002109 	.word	0x00002109
    45cc:	000026d1 	.word	0x000026d1
    45d0:	00002ce9 	.word	0x00002ce9
    45d4:	00000ad5 	.word	0x00000ad5
    45d8:	00001f4d 	.word	0x00001f4d
    45dc:	00001fa1 	.word	0x00001fa1
    45e0:	40002800 	.word	0x40002800
    45e4:	00000115 	.word	0x00000115
    45e8:	000021c1 	.word	0x000021c1
    45ec:	20001e9d 	.word	0x20001e9d
    45f0:	20001e9c 	.word	0x20001e9c
    45f4:	20001462 	.word	0x20001462
    45f8:	20001c32 	.word	0x20001c32
    45fc:	20001454 	.word	0x20001454
    4600:	0000225d 	.word	0x0000225d
    4604:	20001c33 	.word	0x20001c33
    4608:	20001e44 	.word	0x20001e44
    460c:	1fffffff 	.word	0x1fffffff
    4610:	20001c36 	.word	0x20001c36
    4614:	000001ad 	.word	0x000001ad
    4618:	00001f09 	.word	0x00001f09

0000461c <__aeabi_uidiv>:
    461c:	2200      	movs	r2, #0
    461e:	0843      	lsrs	r3, r0, #1
    4620:	428b      	cmp	r3, r1
    4622:	d374      	bcc.n	470e <__aeabi_uidiv+0xf2>
    4624:	0903      	lsrs	r3, r0, #4
    4626:	428b      	cmp	r3, r1
    4628:	d35f      	bcc.n	46ea <__aeabi_uidiv+0xce>
    462a:	0a03      	lsrs	r3, r0, #8
    462c:	428b      	cmp	r3, r1
    462e:	d344      	bcc.n	46ba <__aeabi_uidiv+0x9e>
    4630:	0b03      	lsrs	r3, r0, #12
    4632:	428b      	cmp	r3, r1
    4634:	d328      	bcc.n	4688 <__aeabi_uidiv+0x6c>
    4636:	0c03      	lsrs	r3, r0, #16
    4638:	428b      	cmp	r3, r1
    463a:	d30d      	bcc.n	4658 <__aeabi_uidiv+0x3c>
    463c:	22ff      	movs	r2, #255	; 0xff
    463e:	0209      	lsls	r1, r1, #8
    4640:	ba12      	rev	r2, r2
    4642:	0c03      	lsrs	r3, r0, #16
    4644:	428b      	cmp	r3, r1
    4646:	d302      	bcc.n	464e <__aeabi_uidiv+0x32>
    4648:	1212      	asrs	r2, r2, #8
    464a:	0209      	lsls	r1, r1, #8
    464c:	d065      	beq.n	471a <__aeabi_uidiv+0xfe>
    464e:	0b03      	lsrs	r3, r0, #12
    4650:	428b      	cmp	r3, r1
    4652:	d319      	bcc.n	4688 <__aeabi_uidiv+0x6c>
    4654:	e000      	b.n	4658 <__aeabi_uidiv+0x3c>
    4656:	0a09      	lsrs	r1, r1, #8
    4658:	0bc3      	lsrs	r3, r0, #15
    465a:	428b      	cmp	r3, r1
    465c:	d301      	bcc.n	4662 <__aeabi_uidiv+0x46>
    465e:	03cb      	lsls	r3, r1, #15
    4660:	1ac0      	subs	r0, r0, r3
    4662:	4152      	adcs	r2, r2
    4664:	0b83      	lsrs	r3, r0, #14
    4666:	428b      	cmp	r3, r1
    4668:	d301      	bcc.n	466e <__aeabi_uidiv+0x52>
    466a:	038b      	lsls	r3, r1, #14
    466c:	1ac0      	subs	r0, r0, r3
    466e:	4152      	adcs	r2, r2
    4670:	0b43      	lsrs	r3, r0, #13
    4672:	428b      	cmp	r3, r1
    4674:	d301      	bcc.n	467a <__aeabi_uidiv+0x5e>
    4676:	034b      	lsls	r3, r1, #13
    4678:	1ac0      	subs	r0, r0, r3
    467a:	4152      	adcs	r2, r2
    467c:	0b03      	lsrs	r3, r0, #12
    467e:	428b      	cmp	r3, r1
    4680:	d301      	bcc.n	4686 <__aeabi_uidiv+0x6a>
    4682:	030b      	lsls	r3, r1, #12
    4684:	1ac0      	subs	r0, r0, r3
    4686:	4152      	adcs	r2, r2
    4688:	0ac3      	lsrs	r3, r0, #11
    468a:	428b      	cmp	r3, r1
    468c:	d301      	bcc.n	4692 <__aeabi_uidiv+0x76>
    468e:	02cb      	lsls	r3, r1, #11
    4690:	1ac0      	subs	r0, r0, r3
    4692:	4152      	adcs	r2, r2
    4694:	0a83      	lsrs	r3, r0, #10
    4696:	428b      	cmp	r3, r1
    4698:	d301      	bcc.n	469e <__aeabi_uidiv+0x82>
    469a:	028b      	lsls	r3, r1, #10
    469c:	1ac0      	subs	r0, r0, r3
    469e:	4152      	adcs	r2, r2
    46a0:	0a43      	lsrs	r3, r0, #9
    46a2:	428b      	cmp	r3, r1
    46a4:	d301      	bcc.n	46aa <__aeabi_uidiv+0x8e>
    46a6:	024b      	lsls	r3, r1, #9
    46a8:	1ac0      	subs	r0, r0, r3
    46aa:	4152      	adcs	r2, r2
    46ac:	0a03      	lsrs	r3, r0, #8
    46ae:	428b      	cmp	r3, r1
    46b0:	d301      	bcc.n	46b6 <__aeabi_uidiv+0x9a>
    46b2:	020b      	lsls	r3, r1, #8
    46b4:	1ac0      	subs	r0, r0, r3
    46b6:	4152      	adcs	r2, r2
    46b8:	d2cd      	bcs.n	4656 <__aeabi_uidiv+0x3a>
    46ba:	09c3      	lsrs	r3, r0, #7
    46bc:	428b      	cmp	r3, r1
    46be:	d301      	bcc.n	46c4 <__aeabi_uidiv+0xa8>
    46c0:	01cb      	lsls	r3, r1, #7
    46c2:	1ac0      	subs	r0, r0, r3
    46c4:	4152      	adcs	r2, r2
    46c6:	0983      	lsrs	r3, r0, #6
    46c8:	428b      	cmp	r3, r1
    46ca:	d301      	bcc.n	46d0 <__aeabi_uidiv+0xb4>
    46cc:	018b      	lsls	r3, r1, #6
    46ce:	1ac0      	subs	r0, r0, r3
    46d0:	4152      	adcs	r2, r2
    46d2:	0943      	lsrs	r3, r0, #5
    46d4:	428b      	cmp	r3, r1
    46d6:	d301      	bcc.n	46dc <__aeabi_uidiv+0xc0>
    46d8:	014b      	lsls	r3, r1, #5
    46da:	1ac0      	subs	r0, r0, r3
    46dc:	4152      	adcs	r2, r2
    46de:	0903      	lsrs	r3, r0, #4
    46e0:	428b      	cmp	r3, r1
    46e2:	d301      	bcc.n	46e8 <__aeabi_uidiv+0xcc>
    46e4:	010b      	lsls	r3, r1, #4
    46e6:	1ac0      	subs	r0, r0, r3
    46e8:	4152      	adcs	r2, r2
    46ea:	08c3      	lsrs	r3, r0, #3
    46ec:	428b      	cmp	r3, r1
    46ee:	d301      	bcc.n	46f4 <__aeabi_uidiv+0xd8>
    46f0:	00cb      	lsls	r3, r1, #3
    46f2:	1ac0      	subs	r0, r0, r3
    46f4:	4152      	adcs	r2, r2
    46f6:	0883      	lsrs	r3, r0, #2
    46f8:	428b      	cmp	r3, r1
    46fa:	d301      	bcc.n	4700 <__aeabi_uidiv+0xe4>
    46fc:	008b      	lsls	r3, r1, #2
    46fe:	1ac0      	subs	r0, r0, r3
    4700:	4152      	adcs	r2, r2
    4702:	0843      	lsrs	r3, r0, #1
    4704:	428b      	cmp	r3, r1
    4706:	d301      	bcc.n	470c <__aeabi_uidiv+0xf0>
    4708:	004b      	lsls	r3, r1, #1
    470a:	1ac0      	subs	r0, r0, r3
    470c:	4152      	adcs	r2, r2
    470e:	1a41      	subs	r1, r0, r1
    4710:	d200      	bcs.n	4714 <__aeabi_uidiv+0xf8>
    4712:	4601      	mov	r1, r0
    4714:	4152      	adcs	r2, r2
    4716:	4610      	mov	r0, r2
    4718:	4770      	bx	lr
    471a:	e7ff      	b.n	471c <__aeabi_uidiv+0x100>
    471c:	b501      	push	{r0, lr}
    471e:	2000      	movs	r0, #0
    4720:	f000 f8fc 	bl	491c <__aeabi_idiv0>
    4724:	bd02      	pop	{r1, pc}
    4726:	46c0      	nop			; (mov r8, r8)

00004728 <__aeabi_uidivmod>:
    4728:	2900      	cmp	r1, #0
    472a:	d0f7      	beq.n	471c <__aeabi_uidiv+0x100>
    472c:	b503      	push	{r0, r1, lr}
    472e:	f7ff ff75 	bl	461c <__aeabi_uidiv>
    4732:	bc0e      	pop	{r1, r2, r3}
    4734:	4342      	muls	r2, r0
    4736:	1a89      	subs	r1, r1, r2
    4738:	4718      	bx	r3
    473a:	46c0      	nop			; (mov r8, r8)

0000473c <__aeabi_idiv>:
    473c:	4603      	mov	r3, r0
    473e:	430b      	orrs	r3, r1
    4740:	d47f      	bmi.n	4842 <__aeabi_idiv+0x106>
    4742:	2200      	movs	r2, #0
    4744:	0843      	lsrs	r3, r0, #1
    4746:	428b      	cmp	r3, r1
    4748:	d374      	bcc.n	4834 <__aeabi_idiv+0xf8>
    474a:	0903      	lsrs	r3, r0, #4
    474c:	428b      	cmp	r3, r1
    474e:	d35f      	bcc.n	4810 <__aeabi_idiv+0xd4>
    4750:	0a03      	lsrs	r3, r0, #8
    4752:	428b      	cmp	r3, r1
    4754:	d344      	bcc.n	47e0 <__aeabi_idiv+0xa4>
    4756:	0b03      	lsrs	r3, r0, #12
    4758:	428b      	cmp	r3, r1
    475a:	d328      	bcc.n	47ae <__aeabi_idiv+0x72>
    475c:	0c03      	lsrs	r3, r0, #16
    475e:	428b      	cmp	r3, r1
    4760:	d30d      	bcc.n	477e <__aeabi_idiv+0x42>
    4762:	22ff      	movs	r2, #255	; 0xff
    4764:	0209      	lsls	r1, r1, #8
    4766:	ba12      	rev	r2, r2
    4768:	0c03      	lsrs	r3, r0, #16
    476a:	428b      	cmp	r3, r1
    476c:	d302      	bcc.n	4774 <__aeabi_idiv+0x38>
    476e:	1212      	asrs	r2, r2, #8
    4770:	0209      	lsls	r1, r1, #8
    4772:	d065      	beq.n	4840 <__aeabi_idiv+0x104>
    4774:	0b03      	lsrs	r3, r0, #12
    4776:	428b      	cmp	r3, r1
    4778:	d319      	bcc.n	47ae <__aeabi_idiv+0x72>
    477a:	e000      	b.n	477e <__aeabi_idiv+0x42>
    477c:	0a09      	lsrs	r1, r1, #8
    477e:	0bc3      	lsrs	r3, r0, #15
    4780:	428b      	cmp	r3, r1
    4782:	d301      	bcc.n	4788 <__aeabi_idiv+0x4c>
    4784:	03cb      	lsls	r3, r1, #15
    4786:	1ac0      	subs	r0, r0, r3
    4788:	4152      	adcs	r2, r2
    478a:	0b83      	lsrs	r3, r0, #14
    478c:	428b      	cmp	r3, r1
    478e:	d301      	bcc.n	4794 <__aeabi_idiv+0x58>
    4790:	038b      	lsls	r3, r1, #14
    4792:	1ac0      	subs	r0, r0, r3
    4794:	4152      	adcs	r2, r2
    4796:	0b43      	lsrs	r3, r0, #13
    4798:	428b      	cmp	r3, r1
    479a:	d301      	bcc.n	47a0 <__aeabi_idiv+0x64>
    479c:	034b      	lsls	r3, r1, #13
    479e:	1ac0      	subs	r0, r0, r3
    47a0:	4152      	adcs	r2, r2
    47a2:	0b03      	lsrs	r3, r0, #12
    47a4:	428b      	cmp	r3, r1
    47a6:	d301      	bcc.n	47ac <__aeabi_idiv+0x70>
    47a8:	030b      	lsls	r3, r1, #12
    47aa:	1ac0      	subs	r0, r0, r3
    47ac:	4152      	adcs	r2, r2
    47ae:	0ac3      	lsrs	r3, r0, #11
    47b0:	428b      	cmp	r3, r1
    47b2:	d301      	bcc.n	47b8 <__aeabi_idiv+0x7c>
    47b4:	02cb      	lsls	r3, r1, #11
    47b6:	1ac0      	subs	r0, r0, r3
    47b8:	4152      	adcs	r2, r2
    47ba:	0a83      	lsrs	r3, r0, #10
    47bc:	428b      	cmp	r3, r1
    47be:	d301      	bcc.n	47c4 <__aeabi_idiv+0x88>
    47c0:	028b      	lsls	r3, r1, #10
    47c2:	1ac0      	subs	r0, r0, r3
    47c4:	4152      	adcs	r2, r2
    47c6:	0a43      	lsrs	r3, r0, #9
    47c8:	428b      	cmp	r3, r1
    47ca:	d301      	bcc.n	47d0 <__aeabi_idiv+0x94>
    47cc:	024b      	lsls	r3, r1, #9
    47ce:	1ac0      	subs	r0, r0, r3
    47d0:	4152      	adcs	r2, r2
    47d2:	0a03      	lsrs	r3, r0, #8
    47d4:	428b      	cmp	r3, r1
    47d6:	d301      	bcc.n	47dc <__aeabi_idiv+0xa0>
    47d8:	020b      	lsls	r3, r1, #8
    47da:	1ac0      	subs	r0, r0, r3
    47dc:	4152      	adcs	r2, r2
    47de:	d2cd      	bcs.n	477c <__aeabi_idiv+0x40>
    47e0:	09c3      	lsrs	r3, r0, #7
    47e2:	428b      	cmp	r3, r1
    47e4:	d301      	bcc.n	47ea <__aeabi_idiv+0xae>
    47e6:	01cb      	lsls	r3, r1, #7
    47e8:	1ac0      	subs	r0, r0, r3
    47ea:	4152      	adcs	r2, r2
    47ec:	0983      	lsrs	r3, r0, #6
    47ee:	428b      	cmp	r3, r1
    47f0:	d301      	bcc.n	47f6 <__aeabi_idiv+0xba>
    47f2:	018b      	lsls	r3, r1, #6
    47f4:	1ac0      	subs	r0, r0, r3
    47f6:	4152      	adcs	r2, r2
    47f8:	0943      	lsrs	r3, r0, #5
    47fa:	428b      	cmp	r3, r1
    47fc:	d301      	bcc.n	4802 <__aeabi_idiv+0xc6>
    47fe:	014b      	lsls	r3, r1, #5
    4800:	1ac0      	subs	r0, r0, r3
    4802:	4152      	adcs	r2, r2
    4804:	0903      	lsrs	r3, r0, #4
    4806:	428b      	cmp	r3, r1
    4808:	d301      	bcc.n	480e <__aeabi_idiv+0xd2>
    480a:	010b      	lsls	r3, r1, #4
    480c:	1ac0      	subs	r0, r0, r3
    480e:	4152      	adcs	r2, r2
    4810:	08c3      	lsrs	r3, r0, #3
    4812:	428b      	cmp	r3, r1
    4814:	d301      	bcc.n	481a <__aeabi_idiv+0xde>
    4816:	00cb      	lsls	r3, r1, #3
    4818:	1ac0      	subs	r0, r0, r3
    481a:	4152      	adcs	r2, r2
    481c:	0883      	lsrs	r3, r0, #2
    481e:	428b      	cmp	r3, r1
    4820:	d301      	bcc.n	4826 <__aeabi_idiv+0xea>
    4822:	008b      	lsls	r3, r1, #2
    4824:	1ac0      	subs	r0, r0, r3
    4826:	4152      	adcs	r2, r2
    4828:	0843      	lsrs	r3, r0, #1
    482a:	428b      	cmp	r3, r1
    482c:	d301      	bcc.n	4832 <__aeabi_idiv+0xf6>
    482e:	004b      	lsls	r3, r1, #1
    4830:	1ac0      	subs	r0, r0, r3
    4832:	4152      	adcs	r2, r2
    4834:	1a41      	subs	r1, r0, r1
    4836:	d200      	bcs.n	483a <__aeabi_idiv+0xfe>
    4838:	4601      	mov	r1, r0
    483a:	4152      	adcs	r2, r2
    483c:	4610      	mov	r0, r2
    483e:	4770      	bx	lr
    4840:	e05d      	b.n	48fe <__aeabi_idiv+0x1c2>
    4842:	0fca      	lsrs	r2, r1, #31
    4844:	d000      	beq.n	4848 <__aeabi_idiv+0x10c>
    4846:	4249      	negs	r1, r1
    4848:	1003      	asrs	r3, r0, #32
    484a:	d300      	bcc.n	484e <__aeabi_idiv+0x112>
    484c:	4240      	negs	r0, r0
    484e:	4053      	eors	r3, r2
    4850:	2200      	movs	r2, #0
    4852:	469c      	mov	ip, r3
    4854:	0903      	lsrs	r3, r0, #4
    4856:	428b      	cmp	r3, r1
    4858:	d32d      	bcc.n	48b6 <__aeabi_idiv+0x17a>
    485a:	0a03      	lsrs	r3, r0, #8
    485c:	428b      	cmp	r3, r1
    485e:	d312      	bcc.n	4886 <__aeabi_idiv+0x14a>
    4860:	22fc      	movs	r2, #252	; 0xfc
    4862:	0189      	lsls	r1, r1, #6
    4864:	ba12      	rev	r2, r2
    4866:	0a03      	lsrs	r3, r0, #8
    4868:	428b      	cmp	r3, r1
    486a:	d30c      	bcc.n	4886 <__aeabi_idiv+0x14a>
    486c:	0189      	lsls	r1, r1, #6
    486e:	1192      	asrs	r2, r2, #6
    4870:	428b      	cmp	r3, r1
    4872:	d308      	bcc.n	4886 <__aeabi_idiv+0x14a>
    4874:	0189      	lsls	r1, r1, #6
    4876:	1192      	asrs	r2, r2, #6
    4878:	428b      	cmp	r3, r1
    487a:	d304      	bcc.n	4886 <__aeabi_idiv+0x14a>
    487c:	0189      	lsls	r1, r1, #6
    487e:	d03a      	beq.n	48f6 <__aeabi_idiv+0x1ba>
    4880:	1192      	asrs	r2, r2, #6
    4882:	e000      	b.n	4886 <__aeabi_idiv+0x14a>
    4884:	0989      	lsrs	r1, r1, #6
    4886:	09c3      	lsrs	r3, r0, #7
    4888:	428b      	cmp	r3, r1
    488a:	d301      	bcc.n	4890 <__aeabi_idiv+0x154>
    488c:	01cb      	lsls	r3, r1, #7
    488e:	1ac0      	subs	r0, r0, r3
    4890:	4152      	adcs	r2, r2
    4892:	0983      	lsrs	r3, r0, #6
    4894:	428b      	cmp	r3, r1
    4896:	d301      	bcc.n	489c <__aeabi_idiv+0x160>
    4898:	018b      	lsls	r3, r1, #6
    489a:	1ac0      	subs	r0, r0, r3
    489c:	4152      	adcs	r2, r2
    489e:	0943      	lsrs	r3, r0, #5
    48a0:	428b      	cmp	r3, r1
    48a2:	d301      	bcc.n	48a8 <__aeabi_idiv+0x16c>
    48a4:	014b      	lsls	r3, r1, #5
    48a6:	1ac0      	subs	r0, r0, r3
    48a8:	4152      	adcs	r2, r2
    48aa:	0903      	lsrs	r3, r0, #4
    48ac:	428b      	cmp	r3, r1
    48ae:	d301      	bcc.n	48b4 <__aeabi_idiv+0x178>
    48b0:	010b      	lsls	r3, r1, #4
    48b2:	1ac0      	subs	r0, r0, r3
    48b4:	4152      	adcs	r2, r2
    48b6:	08c3      	lsrs	r3, r0, #3
    48b8:	428b      	cmp	r3, r1
    48ba:	d301      	bcc.n	48c0 <__aeabi_idiv+0x184>
    48bc:	00cb      	lsls	r3, r1, #3
    48be:	1ac0      	subs	r0, r0, r3
    48c0:	4152      	adcs	r2, r2
    48c2:	0883      	lsrs	r3, r0, #2
    48c4:	428b      	cmp	r3, r1
    48c6:	d301      	bcc.n	48cc <__aeabi_idiv+0x190>
    48c8:	008b      	lsls	r3, r1, #2
    48ca:	1ac0      	subs	r0, r0, r3
    48cc:	4152      	adcs	r2, r2
    48ce:	d2d9      	bcs.n	4884 <__aeabi_idiv+0x148>
    48d0:	0843      	lsrs	r3, r0, #1
    48d2:	428b      	cmp	r3, r1
    48d4:	d301      	bcc.n	48da <__aeabi_idiv+0x19e>
    48d6:	004b      	lsls	r3, r1, #1
    48d8:	1ac0      	subs	r0, r0, r3
    48da:	4152      	adcs	r2, r2
    48dc:	1a41      	subs	r1, r0, r1
    48de:	d200      	bcs.n	48e2 <__aeabi_idiv+0x1a6>
    48e0:	4601      	mov	r1, r0
    48e2:	4663      	mov	r3, ip
    48e4:	4152      	adcs	r2, r2
    48e6:	105b      	asrs	r3, r3, #1
    48e8:	4610      	mov	r0, r2
    48ea:	d301      	bcc.n	48f0 <__aeabi_idiv+0x1b4>
    48ec:	4240      	negs	r0, r0
    48ee:	2b00      	cmp	r3, #0
    48f0:	d500      	bpl.n	48f4 <__aeabi_idiv+0x1b8>
    48f2:	4249      	negs	r1, r1
    48f4:	4770      	bx	lr
    48f6:	4663      	mov	r3, ip
    48f8:	105b      	asrs	r3, r3, #1
    48fa:	d300      	bcc.n	48fe <__aeabi_idiv+0x1c2>
    48fc:	4240      	negs	r0, r0
    48fe:	b501      	push	{r0, lr}
    4900:	2000      	movs	r0, #0
    4902:	f000 f80b 	bl	491c <__aeabi_idiv0>
    4906:	bd02      	pop	{r1, pc}

00004908 <__aeabi_idivmod>:
    4908:	2900      	cmp	r1, #0
    490a:	d0f8      	beq.n	48fe <__aeabi_idiv+0x1c2>
    490c:	b503      	push	{r0, r1, lr}
    490e:	f7ff ff15 	bl	473c <__aeabi_idiv>
    4912:	bc0e      	pop	{r1, r2, r3}
    4914:	4342      	muls	r2, r0
    4916:	1a89      	subs	r1, r1, r2
    4918:	4718      	bx	r3
    491a:	46c0      	nop			; (mov r8, r8)

0000491c <__aeabi_idiv0>:
    491c:	4770      	bx	lr
    491e:	46c0      	nop			; (mov r8, r8)

00004920 <__ctzsi2>:
    4920:	4241      	negs	r1, r0
    4922:	4008      	ands	r0, r1
    4924:	211c      	movs	r1, #28
    4926:	2301      	movs	r3, #1
    4928:	041b      	lsls	r3, r3, #16
    492a:	4298      	cmp	r0, r3
    492c:	d301      	bcc.n	4932 <__ctzsi2+0x12>
    492e:	0c00      	lsrs	r0, r0, #16
    4930:	3910      	subs	r1, #16
    4932:	0a1b      	lsrs	r3, r3, #8
    4934:	4298      	cmp	r0, r3
    4936:	d301      	bcc.n	493c <__ctzsi2+0x1c>
    4938:	0a00      	lsrs	r0, r0, #8
    493a:	3908      	subs	r1, #8
    493c:	091b      	lsrs	r3, r3, #4
    493e:	4298      	cmp	r0, r3
    4940:	d301      	bcc.n	4946 <__ctzsi2+0x26>
    4942:	0900      	lsrs	r0, r0, #4
    4944:	3904      	subs	r1, #4
    4946:	a202      	add	r2, pc, #8	; (adr r2, 4950 <__ctzsi2+0x30>)
    4948:	5c10      	ldrb	r0, [r2, r0]
    494a:	1a40      	subs	r0, r0, r1
    494c:	4770      	bx	lr
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	1d1d1c1b 	.word	0x1d1d1c1b
    4954:	1e1e1e1e 	.word	0x1e1e1e1e
    4958:	1f1f1f1f 	.word	0x1f1f1f1f
    495c:	1f1f1f1f 	.word	0x1f1f1f1f

00004960 <__aeabi_lmul>:
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	464f      	mov	r7, r9
    4964:	4646      	mov	r6, r8
    4966:	0405      	lsls	r5, r0, #16
    4968:	0c2d      	lsrs	r5, r5, #16
    496a:	1c2c      	adds	r4, r5, #0
    496c:	b4c0      	push	{r6, r7}
    496e:	0417      	lsls	r7, r2, #16
    4970:	0c16      	lsrs	r6, r2, #16
    4972:	0c3f      	lsrs	r7, r7, #16
    4974:	4699      	mov	r9, r3
    4976:	0c03      	lsrs	r3, r0, #16
    4978:	437c      	muls	r4, r7
    497a:	4375      	muls	r5, r6
    497c:	435f      	muls	r7, r3
    497e:	4373      	muls	r3, r6
    4980:	197d      	adds	r5, r7, r5
    4982:	0c26      	lsrs	r6, r4, #16
    4984:	19ad      	adds	r5, r5, r6
    4986:	469c      	mov	ip, r3
    4988:	42af      	cmp	r7, r5
    498a:	d903      	bls.n	4994 <__aeabi_lmul+0x34>
    498c:	2380      	movs	r3, #128	; 0x80
    498e:	025b      	lsls	r3, r3, #9
    4990:	4698      	mov	r8, r3
    4992:	44c4      	add	ip, r8
    4994:	464b      	mov	r3, r9
    4996:	4351      	muls	r1, r2
    4998:	4343      	muls	r3, r0
    499a:	0424      	lsls	r4, r4, #16
    499c:	0c2e      	lsrs	r6, r5, #16
    499e:	0c24      	lsrs	r4, r4, #16
    49a0:	042d      	lsls	r5, r5, #16
    49a2:	4466      	add	r6, ip
    49a4:	192c      	adds	r4, r5, r4
    49a6:	1859      	adds	r1, r3, r1
    49a8:	1989      	adds	r1, r1, r6
    49aa:	1c20      	adds	r0, r4, #0
    49ac:	bc0c      	pop	{r2, r3}
    49ae:	4690      	mov	r8, r2
    49b0:	4699      	mov	r9, r3
    49b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000049b4 <__libc_init_array>:
    49b4:	4b0e      	ldr	r3, [pc, #56]	; (49f0 <__libc_init_array+0x3c>)
    49b6:	b570      	push	{r4, r5, r6, lr}
    49b8:	2500      	movs	r5, #0
    49ba:	1c1e      	adds	r6, r3, #0
    49bc:	4c0d      	ldr	r4, [pc, #52]	; (49f4 <__libc_init_array+0x40>)
    49be:	1ae4      	subs	r4, r4, r3
    49c0:	10a4      	asrs	r4, r4, #2
    49c2:	42a5      	cmp	r5, r4
    49c4:	d004      	beq.n	49d0 <__libc_init_array+0x1c>
    49c6:	00ab      	lsls	r3, r5, #2
    49c8:	58f3      	ldr	r3, [r6, r3]
    49ca:	4798      	blx	r3
    49cc:	3501      	adds	r5, #1
    49ce:	e7f8      	b.n	49c2 <__libc_init_array+0xe>
    49d0:	f000 f882 	bl	4ad8 <_init>
    49d4:	4b08      	ldr	r3, [pc, #32]	; (49f8 <__libc_init_array+0x44>)
    49d6:	2500      	movs	r5, #0
    49d8:	1c1e      	adds	r6, r3, #0
    49da:	4c08      	ldr	r4, [pc, #32]	; (49fc <__libc_init_array+0x48>)
    49dc:	1ae4      	subs	r4, r4, r3
    49de:	10a4      	asrs	r4, r4, #2
    49e0:	42a5      	cmp	r5, r4
    49e2:	d004      	beq.n	49ee <__libc_init_array+0x3a>
    49e4:	00ab      	lsls	r3, r5, #2
    49e6:	58f3      	ldr	r3, [r6, r3]
    49e8:	4798      	blx	r3
    49ea:	3501      	adds	r5, #1
    49ec:	e7f8      	b.n	49e0 <__libc_init_array+0x2c>
    49ee:	bd70      	pop	{r4, r5, r6, pc}
    49f0:	00004ae4 	.word	0x00004ae4
    49f4:	00004ae4 	.word	0x00004ae4
    49f8:	00004ae4 	.word	0x00004ae4
    49fc:	00004ae8 	.word	0x00004ae8

00004a00 <memcpy>:
    4a00:	2300      	movs	r3, #0
    4a02:	b510      	push	{r4, lr}
    4a04:	4293      	cmp	r3, r2
    4a06:	d003      	beq.n	4a10 <memcpy+0x10>
    4a08:	5ccc      	ldrb	r4, [r1, r3]
    4a0a:	54c4      	strb	r4, [r0, r3]
    4a0c:	3301      	adds	r3, #1
    4a0e:	e7f9      	b.n	4a04 <memcpy+0x4>
    4a10:	bd10      	pop	{r4, pc}
    4a12:	0000      	movs	r0, r0
    4a14:	00006003 	.word	0x00006003
    4a18:	0000172c 	.word	0x0000172c
    4a1c:	0000082d 	.word	0x0000082d
    4a20:	0000f72d 	.word	0x0000f72d
    4a24:	00363432 	.word	0x00363432
    4a28:	00009f38 	.word	0x00009f38
    4a2c:	0000e52f 	.word	0x0000e52f
    4a30:	0000122e 	.word	0x0000122e
    4a34:	00000c2d 	.word	0x00000c2d
    4a38:	0000102c 	.word	0x0000102c
    4a3c:	35343332 	.word	0x35343332
    4a40:	00003736 	.word	0x00003736

00004a44 <_usb_device_irq_bits>:
    4a44:	00080004 00800070 01000001 00000200     ....p...........
    4a54:	42000000 42000400 42000800 42000c00     ...B...B...B...B
    4a64:	42001000 43000400 00003cae 00003caa     ...B...C.<...<..
    4a74:	00003caa 00003d0c 00003d0c 00003cc4     .<...=...=...<..
    4a84:	00003cb4 00003cca 00003cfa 00003e98     .<...<...<...>..
    4a94:	00003e78 00003e78 00003f12 00003e8a     x>..x>...?...>..
    4aa4:	00003ea6 00003e7c 00003eb4 00003ef6     .>..|>...>...>..
    4ab4:	00003f50 00003f92 00003f92 00003f92     P?...?...?...?..
    4ac4:	00003f42 00003f5e 00003f34 00003f6c     B?..^?..4?..l?..
    4ad4:	00003f82                                .?..

00004ad8 <_init>:
    4ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4ade:	bc08      	pop	{r3}
    4ae0:	469e      	mov	lr, r3
    4ae2:	4770      	bx	lr

00004ae4 <__init_array_start>:
    4ae4:	000000dd 	.word	0x000000dd

00004ae8 <_fini>:
    4ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4aee:	bc08      	pop	{r3}
    4af0:	469e      	mov	lr, r3
    4af2:	4770      	bx	lr

00004af4 <__fini_array_start>:
    4af4:	000000b5 	.word	0x000000b5
