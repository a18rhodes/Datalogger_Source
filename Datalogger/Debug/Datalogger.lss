
Datalogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004338  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00004338  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00010018  2**0
                  CONTENTS
  3 .bss          00000fac  20000018  00004350  00010018  2**2
                  ALLOC
  4 .stack        00002004  20000fc4  000052fc  00010018  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
  7 .debug_info   00053f01  00000000  00000000  0001009b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004e73  00000000  00000000  00063f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cf1f  00000000  00000000  00068e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008e0  00000000  00000000  00075d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000dd8  00000000  00000000  0007660e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001fefb  00000000  00000000  000773e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001557b  00000000  00000000  000972e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099784  00000000  00000000  000ac85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001720  00000000  00000000  00145fe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002fc8 	.word	0x20002fc8
       4:	00003cd5 	.word	0x00003cd5
       8:	00003cd1 	.word	0x00003cd1
       c:	00003cd1 	.word	0x00003cd1
	...
      2c:	00003cd1 	.word	0x00003cd1
	...
      38:	00003cd1 	.word	0x00003cd1
      3c:	00003cd1 	.word	0x00003cd1
      40:	00003cd1 	.word	0x00003cd1
      44:	00003cd1 	.word	0x00003cd1
      48:	00000ed5 	.word	0x00000ed5
      4c:	00003409 	.word	0x00003409
      50:	00003cd1 	.word	0x00003cd1
      54:	00003cd1 	.word	0x00003cd1
      58:	00001519 	.word	0x00001519
      5c:	00000be1 	.word	0x00000be1
      60:	00003cd1 	.word	0x00003cd1
      64:	00003cd1 	.word	0x00003cd1
      68:	00003cd1 	.word	0x00003cd1
      6c:	00003cd1 	.word	0x00003cd1
      70:	00003cd1 	.word	0x00003cd1
      74:	00003cd1 	.word	0x00003cd1
      78:	00003cd1 	.word	0x00003cd1
      7c:	00003cd1 	.word	0x00003cd1
      80:	00003cd1 	.word	0x00003cd1
      84:	000014e9 	.word	0x000014e9
      88:	000014f9 	.word	0x000014f9
	...
      94:	00001509 	.word	0x00001509
      98:	00003cd1 	.word	0x00003cd1
      9c:	00003cd1 	.word	0x00003cd1
      a0:	00003cd1 	.word	0x00003cd1
      a4:	00003cd1 	.word	0x00003cd1
      a8:	00003cd1 	.word	0x00003cd1
      ac:	00003cd1 	.word	0x00003cd1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000018 	.word	0x20000018
      d4:	00000000 	.word	0x00000000
      d8:	00004338 	.word	0x00004338

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00004338 	.word	0x00004338
     108:	2000001c 	.word	0x2000001c
     10c:	00004338 	.word	0x00004338
     110:	00000000 	.word	0x00000000

00000114 <configure_ADT7420>:
	
	uiTimer = 0;
	
	// Read the response and store it in the lower byte of the temperature variable
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b087      	sub	sp, #28
     118:	ac02      	add	r4, sp, #8
     11a:	1c20      	adds	r0, r4, #0
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     11c:	491b      	ldr	r1, [pc, #108]	; (18c <configure_ADT7420+0x78>)
     11e:	2202      	movs	r2, #2
     120:	4b1b      	ldr	r3, [pc, #108]	; (190 <configure_ADT7420+0x7c>)
     122:	4798      	blx	r3
     124:	ab03      	add	r3, sp, #12
	}while(status != STATUS_OK);
     126:	2248      	movs	r2, #72	; 0x48
     128:	801a      	strh	r2, [r3, #0]
	uiTimer = 0;
	
	// Read the response and store it in the lower byte of the temperature variable
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     12a:	2200      	movs	r2, #0
	}while(status != STATUS_OK);
     12c:	721a      	strb	r2, [r3, #8]
     12e:	725a      	strb	r2, [r3, #9]
	uiTemperature = uiTemperature | ucDataBuffer[0];
     130:	2102      	movs	r1, #2
     132:	8059      	strh	r1, [r3, #2]
     134:	9404      	str	r4, [sp, #16]
     136:	a901      	add	r1, sp, #4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     138:	2380      	movs	r3, #128	; 0x80
     13a:	700b      	strb	r3, [r1, #0]
     13c:	70ca      	strb	r2, [r1, #3]
     13e:	3b7f      	subs	r3, #127	; 0x7f
	
	// Put the sensor in shutdown and store the temperature in the array
	port_pin_set_output_level(ADT7420_EN_PIN, false);
	uiTemperatureArray[ucTemperatureArrayPtr++] = uiTemperature;
     140:	704b      	strb	r3, [r1, #1]
     142:	2302      	movs	r3, #2
     144:	708b      	strb	r3, [r1, #2]
     146:	200f      	movs	r0, #15
     148:	4b12      	ldr	r3, [pc, #72]	; (194 <configure_ADT7420+0x80>)
     14a:	4798      	blx	r3
     14c:	2280      	movs	r2, #128	; 0x80
     14e:	0212      	lsls	r2, r2, #8
     150:	4b11      	ldr	r3, [pc, #68]	; (198 <configure_ADT7420+0x84>)
     152:	619a      	str	r2, [r3, #24]
     154:	2500      	movs	r5, #0
     156:	4c11      	ldr	r4, [pc, #68]	; (19c <configure_ADT7420+0x88>)
     158:	4f11      	ldr	r7, [pc, #68]	; (1a0 <configure_ADT7420+0x8c>)
     15a:	4e12      	ldr	r6, [pc, #72]	; (1a4 <configure_ADT7420+0x90>)
     15c:	e006      	b.n	16c <configure_ADT7420+0x58>
     15e:	1c6b      	adds	r3, r5, #1
     160:	b29b      	uxth	r3, r3
     162:	4a0e      	ldr	r2, [pc, #56]	; (19c <configure_ADT7420+0x88>)
     164:	8912      	ldrh	r2, [r2, #8]
     166:	42aa      	cmp	r2, r5
     168:	d006      	beq.n	178 <configure_ADT7420+0x64>
     16a:	1c1d      	adds	r5, r3, #0
     16c:	1c20      	adds	r0, r4, #0
     16e:	a903      	add	r1, sp, #12
     170:	47b8      	blx	r7
     172:	7030      	strb	r0, [r6, #0]
     174:	2800      	cmp	r0, #0
     176:	d1f2      	bne.n	15e <configure_ADT7420+0x4a>
     178:	2280      	movs	r2, #128	; 0x80
     17a:	0212      	lsls	r2, r2, #8
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <configure_ADT7420+0x84>)
     17e:	615a      	str	r2, [r3, #20]
 		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Shut it back down, and initialize the global temperature array index
	port_pin_set_output_level(ADT7420_EN_PIN, false);
	ucTemperatureArrayPtr = 0;
     180:	2200      	movs	r2, #0
     182:	4b09      	ldr	r3, [pc, #36]	; (1a8 <configure_ADT7420+0x94>)
     184:	701a      	strb	r2, [r3, #0]
}
     186:	b007      	add	sp, #28
     188:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00004258 	.word	0x00004258
     190:	00004245 	.word	0x00004245
     194:	00003c71 	.word	0x00003c71
     198:	40002800 	.word	0x40002800
     19c:	20000d5c 	.word	0x20000d5c
     1a0:	00001479 	.word	0x00001479
     1a4:	20000ddc 	.word	0x20000ddc
     1a8:	20000cda 	.word	0x20000cda

000001ac <ADXL375_disable_interrupt>:
/* @params[in] interrupt_src the integer representation of the interrupt source
/* (See ADXL375 datasheet for sources)
/* @returns none
**************************************************************************/
void ADXL375_disable_interrupt(uint8_t interrupt_src)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	4647      	mov	r7, r8
     1b0:	b480      	push	{r7}
     1b2:	b084      	sub	sp, #16
     1b4:	4680      	mov	r8, r0
	struct i2c_master_packet i2c_packet;
	uint8_t wr_buffer[2] = {ADXL375_INT_EN_ADDR, interrupt_src};
     1b6:	232e      	movs	r3, #46	; 0x2e
     1b8:	466a      	mov	r2, sp
     1ba:	7013      	strb	r3, [r2, #0]
     1bc:	466b      	mov	r3, sp
     1be:	7058      	strb	r0, [r3, #1]
	uint16_t timeout = 0;
		
	i2c_packet.address = ADXL375_ADDR;
     1c0:	ab01      	add	r3, sp, #4
     1c2:	2253      	movs	r2, #83	; 0x53
     1c4:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     1c6:	2200      	movs	r2, #0
     1c8:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     1ca:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 1;
     1cc:	3201      	adds	r2, #1
     1ce:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     1d0:	466a      	mov	r2, sp
     1d2:	9202      	str	r2, [sp, #8]
**************************************************************************/
void ADXL375_disable_interrupt(uint8_t interrupt_src)
{
	struct i2c_master_packet i2c_packet;
	uint8_t wr_buffer[2] = {ADXL375_INT_EN_ADDR, interrupt_src};
	uint16_t timeout = 0;
     1d4:	2600      	movs	r6, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer;
	
	// Write the interrupt enable address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     1d6:	4c21      	ldr	r4, [pc, #132]	; (25c <ADXL375_disable_interrupt+0xb0>)
     1d8:	4d21      	ldr	r5, [pc, #132]	; (260 <ADXL375_disable_interrupt+0xb4>)
     1da:	4f22      	ldr	r7, [pc, #136]	; (264 <ADXL375_disable_interrupt+0xb8>)
     1dc:	e006      	b.n	1ec <ADXL375_disable_interrupt+0x40>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     1de:	1c73      	adds	r3, r6, #1
     1e0:	b29b      	uxth	r3, r3
     1e2:	4a1e      	ldr	r2, [pc, #120]	; (25c <ADXL375_disable_interrupt+0xb0>)
     1e4:	8912      	ldrh	r2, [r2, #8]
     1e6:	42b2      	cmp	r2, r6
     1e8:	d010      	beq.n	20c <ADXL375_disable_interrupt+0x60>
     1ea:	1c1e      	adds	r6, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer;
	
	// Write the interrupt enable address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     1ec:	1c20      	adds	r0, r4, #0
     1ee:	a901      	add	r1, sp, #4
     1f0:	47a8      	blx	r5
     1f2:	7038      	strb	r0, [r7, #0]
     1f4:	2800      	cmp	r0, #0
     1f6:	d1f2      	bne.n	1de <ADXL375_disable_interrupt+0x32>
     1f8:	2600      	movs	r6, #0
     1fa:	e008      	b.n	20e <ADXL375_disable_interrupt+0x62>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	timeout = 0;
	// Read back the value from the interrupt enable reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     1fc:	1c73      	adds	r3, r6, #1
     1fe:	b29b      	uxth	r3, r3
     200:	4a16      	ldr	r2, [pc, #88]	; (25c <ADXL375_disable_interrupt+0xb0>)
     202:	8912      	ldrh	r2, [r2, #8]
     204:	42b2      	cmp	r2, r6
     206:	d00b      	beq.n	220 <ADXL375_disable_interrupt+0x74>
     208:	1c1e      	adds	r6, r3, #0
     20a:	e003      	b.n	214 <ADXL375_disable_interrupt+0x68>
     20c:	2600      	movs	r6, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	timeout = 0;
	// Read back the value from the interrupt enable reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     20e:	4c13      	ldr	r4, [pc, #76]	; (25c <ADXL375_disable_interrupt+0xb0>)
     210:	4d15      	ldr	r5, [pc, #84]	; (268 <ADXL375_disable_interrupt+0xbc>)
     212:	4f14      	ldr	r7, [pc, #80]	; (264 <ADXL375_disable_interrupt+0xb8>)
     214:	1c20      	adds	r0, r4, #0
     216:	a901      	add	r1, sp, #4
     218:	47a8      	blx	r5
     21a:	7038      	strb	r0, [r7, #0]
     21c:	2800      	cmp	r0, #0
     21e:	d1ed      	bne.n	1fc <ADXL375_disable_interrupt+0x50>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Reset the buffer with the disabled interrupt bit set low
	wr_buffer[1] = wr_buffer[0] & ~interrupt_src;
     220:	466b      	mov	r3, sp
     222:	781b      	ldrb	r3, [r3, #0]
     224:	4642      	mov	r2, r8
     226:	4393      	bics	r3, r2
     228:	466a      	mov	r2, sp
     22a:	7053      	strb	r3, [r2, #1]
	wr_buffer[0] = ADXL375_INT_EN_ADDR;
     22c:	232e      	movs	r3, #46	; 0x2e
     22e:	7013      	strb	r3, [r2, #0]
	timeout = 0;
     230:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     232:	4c0a      	ldr	r4, [pc, #40]	; (25c <ADXL375_disable_interrupt+0xb0>)
     234:	4f0a      	ldr	r7, [pc, #40]	; (260 <ADXL375_disable_interrupt+0xb4>)
     236:	4e0b      	ldr	r6, [pc, #44]	; (264 <ADXL375_disable_interrupt+0xb8>)
     238:	e006      	b.n	248 <ADXL375_disable_interrupt+0x9c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     23a:	1c6b      	adds	r3, r5, #1
     23c:	b29b      	uxth	r3, r3
     23e:	4a07      	ldr	r2, [pc, #28]	; (25c <ADXL375_disable_interrupt+0xb0>)
     240:	8912      	ldrh	r2, [r2, #8]
     242:	42aa      	cmp	r2, r5
     244:	d006      	beq.n	254 <ADXL375_disable_interrupt+0xa8>
     246:	1c1d      	adds	r5, r3, #0
	// Reset the buffer with the disabled interrupt bit set low
	wr_buffer[1] = wr_buffer[0] & ~interrupt_src;
	wr_buffer[0] = ADXL375_INT_EN_ADDR;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     248:	1c20      	adds	r0, r4, #0
     24a:	a901      	add	r1, sp, #4
     24c:	47b8      	blx	r7
     24e:	7030      	strb	r0, [r6, #0]
     250:	2800      	cmp	r0, #0
     252:	d1f2      	bne.n	23a <ADXL375_disable_interrupt+0x8e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     254:	b004      	add	sp, #16
     256:	bc04      	pop	{r2}
     258:	4690      	mov	r8, r2
     25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     25c:	20000d5c 	.word	0x20000d5c
     260:	00001479 	.word	0x00001479
     264:	20000ddc 	.word	0x20000ddc
     268:	00001465 	.word	0x00001465

0000026c <ADXL375_set_activity_thresh>:
/* @param[in] y, indicates whether the y axis should be considered for interrupts
/* @param[in] z, indicates whether the z axis should be considered for interrupts
/* @returns none
/************************************************************************/
void ADXL375_set_activity_thresh(int8_t threshold, bool x, bool y, bool z)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	b087      	sub	sp, #28
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer1[2] = {ADXL375_THRESH_ACT_ADDR, threshold};
     270:	ac02      	add	r4, sp, #8
     272:	2524      	movs	r5, #36	; 0x24
     274:	7025      	strb	r5, [r4, #0]
     276:	7060      	strb	r0, [r4, #1]
	uint8_t wr_buffer2[2] = {ADXL375_ACT_INACT_CTL_ADDR, (x ? ADXL375_ACT_INACT_ACT_X_EN : 0x00) | (y ? ADXL375_ACT_INACT_ACT_Y_EN : 0x00) | (z ? ADXL375_ACT_INACT_ACT_Z_EN : 0x00)};
     278:	2427      	movs	r4, #39	; 0x27
     27a:	a801      	add	r0, sp, #4
     27c:	7004      	strb	r4, [r0, #0]
     27e:	1e48      	subs	r0, r1, #1
     280:	4181      	sbcs	r1, r0
     282:	0188      	lsls	r0, r1, #6
     284:	1c11      	adds	r1, r2, #0
     286:	1e4a      	subs	r2, r1, #1
     288:	4191      	sbcs	r1, r2
     28a:	0149      	lsls	r1, r1, #5
     28c:	4301      	orrs	r1, r0
     28e:	1e5a      	subs	r2, r3, #1
     290:	4193      	sbcs	r3, r2
     292:	011b      	lsls	r3, r3, #4
     294:	430b      	orrs	r3, r1
     296:	aa01      	add	r2, sp, #4
     298:	7053      	strb	r3, [r2, #1]
	
	i2c_packet.address = ADXL375_ADDR;
     29a:	ab03      	add	r3, sp, #12
     29c:	2253      	movs	r2, #83	; 0x53
     29e:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     2a0:	2200      	movs	r2, #0
     2a2:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     2a4:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     2a6:	3202      	adds	r2, #2
     2a8:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer1;
     2aa:	aa02      	add	r2, sp, #8
     2ac:	9204      	str	r2, [sp, #16]
/************************************************************************/
void ADXL375_set_activity_thresh(int8_t threshold, bool x, bool y, bool z)
{
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     2ae:	2500      	movs	r5, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     2b0:	4c2d      	ldr	r4, [pc, #180]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     2b2:	4f2e      	ldr	r7, [pc, #184]	; (36c <ADXL375_set_activity_thresh+0x100>)
     2b4:	4e2e      	ldr	r6, [pc, #184]	; (370 <ADXL375_set_activity_thresh+0x104>)
     2b6:	e006      	b.n	2c6 <ADXL375_set_activity_thresh+0x5a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     2b8:	1c6b      	adds	r3, r5, #1
     2ba:	b29b      	uxth	r3, r3
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     2be:	8912      	ldrh	r2, [r2, #8]
     2c0:	42aa      	cmp	r2, r5
     2c2:	d006      	beq.n	2d2 <ADXL375_set_activity_thresh+0x66>
     2c4:	1c1d      	adds	r5, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     2c6:	1c20      	adds	r0, r4, #0
     2c8:	a903      	add	r1, sp, #12
     2ca:	47b8      	blx	r7
     2cc:	7030      	strb	r0, [r6, #0]
     2ce:	2800      	cmp	r0, #0
     2d0:	d1f2      	bne.n	2b8 <ADXL375_set_activity_thresh+0x4c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the activity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
     2d2:	ab03      	add	r3, sp, #12
     2d4:	2201      	movs	r2, #1
     2d6:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer2;
     2d8:	aa01      	add	r2, sp, #4
     2da:	9204      	str	r2, [sp, #16]
	timeout = 0;
     2dc:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     2de:	4c22      	ldr	r4, [pc, #136]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     2e0:	4f22      	ldr	r7, [pc, #136]	; (36c <ADXL375_set_activity_thresh+0x100>)
     2e2:	4e23      	ldr	r6, [pc, #140]	; (370 <ADXL375_set_activity_thresh+0x104>)
     2e4:	e006      	b.n	2f4 <ADXL375_set_activity_thresh+0x88>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     2e6:	1c6b      	adds	r3, r5, #1
     2e8:	b29b      	uxth	r3, r3
     2ea:	4a1f      	ldr	r2, [pc, #124]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     2ec:	8912      	ldrh	r2, [r2, #8]
     2ee:	42aa      	cmp	r2, r5
     2f0:	d010      	beq.n	314 <ADXL375_set_activity_thresh+0xa8>
     2f2:	1c1d      	adds	r5, r3, #0
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the activity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer2;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     2f4:	1c20      	adds	r0, r4, #0
     2f6:	a903      	add	r1, sp, #12
     2f8:	47b8      	blx	r7
     2fa:	7030      	strb	r0, [r6, #0]
     2fc:	2800      	cmp	r0, #0
     2fe:	d1f2      	bne.n	2e6 <ADXL375_set_activity_thresh+0x7a>
     300:	2500      	movs	r5, #0
     302:	e008      	b.n	316 <ADXL375_set_activity_thresh+0xaa>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     304:	1c6b      	adds	r3, r5, #1
     306:	b29b      	uxth	r3, r3
     308:	4a17      	ldr	r2, [pc, #92]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     30a:	8912      	ldrh	r2, [r2, #8]
     30c:	42aa      	cmp	r2, r5
     30e:	d00b      	beq.n	328 <ADXL375_set_activity_thresh+0xbc>
     310:	1c1d      	adds	r5, r3, #0
     312:	e003      	b.n	31c <ADXL375_set_activity_thresh+0xb0>
     314:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     316:	4c14      	ldr	r4, [pc, #80]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     318:	4f16      	ldr	r7, [pc, #88]	; (374 <ADXL375_set_activity_thresh+0x108>)
     31a:	4e15      	ldr	r6, [pc, #84]	; (370 <ADXL375_set_activity_thresh+0x104>)
     31c:	1c20      	adds	r0, r4, #0
     31e:	a903      	add	r1, sp, #12
     320:	47b8      	blx	r7
     322:	7030      	strb	r0, [r6, #0]
     324:	2800      	cmp	r0, #0
     326:	d1ed      	bne.n	304 <ADXL375_set_activity_thresh+0x98>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	wr_buffer2[1] |= wr_buffer2[0];
     328:	ab01      	add	r3, sp, #4
     32a:	7819      	ldrb	r1, [r3, #0]
     32c:	785a      	ldrb	r2, [r3, #1]
     32e:	430a      	orrs	r2, r1
     330:	705a      	strb	r2, [r3, #1]
	wr_buffer2[0] = ADXL375_ACT_INACT_CTL_ADDR;
     332:	2227      	movs	r2, #39	; 0x27
     334:	701a      	strb	r2, [r3, #0]
	
	i2c_packet.data_length = 2;
     336:	aa03      	add	r2, sp, #12
     338:	2102      	movs	r1, #2
     33a:	8051      	strh	r1, [r2, #2]
	i2c_packet.data = wr_buffer2;
     33c:	9304      	str	r3, [sp, #16]
	timeout = 0;
     33e:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     340:	4c09      	ldr	r4, [pc, #36]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     342:	4f0a      	ldr	r7, [pc, #40]	; (36c <ADXL375_set_activity_thresh+0x100>)
     344:	4e0a      	ldr	r6, [pc, #40]	; (370 <ADXL375_set_activity_thresh+0x104>)
     346:	e006      	b.n	356 <ADXL375_set_activity_thresh+0xea>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     348:	1c6b      	adds	r3, r5, #1
     34a:	b29b      	uxth	r3, r3
     34c:	4a06      	ldr	r2, [pc, #24]	; (368 <ADXL375_set_activity_thresh+0xfc>)
     34e:	8912      	ldrh	r2, [r2, #8]
     350:	42aa      	cmp	r2, r5
     352:	d006      	beq.n	362 <ADXL375_set_activity_thresh+0xf6>
     354:	1c1d      	adds	r5, r3, #0
	wr_buffer2[0] = ADXL375_ACT_INACT_CTL_ADDR;
	
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer2;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     356:	1c20      	adds	r0, r4, #0
     358:	a903      	add	r1, sp, #12
     35a:	47b8      	blx	r7
     35c:	7030      	strb	r0, [r6, #0]
     35e:	2800      	cmp	r0, #0
     360:	d1f2      	bne.n	348 <ADXL375_set_activity_thresh+0xdc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     362:	b007      	add	sp, #28
     364:	bdf0      	pop	{r4, r5, r6, r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	20000d5c 	.word	0x20000d5c
     36c:	00001479 	.word	0x00001479
     370:	20000ddc 	.word	0x20000ddc
     374:	00001465 	.word	0x00001465

00000378 <ADXL375_set_inactivity_thresh>:
/* @param[in] y, indicates whether the y axis should be considered for interrupts
/* @param[in] z, indicates whether the z axis should be considered for interrupts
/* @returns none
/************************************************************************/
void ADXL375_set_inactivity_thresh(int8_t threshold, uint8_t duration, bool x, bool y, bool z)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b087      	sub	sp, #28
     37c:	ac0c      	add	r4, sp, #48	; 0x30
     37e:	7824      	ldrb	r4, [r4, #0]
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer1[2] = {ADXL375_THRESH_INACT_ADDR, threshold};
     380:	ad02      	add	r5, sp, #8
     382:	2625      	movs	r6, #37	; 0x25
     384:	702e      	strb	r6, [r5, #0]
     386:	7068      	strb	r0, [r5, #1]
	uint8_t wr_buffer2[2] = {ADXL375_TIME_INACT_ADDR, duration};
     388:	a801      	add	r0, sp, #4
     38a:	2526      	movs	r5, #38	; 0x26
     38c:	7005      	strb	r5, [r0, #0]
     38e:	7041      	strb	r1, [r0, #1]
	uint8_t wr_buffer3[2] = {ADXL375_ACT_INACT_CTL_ADDR, (x ? ADXL375_ACT_INACT_INACT_X_EN : 0x00) | (y ? ADXL375_ACT_INACT_INACT_Y_EN : 0x00) | (z ? ADXL375_ACT_INACT_INACT_Z_EN : 0x00)};
     390:	2127      	movs	r1, #39	; 0x27
     392:	4668      	mov	r0, sp
     394:	7001      	strb	r1, [r0, #0]
     396:	1e51      	subs	r1, r2, #1
     398:	418a      	sbcs	r2, r1
     39a:	0092      	lsls	r2, r2, #2
     39c:	1c19      	adds	r1, r3, #0
     39e:	1e4b      	subs	r3, r1, #1
     3a0:	4199      	sbcs	r1, r3
     3a2:	0049      	lsls	r1, r1, #1
     3a4:	4322      	orrs	r2, r4
     3a6:	1c13      	adds	r3, r2, #0
     3a8:	430b      	orrs	r3, r1
     3aa:	7043      	strb	r3, [r0, #1]

	i2c_packet.address = ADXL375_ADDR;
     3ac:	ab03      	add	r3, sp, #12
     3ae:	2253      	movs	r2, #83	; 0x53
     3b0:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     3b2:	2200      	movs	r2, #0
     3b4:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     3b6:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     3b8:	3202      	adds	r2, #2
     3ba:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer1;
     3bc:	aa02      	add	r2, sp, #8
     3be:	9204      	str	r2, [sp, #16]
/* @returns none
/************************************************************************/
void ADXL375_set_inactivity_thresh(int8_t threshold, uint8_t duration, bool x, bool y, bool z)
{
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     3c0:	2500      	movs	r5, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;

	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     3c2:	4c38      	ldr	r4, [pc, #224]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     3c4:	4f38      	ldr	r7, [pc, #224]	; (4a8 <ADXL375_set_inactivity_thresh+0x130>)
     3c6:	4e39      	ldr	r6, [pc, #228]	; (4ac <ADXL375_set_inactivity_thresh+0x134>)
     3c8:	e006      	b.n	3d8 <ADXL375_set_inactivity_thresh+0x60>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     3ca:	1c6b      	adds	r3, r5, #1
     3cc:	b29b      	uxth	r3, r3
     3ce:	4a35      	ldr	r2, [pc, #212]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     3d0:	8912      	ldrh	r2, [r2, #8]
     3d2:	42aa      	cmp	r2, r5
     3d4:	d006      	beq.n	3e4 <ADXL375_set_inactivity_thresh+0x6c>
     3d6:	1c1d      	adds	r5, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;

	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     3d8:	1c20      	adds	r0, r4, #0
     3da:	a903      	add	r1, sp, #12
     3dc:	47b8      	blx	r7
     3de:	7030      	strb	r0, [r6, #0]
     3e0:	2800      	cmp	r0, #0
     3e2:	d1f2      	bne.n	3ca <ADXL375_set_inactivity_thresh+0x52>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}

	i2c_packet.data = wr_buffer2;
     3e4:	ab01      	add	r3, sp, #4
     3e6:	9304      	str	r3, [sp, #16]
	timeout = 0;
     3e8:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     3ea:	4c2e      	ldr	r4, [pc, #184]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     3ec:	4f2e      	ldr	r7, [pc, #184]	; (4a8 <ADXL375_set_inactivity_thresh+0x130>)
     3ee:	4e2f      	ldr	r6, [pc, #188]	; (4ac <ADXL375_set_inactivity_thresh+0x134>)
     3f0:	e006      	b.n	400 <ADXL375_set_inactivity_thresh+0x88>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     3f2:	1c6b      	adds	r3, r5, #1
     3f4:	b29b      	uxth	r3, r3
     3f6:	4a2b      	ldr	r2, [pc, #172]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     3f8:	8912      	ldrh	r2, [r2, #8]
     3fa:	42aa      	cmp	r2, r5
     3fc:	d006      	beq.n	40c <ADXL375_set_inactivity_thresh+0x94>
     3fe:	1c1d      	adds	r5, r3, #0
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}

	i2c_packet.data = wr_buffer2;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     400:	1c20      	adds	r0, r4, #0
     402:	a903      	add	r1, sp, #12
     404:	47b8      	blx	r7
     406:	7030      	strb	r0, [r6, #0]
     408:	2800      	cmp	r0, #0
     40a:	d1f2      	bne.n	3f2 <ADXL375_set_inactivity_thresh+0x7a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the inactivity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
     40c:	ab03      	add	r3, sp, #12
     40e:	2201      	movs	r2, #1
     410:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer3;
     412:	466a      	mov	r2, sp
     414:	9204      	str	r2, [sp, #16]
	timeout = 0;
     416:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     418:	4c22      	ldr	r4, [pc, #136]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     41a:	4f23      	ldr	r7, [pc, #140]	; (4a8 <ADXL375_set_inactivity_thresh+0x130>)
     41c:	4e23      	ldr	r6, [pc, #140]	; (4ac <ADXL375_set_inactivity_thresh+0x134>)
     41e:	e006      	b.n	42e <ADXL375_set_inactivity_thresh+0xb6>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     420:	1c6b      	adds	r3, r5, #1
     422:	b29b      	uxth	r3, r3
     424:	4a1f      	ldr	r2, [pc, #124]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     426:	8912      	ldrh	r2, [r2, #8]
     428:	42aa      	cmp	r2, r5
     42a:	d010      	beq.n	44e <ADXL375_set_inactivity_thresh+0xd6>
     42c:	1c1d      	adds	r5, r3, #0
	// Read out the act inact ctl reg contents, then OR them with the value that needs to be set to set up the inactivity
	// that way we don't stomp a previously set value
	i2c_packet.data_length = 1;
	i2c_packet.data = wr_buffer3;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     42e:	1c20      	adds	r0, r4, #0
     430:	a903      	add	r1, sp, #12
     432:	47b8      	blx	r7
     434:	7030      	strb	r0, [r6, #0]
     436:	2800      	cmp	r0, #0
     438:	d1f2      	bne.n	420 <ADXL375_set_inactivity_thresh+0xa8>
     43a:	2500      	movs	r5, #0
     43c:	e008      	b.n	450 <ADXL375_set_inactivity_thresh+0xd8>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     43e:	1c6b      	adds	r3, r5, #1
     440:	b29b      	uxth	r3, r3
     442:	4a18      	ldr	r2, [pc, #96]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     444:	8912      	ldrh	r2, [r2, #8]
     446:	42aa      	cmp	r2, r5
     448:	d00b      	beq.n	462 <ADXL375_set_inactivity_thresh+0xea>
     44a:	1c1d      	adds	r5, r3, #0
     44c:	e003      	b.n	456 <ADXL375_set_inactivity_thresh+0xde>
     44e:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	timeout = 0;
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     450:	4c14      	ldr	r4, [pc, #80]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     452:	4f17      	ldr	r7, [pc, #92]	; (4b0 <ADXL375_set_inactivity_thresh+0x138>)
     454:	4e15      	ldr	r6, [pc, #84]	; (4ac <ADXL375_set_inactivity_thresh+0x134>)
     456:	1c20      	adds	r0, r4, #0
     458:	a903      	add	r1, sp, #12
     45a:	47b8      	blx	r7
     45c:	7030      	strb	r0, [r6, #0]
     45e:	2800      	cmp	r0, #0
     460:	d1ed      	bne.n	43e <ADXL375_set_inactivity_thresh+0xc6>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	wr_buffer3[1] |= wr_buffer3[0];
     462:	466b      	mov	r3, sp
     464:	781a      	ldrb	r2, [r3, #0]
     466:	785b      	ldrb	r3, [r3, #1]
     468:	4313      	orrs	r3, r2
     46a:	466a      	mov	r2, sp
     46c:	7053      	strb	r3, [r2, #1]
	wr_buffer3[0] = ADXL375_ACT_INACT_CTL_ADDR;
     46e:	2327      	movs	r3, #39	; 0x27
     470:	7013      	strb	r3, [r2, #0]
	
	i2c_packet.data_length = 2;
     472:	ab03      	add	r3, sp, #12
     474:	2202      	movs	r2, #2
     476:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer3;
     478:	466a      	mov	r2, sp
     47a:	9204      	str	r2, [sp, #16]
	timeout = 0;
     47c:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     47e:	4c09      	ldr	r4, [pc, #36]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     480:	4f09      	ldr	r7, [pc, #36]	; (4a8 <ADXL375_set_inactivity_thresh+0x130>)
     482:	4e0a      	ldr	r6, [pc, #40]	; (4ac <ADXL375_set_inactivity_thresh+0x134>)
     484:	e006      	b.n	494 <ADXL375_set_inactivity_thresh+0x11c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     486:	1c6b      	adds	r3, r5, #1
     488:	b29b      	uxth	r3, r3
     48a:	4a06      	ldr	r2, [pc, #24]	; (4a4 <ADXL375_set_inactivity_thresh+0x12c>)
     48c:	8912      	ldrh	r2, [r2, #8]
     48e:	42aa      	cmp	r2, r5
     490:	d006      	beq.n	4a0 <ADXL375_set_inactivity_thresh+0x128>
     492:	1c1d      	adds	r5, r3, #0
	wr_buffer3[0] = ADXL375_ACT_INACT_CTL_ADDR;
	
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer3;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     494:	1c20      	adds	r0, r4, #0
     496:	a903      	add	r1, sp, #12
     498:	47b8      	blx	r7
     49a:	7030      	strb	r0, [r6, #0]
     49c:	2800      	cmp	r0, #0
     49e:	d1f2      	bne.n	486 <ADXL375_set_inactivity_thresh+0x10e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	

}
     4a0:	b007      	add	sp, #28
     4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a4:	20000d5c 	.word	0x20000d5c
     4a8:	00001479 	.word	0x00001479
     4ac:	20000ddc 	.word	0x20000ddc
     4b0:	00001465 	.word	0x00001465

000004b4 <ADXL375_begin_sampling>:
/* @brief ADXL375_begin_sampling starts sampling on the ADXL375
/* @params none
/* @returns none
/************************************************************************/
void ADXL375_begin_sampling(void)
{
     4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b6:	b087      	sub	sp, #28
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	// Set the output data rate for 12.5 Hz (Closest to 10 available) and set for low power mode ("somewhat more noisy" -- datasheet).
	uint8_t wr_buffer[2] = {ADXL375_BW_RATE_ADDR, ADXL375_BW_RATE_LOW_PWR | 0x07};
     4b8:	ad02      	add	r5, sp, #8
     4ba:	4c1e      	ldr	r4, [pc, #120]	; (534 <ADXL375_begin_sampling+0x80>)
     4bc:	1c28      	adds	r0, r5, #0
     4be:	1c21      	adds	r1, r4, #0
     4c0:	2202      	movs	r2, #2
     4c2:	4e1d      	ldr	r6, [pc, #116]	; (538 <ADXL375_begin_sampling+0x84>)
     4c4:	47b0      	blx	r6
	uint8_t wr_buffer2[2] = {ADXL375_POWER_CTL_ADDR, ADXL375_POWER_CTL_MEASUSRE};	
     4c6:	1d21      	adds	r1, r4, #4
     4c8:	a801      	add	r0, sp, #4
     4ca:	2202      	movs	r2, #2
     4cc:	47b0      	blx	r6
	
	i2c_packet.address = ADXL375_ADDR;
     4ce:	ab03      	add	r3, sp, #12
     4d0:	2253      	movs	r2, #83	; 0x53
     4d2:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     4d4:	2200      	movs	r2, #0
     4d6:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     4d8:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     4da:	3202      	adds	r2, #2
     4dc:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     4de:	9504      	str	r5, [sp, #16]
/************************************************************************/
void ADXL375_begin_sampling(void)
{
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     4e0:	2400      	movs	r4, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	// Write the datarate buffer
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     4e2:	4d16      	ldr	r5, [pc, #88]	; (53c <ADXL375_begin_sampling+0x88>)
     4e4:	4f16      	ldr	r7, [pc, #88]	; (540 <ADXL375_begin_sampling+0x8c>)
     4e6:	4e17      	ldr	r6, [pc, #92]	; (544 <ADXL375_begin_sampling+0x90>)
     4e8:	e006      	b.n	4f8 <ADXL375_begin_sampling+0x44>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     4ea:	1c63      	adds	r3, r4, #1
     4ec:	b29b      	uxth	r3, r3
     4ee:	4a13      	ldr	r2, [pc, #76]	; (53c <ADXL375_begin_sampling+0x88>)
     4f0:	8912      	ldrh	r2, [r2, #8]
     4f2:	42a2      	cmp	r2, r4
     4f4:	d007      	beq.n	506 <ADXL375_begin_sampling+0x52>
     4f6:	1c1c      	adds	r4, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	// Write the datarate buffer
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     4f8:	1c28      	adds	r0, r5, #0
     4fa:	a903      	add	r1, sp, #12
     4fc:	47b8      	blx	r7
     4fe:	7030      	strb	r0, [r6, #0]
     500:	2800      	cmp	r0, #0
     502:	d1f2      	bne.n	4ea <ADXL375_begin_sampling+0x36>
     504:	e000      	b.n	508 <ADXL375_begin_sampling+0x54>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     506:	1c1c      	adds	r4, r3, #0
	}
	
	// Write the measurement mode buffer
	i2c_packet.data = wr_buffer2;
     508:	ab01      	add	r3, sp, #4
     50a:	9304      	str	r3, [sp, #16]
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     50c:	4d0b      	ldr	r5, [pc, #44]	; (53c <ADXL375_begin_sampling+0x88>)
     50e:	4f0c      	ldr	r7, [pc, #48]	; (540 <ADXL375_begin_sampling+0x8c>)
     510:	4e0c      	ldr	r6, [pc, #48]	; (544 <ADXL375_begin_sampling+0x90>)
     512:	e006      	b.n	522 <ADXL375_begin_sampling+0x6e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     514:	1c63      	adds	r3, r4, #1
     516:	b29b      	uxth	r3, r3
     518:	4a08      	ldr	r2, [pc, #32]	; (53c <ADXL375_begin_sampling+0x88>)
     51a:	8912      	ldrh	r2, [r2, #8]
     51c:	42a2      	cmp	r2, r4
     51e:	d006      	beq.n	52e <ADXL375_begin_sampling+0x7a>
     520:	1c1c      	adds	r4, r3, #0
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Write the measurement mode buffer
	i2c_packet.data = wr_buffer2;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     522:	1c28      	adds	r0, r5, #0
     524:	a903      	add	r1, sp, #12
     526:	47b8      	blx	r7
     528:	7030      	strb	r0, [r6, #0]
     52a:	2800      	cmp	r0, #0
     52c:	d1f2      	bne.n	514 <ADXL375_begin_sampling+0x60>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
}
     52e:	b007      	add	sp, #28
     530:	bdf0      	pop	{r4, r5, r6, r7, pc}
     532:	46c0      	nop			; (mov r8, r8)
     534:	0000425c 	.word	0x0000425c
     538:	00004245 	.word	0x00004245
     53c:	20000d5c 	.word	0x20000d5c
     540:	00001479 	.word	0x00001479
     544:	20000ddc 	.word	0x20000ddc

00000548 <ADXL375_end_sampling>:
/* @brief ADXL375_end_sampling ends sampling on the ADXL375 (enters standby mode)
/* @params none
/* @returns none
/************************************************************************/
void ADXL375_end_sampling(void)
{
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	b085      	sub	sp, #20
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer[2] = {ADXL375_POWER_CTL_ADDR, ~ADXL375_POWER_CTL_MEASUSRE};	
     54c:	4668      	mov	r0, sp
     54e:	4911      	ldr	r1, [pc, #68]	; (594 <ADXL375_end_sampling+0x4c>)
     550:	3108      	adds	r1, #8
     552:	2202      	movs	r2, #2
     554:	4b10      	ldr	r3, [pc, #64]	; (598 <ADXL375_end_sampling+0x50>)
     556:	4798      	blx	r3
	
	i2c_packet.address = ADXL375_ADDR;
     558:	ab01      	add	r3, sp, #4
     55a:	2253      	movs	r2, #83	; 0x53
     55c:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     55e:	2200      	movs	r2, #0
     560:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     562:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     564:	3202      	adds	r2, #2
     566:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     568:	466a      	mov	r2, sp
     56a:	9202      	str	r2, [sp, #8]
/************************************************************************/
void ADXL375_end_sampling(void)
{
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     56c:	2500      	movs	r5, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     56e:	4c0b      	ldr	r4, [pc, #44]	; (59c <ADXL375_end_sampling+0x54>)
     570:	4f0b      	ldr	r7, [pc, #44]	; (5a0 <ADXL375_end_sampling+0x58>)
     572:	4e0c      	ldr	r6, [pc, #48]	; (5a4 <ADXL375_end_sampling+0x5c>)
     574:	e006      	b.n	584 <ADXL375_end_sampling+0x3c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     576:	1c6b      	adds	r3, r5, #1
     578:	b29b      	uxth	r3, r3
     57a:	4a08      	ldr	r2, [pc, #32]	; (59c <ADXL375_end_sampling+0x54>)
     57c:	8912      	ldrh	r2, [r2, #8]
     57e:	42aa      	cmp	r2, r5
     580:	d006      	beq.n	590 <ADXL375_end_sampling+0x48>
     582:	1c1d      	adds	r5, r3, #0
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     584:	1c20      	adds	r0, r4, #0
     586:	a901      	add	r1, sp, #4
     588:	47b8      	blx	r7
     58a:	7030      	strb	r0, [r6, #0]
     58c:	2800      	cmp	r0, #0
     58e:	d1f2      	bne.n	576 <ADXL375_end_sampling+0x2e>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     590:	b005      	add	sp, #20
     592:	bdf0      	pop	{r4, r5, r6, r7, pc}
     594:	0000425c 	.word	0x0000425c
     598:	00004245 	.word	0x00004245
     59c:	20000d5c 	.word	0x20000d5c
     5a0:	00001479 	.word	0x00001479
     5a4:	20000ddc 	.word	0x20000ddc

000005a8 <ADXL375_calibrate>:
/* when this function is called. That ensures accurate calibration
/* @params none
/* @returns none                                                                   
/************************************************************************/
void ADXL375_calibrate(void)
{
     5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5aa:	464f      	mov	r7, r9
     5ac:	b480      	push	{r7}
     5ae:	b088      	sub	sp, #32
	
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer[3] = {ADXL375_DATAX0, ADXL375_DATAY0, ADXL375_DATAZ0};
     5b0:	a804      	add	r0, sp, #16
     5b2:	498a      	ldr	r1, [pc, #552]	; (7dc <ADXL375_calibrate+0x234>)
     5b4:	310c      	adds	r1, #12
     5b6:	2203      	movs	r2, #3
     5b8:	4b89      	ldr	r3, [pc, #548]	; (7e0 <ADXL375_calibrate+0x238>)
     5ba:	4798      	blx	r3
	uint8_t wr_buffer2 = ADXL375_FIFO_STATUS_ADDR;
     5bc:	210f      	movs	r1, #15
     5be:	4469      	add	r1, sp
     5c0:	2339      	movs	r3, #57	; 0x39
     5c2:	700b      	strb	r3, [r1, #0]
	int8_t data[6];
	volatile int8_t avgs[3] = {0, 0, 0};
     5c4:	ab01      	add	r3, sp, #4
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	705a      	strb	r2, [r3, #1]
     5cc:	709a      	strb	r2, [r3, #2]
	int8_t wr_buffer3[2];
	
	i2c_packet.address = ADXL375_ADDR;
     5ce:	ab05      	add	r3, sp, #20
     5d0:	2053      	movs	r0, #83	; 0x53
     5d2:	8018      	strh	r0, [r3, #0]
	i2c_packet.ten_bit_address = false;
     5d4:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     5d6:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 1;
     5d8:	3201      	adds	r2, #1
     5da:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = &wr_buffer2;
     5dc:	9106      	str	r1, [sp, #24]
	
	ADXL375_begin_sampling();
     5de:	4b81      	ldr	r3, [pc, #516]	; (7e4 <ADXL375_calibrate+0x23c>)
     5e0:	4798      	blx	r3
     5e2:	4b81      	ldr	r3, [pc, #516]	; (7e8 <ADXL375_calibrate+0x240>)
     5e4:	3b01      	subs	r3, #1
	// Wait for some samples
 	for(int i = 0; i < 65535; i++);
     5e6:	2b00      	cmp	r3, #0
     5e8:	d1fc      	bne.n	5e4 <ADXL375_calibrate+0x3c>
	ADXL375_end_sampling();
     5ea:	4b80      	ldr	r3, [pc, #512]	; (7ec <ADXL375_calibrate+0x244>)
     5ec:	4798      	blx	r3
     5ee:	4b7e      	ldr	r3, [pc, #504]	; (7e8 <ADXL375_calibrate+0x240>)
     5f0:	3b01      	subs	r3, #1
	// Make sure some time has passed so that the data can be moved from the fifo to the regs
	for(int i = 0; i < 65535; i++);
     5f2:	2b00      	cmp	r3, #0
     5f4:	d1fc      	bne.n	5f0 <ADXL375_calibrate+0x48>
     5f6:	2400      	movs	r4, #0
	
	// Write the fifo status reg address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     5f8:	4d7d      	ldr	r5, [pc, #500]	; (7f0 <ADXL375_calibrate+0x248>)
     5fa:	4f7e      	ldr	r7, [pc, #504]	; (7f4 <ADXL375_calibrate+0x24c>)
     5fc:	4e7e      	ldr	r6, [pc, #504]	; (7f8 <ADXL375_calibrate+0x250>)
     5fe:	e006      	b.n	60e <ADXL375_calibrate+0x66>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     600:	1c63      	adds	r3, r4, #1
     602:	b29b      	uxth	r3, r3
     604:	4a7a      	ldr	r2, [pc, #488]	; (7f0 <ADXL375_calibrate+0x248>)
     606:	8912      	ldrh	r2, [r2, #8]
     608:	42a2      	cmp	r2, r4
     60a:	d00f      	beq.n	62c <ADXL375_calibrate+0x84>
     60c:	1c1c      	adds	r4, r3, #0
	ADXL375_end_sampling();
	// Make sure some time has passed so that the data can be moved from the fifo to the regs
	for(int i = 0; i < 65535; i++);
	
	// Write the fifo status reg address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     60e:	1c28      	adds	r0, r5, #0
     610:	a905      	add	r1, sp, #20
     612:	47b8      	blx	r7
     614:	7030      	strb	r0, [r6, #0]
     616:	2800      	cmp	r0, #0
     618:	d1f2      	bne.n	600 <ADXL375_calibrate+0x58>
     61a:	e008      	b.n	62e <ADXL375_calibrate+0x86>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Read back the value from the fifo status reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     61c:	1c63      	adds	r3, r4, #1
     61e:	b29b      	uxth	r3, r3
     620:	4a73      	ldr	r2, [pc, #460]	; (7f0 <ADXL375_calibrate+0x248>)
     622:	8912      	ldrh	r2, [r2, #8]
     624:	42a2      	cmp	r2, r4
     626:	d00c      	beq.n	642 <ADXL375_calibrate+0x9a>
     628:	1c1c      	adds	r4, r3, #0
     62a:	e003      	b.n	634 <ADXL375_calibrate+0x8c>
	// Make sure some time has passed so that the data can be moved from the fifo to the regs
	for(int i = 0; i < 65535; i++);
	
	// Write the fifo status reg address for readback
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     62c:	1c1c      	adds	r4, r3, #0
	}
	
	// Read back the value from the fifo status reg
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     62e:	4d70      	ldr	r5, [pc, #448]	; (7f0 <ADXL375_calibrate+0x248>)
     630:	4f72      	ldr	r7, [pc, #456]	; (7fc <ADXL375_calibrate+0x254>)
     632:	4e71      	ldr	r6, [pc, #452]	; (7f8 <ADXL375_calibrate+0x250>)
     634:	1c28      	adds	r0, r5, #0
     636:	a905      	add	r1, sp, #20
     638:	47b8      	blx	r7
     63a:	7030      	strb	r0, [r6, #0]
     63c:	2800      	cmp	r0, #0
     63e:	d1ed      	bne.n	61c <ADXL375_calibrate+0x74>
     640:	e000      	b.n	644 <ADXL375_calibrate+0x9c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     642:	1c1c      	adds	r4, r3, #0
	}
	
	i2c_packet.data_length = 3;
     644:	ab05      	add	r3, sp, #20
     646:	2203      	movs	r2, #3
     648:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     64a:	aa04      	add	r2, sp, #16
     64c:	9206      	str	r2, [sp, #24]
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     64e:	4d68      	ldr	r5, [pc, #416]	; (7f0 <ADXL375_calibrate+0x248>)
     650:	4f68      	ldr	r7, [pc, #416]	; (7f4 <ADXL375_calibrate+0x24c>)
     652:	4e69      	ldr	r6, [pc, #420]	; (7f8 <ADXL375_calibrate+0x250>)
     654:	e006      	b.n	664 <ADXL375_calibrate+0xbc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     656:	1c63      	adds	r3, r4, #1
     658:	b29b      	uxth	r3, r3
     65a:	4a65      	ldr	r2, [pc, #404]	; (7f0 <ADXL375_calibrate+0x248>)
     65c:	8912      	ldrh	r2, [r2, #8]
     65e:	42a2      	cmp	r2, r4
     660:	d007      	beq.n	672 <ADXL375_calibrate+0xca>
     662:	1c1c      	adds	r4, r3, #0
	}
	
	i2c_packet.data_length = 3;
	i2c_packet.data = wr_buffer;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     664:	1c28      	adds	r0, r5, #0
     666:	a905      	add	r1, sp, #20
     668:	47b8      	blx	r7
     66a:	7030      	strb	r0, [r6, #0]
     66c:	2800      	cmp	r0, #0
     66e:	d1f2      	bne.n	656 <ADXL375_calibrate+0xae>
     670:	e000      	b.n	674 <ADXL375_calibrate+0xcc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     672:	1c1c      	adds	r4, r3, #0
	}
	
	i2c_packet.data_length = 3;
     674:	ab05      	add	r3, sp, #20
     676:	2203      	movs	r2, #3
     678:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = data;
     67a:	aa02      	add	r2, sp, #8
     67c:	9206      	str	r2, [sp, #24]
	for(int i = 0; i < wr_buffer2; i++){
     67e:	230f      	movs	r3, #15
     680:	446b      	add	r3, sp
     682:	781b      	ldrb	r3, [r3, #0]
     684:	4699      	mov	r9, r3
     686:	2500      	movs	r5, #0
     688:	2b00      	cmp	r3, #0
     68a:	dc08      	bgt.n	69e <ADXL375_calibrate+0xf6>
     68c:	e029      	b.n	6e2 <ADXL375_calibrate+0x13a>
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     68e:	1c63      	adds	r3, r4, #1
     690:	b29b      	uxth	r3, r3
     692:	4a57      	ldr	r2, [pc, #348]	; (7f0 <ADXL375_calibrate+0x248>)
     694:	8912      	ldrh	r2, [r2, #8]
     696:	42a2      	cmp	r2, r4
     698:	d00a      	beq.n	6b0 <ADXL375_calibrate+0x108>
     69a:	1c1c      	adds	r4, r3, #0
     69c:	e001      	b.n	6a2 <ADXL375_calibrate+0xfa>
	}
	
	i2c_packet.data_length = 3;
	i2c_packet.data = data;
	for(int i = 0; i < wr_buffer2; i++){
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     69e:	4f57      	ldr	r7, [pc, #348]	; (7fc <ADXL375_calibrate+0x254>)
     6a0:	4e55      	ldr	r6, [pc, #340]	; (7f8 <ADXL375_calibrate+0x250>)
     6a2:	4853      	ldr	r0, [pc, #332]	; (7f0 <ADXL375_calibrate+0x248>)
     6a4:	a905      	add	r1, sp, #20
     6a6:	47b8      	blx	r7
     6a8:	7030      	strb	r0, [r6, #0]
     6aa:	2800      	cmp	r0, #0
     6ac:	d1ef      	bne.n	68e <ADXL375_calibrate+0xe6>
     6ae:	e000      	b.n	6b2 <ADXL375_calibrate+0x10a>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     6b0:	1c1c      	adds	r4, r3, #0
		}
		avgs[0] += (data[0]);
     6b2:	ab01      	add	r3, sp, #4
     6b4:	7818      	ldrb	r0, [r3, #0]
     6b6:	a902      	add	r1, sp, #8
     6b8:	780a      	ldrb	r2, [r1, #0]
     6ba:	1882      	adds	r2, r0, r2
     6bc:	b2d2      	uxtb	r2, r2
     6be:	701a      	strb	r2, [r3, #0]
		avgs[1] += (data[1]);
     6c0:	7858      	ldrb	r0, [r3, #1]
     6c2:	784a      	ldrb	r2, [r1, #1]
     6c4:	1882      	adds	r2, r0, r2
     6c6:	b2d2      	uxtb	r2, r2
     6c8:	705a      	strb	r2, [r3, #1]
		avgs[2] += (data[2]);
     6ca:	7898      	ldrb	r0, [r3, #2]
     6cc:	788a      	ldrb	r2, [r1, #2]
     6ce:	1882      	adds	r2, r0, r2
     6d0:	b2d2      	uxtb	r2, r2
     6d2:	709a      	strb	r2, [r3, #2]
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data_length = 3;
	i2c_packet.data = data;
	for(int i = 0; i < wr_buffer2; i++){
     6d4:	3501      	adds	r5, #1
     6d6:	230f      	movs	r3, #15
     6d8:	446b      	add	r3, sp
     6da:	781b      	ldrb	r3, [r3, #0]
     6dc:	4699      	mov	r9, r3
     6de:	42ab      	cmp	r3, r5
     6e0:	dcdf      	bgt.n	6a2 <ADXL375_calibrate+0xfa>
		}
		avgs[0] += (data[0]);
		avgs[1] += (data[1]);
		avgs[2] += (data[2]);
	}
	avgs[0] /= wr_buffer2;
     6e2:	ad01      	add	r5, sp, #4
     6e4:	7828      	ldrb	r0, [r5, #0]
     6e6:	b240      	sxtb	r0, r0
     6e8:	4e45      	ldr	r6, [pc, #276]	; (800 <ADXL375_calibrate+0x258>)
     6ea:	4649      	mov	r1, r9
     6ec:	47b0      	blx	r6
     6ee:	b2c0      	uxtb	r0, r0
     6f0:	7028      	strb	r0, [r5, #0]
	avgs[1] /= wr_buffer2;
     6f2:	7868      	ldrb	r0, [r5, #1]
     6f4:	b240      	sxtb	r0, r0
     6f6:	4649      	mov	r1, r9
     6f8:	47b0      	blx	r6
     6fa:	b2c0      	uxtb	r0, r0
     6fc:	7068      	strb	r0, [r5, #1]
	avgs[2] /= wr_buffer2;
     6fe:	78a8      	ldrb	r0, [r5, #2]
     700:	b240      	sxtb	r0, r0
     702:	4649      	mov	r1, r9
     704:	47b0      	blx	r6
     706:	b2c0      	uxtb	r0, r0
     708:	70a8      	strb	r0, [r5, #2]
	
	
	i2c_packet.data_length = 2;
     70a:	ab05      	add	r3, sp, #20
     70c:	2202      	movs	r2, #2
     70e:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = &wr_buffer3;
     710:	466a      	mov	r2, sp
     712:	9206      	str	r2, [sp, #24]
	
	wr_buffer3[0] = ADXL375_OFSX_ADDR;
     714:	231e      	movs	r3, #30
     716:	7013      	strb	r3, [r2, #0]
	wr_buffer3[1] = avgs[0];
     718:	782b      	ldrb	r3, [r5, #0]
     71a:	7053      	strb	r3, [r2, #1]
	
	// Write offset x
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     71c:	4d34      	ldr	r5, [pc, #208]	; (7f0 <ADXL375_calibrate+0x248>)
     71e:	4f35      	ldr	r7, [pc, #212]	; (7f4 <ADXL375_calibrate+0x24c>)
     720:	4e35      	ldr	r6, [pc, #212]	; (7f8 <ADXL375_calibrate+0x250>)
     722:	e006      	b.n	732 <ADXL375_calibrate+0x18a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     724:	1c63      	adds	r3, r4, #1
     726:	b29b      	uxth	r3, r3
     728:	4a31      	ldr	r2, [pc, #196]	; (7f0 <ADXL375_calibrate+0x248>)
     72a:	8912      	ldrh	r2, [r2, #8]
     72c:	42a2      	cmp	r2, r4
     72e:	d006      	beq.n	73e <ADXL375_calibrate+0x196>
     730:	1c1c      	adds	r4, r3, #0
	
	wr_buffer3[0] = ADXL375_OFSX_ADDR;
	wr_buffer3[1] = avgs[0];
	
	// Write offset x
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     732:	1c28      	adds	r0, r5, #0
     734:	a905      	add	r1, sp, #20
     736:	47b8      	blx	r7
     738:	7030      	strb	r0, [r6, #0]
     73a:	2800      	cmp	r0, #0
     73c:	d1f2      	bne.n	724 <ADXL375_calibrate+0x17c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Write offset y
	i2c_packet.data_length = 2;
     73e:	2202      	movs	r2, #2
     740:	ab05      	add	r3, sp, #20
     742:	805a      	strh	r2, [r3, #2]
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
     744:	231f      	movs	r3, #31
     746:	466a      	mov	r2, sp
     748:	7013      	strb	r3, [r2, #0]
	wr_buffer3[1] = avgs[1];
     74a:	ab01      	add	r3, sp, #4
     74c:	785b      	ldrb	r3, [r3, #1]
     74e:	7053      	strb	r3, [r2, #1]
	timeout = 0;
     750:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     752:	4c27      	ldr	r4, [pc, #156]	; (7f0 <ADXL375_calibrate+0x248>)
     754:	4f27      	ldr	r7, [pc, #156]	; (7f4 <ADXL375_calibrate+0x24c>)
     756:	4e28      	ldr	r6, [pc, #160]	; (7f8 <ADXL375_calibrate+0x250>)
     758:	e006      	b.n	768 <ADXL375_calibrate+0x1c0>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     75a:	1c6b      	adds	r3, r5, #1
     75c:	b29b      	uxth	r3, r3
     75e:	4a24      	ldr	r2, [pc, #144]	; (7f0 <ADXL375_calibrate+0x248>)
     760:	8912      	ldrh	r2, [r2, #8]
     762:	42aa      	cmp	r2, r5
     764:	d006      	beq.n	774 <ADXL375_calibrate+0x1cc>
     766:	1c1d      	adds	r5, r3, #0
	// Write offset y
	i2c_packet.data_length = 2;
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
	wr_buffer3[1] = avgs[1];
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     768:	1c20      	adds	r0, r4, #0
     76a:	a905      	add	r1, sp, #20
     76c:	47b8      	blx	r7
     76e:	7030      	strb	r0, [r6, #0]
     770:	2800      	cmp	r0, #0
     772:	d1f2      	bne.n	75a <ADXL375_calibrate+0x1b2>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}

	// Write offset y
	wr_buffer3[0] = ADXL375_OFSZ_ADDR;
     774:	2320      	movs	r3, #32
     776:	466a      	mov	r2, sp
     778:	7013      	strb	r3, [r2, #0]
	wr_buffer3[1] = avgs[2];
     77a:	ab01      	add	r3, sp, #4
     77c:	789b      	ldrb	r3, [r3, #2]
     77e:	7053      	strb	r3, [r2, #1]
	timeout = 0;
     780:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     782:	4c1b      	ldr	r4, [pc, #108]	; (7f0 <ADXL375_calibrate+0x248>)
     784:	4f1b      	ldr	r7, [pc, #108]	; (7f4 <ADXL375_calibrate+0x24c>)
     786:	4e1c      	ldr	r6, [pc, #112]	; (7f8 <ADXL375_calibrate+0x250>)
     788:	e006      	b.n	798 <ADXL375_calibrate+0x1f0>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     78a:	1c6b      	adds	r3, r5, #1
     78c:	b29b      	uxth	r3, r3
     78e:	4a18      	ldr	r2, [pc, #96]	; (7f0 <ADXL375_calibrate+0x248>)
     790:	8912      	ldrh	r2, [r2, #8]
     792:	42aa      	cmp	r2, r5
     794:	d006      	beq.n	7a4 <ADXL375_calibrate+0x1fc>
     796:	1c1d      	adds	r5, r3, #0

	// Write offset y
	wr_buffer3[0] = ADXL375_OFSZ_ADDR;
	wr_buffer3[1] = avgs[2];
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     798:	1c20      	adds	r0, r4, #0
     79a:	a905      	add	r1, sp, #20
     79c:	47b8      	blx	r7
     79e:	7030      	strb	r0, [r6, #0]
     7a0:	2800      	cmp	r0, #0
     7a2:	d1f2      	bne.n	78a <ADXL375_calibrate+0x1e2>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	// Write offset y
	i2c_packet.data_length = 1;
     7a4:	2201      	movs	r2, #1
     7a6:	ab05      	add	r3, sp, #20
     7a8:	805a      	strh	r2, [r3, #2]
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
     7aa:	231f      	movs	r3, #31
     7ac:	466a      	mov	r2, sp
     7ae:	7013      	strb	r3, [r2, #0]
	timeout = 0;
     7b0:	2500      	movs	r5, #0
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     7b2:	4c0f      	ldr	r4, [pc, #60]	; (7f0 <ADXL375_calibrate+0x248>)
     7b4:	4f0f      	ldr	r7, [pc, #60]	; (7f4 <ADXL375_calibrate+0x24c>)
     7b6:	4e10      	ldr	r6, [pc, #64]	; (7f8 <ADXL375_calibrate+0x250>)
     7b8:	e006      	b.n	7c8 <ADXL375_calibrate+0x220>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     7ba:	1c6b      	adds	r3, r5, #1
     7bc:	b29b      	uxth	r3, r3
     7be:	4a0c      	ldr	r2, [pc, #48]	; (7f0 <ADXL375_calibrate+0x248>)
     7c0:	8912      	ldrh	r2, [r2, #8]
     7c2:	42aa      	cmp	r2, r5
     7c4:	d006      	beq.n	7d4 <ADXL375_calibrate+0x22c>
     7c6:	1c1d      	adds	r5, r3, #0
	
	// Write offset y
	i2c_packet.data_length = 1;
	wr_buffer3[0] = ADXL375_OFSY_ADDR;
	timeout = 0;
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     7c8:	1c20      	adds	r0, r4, #0
     7ca:	a905      	add	r1, sp, #20
     7cc:	47b8      	blx	r7
     7ce:	7030      	strb	r0, [r6, #0]
     7d0:	2800      	cmp	r0, #0
     7d2:	d1f2      	bne.n	7ba <ADXL375_calibrate+0x212>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
}
     7d4:	b008      	add	sp, #32
     7d6:	bc04      	pop	{r2}
     7d8:	4691      	mov	r9, r2
     7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7dc:	0000425c 	.word	0x0000425c
     7e0:	00004245 	.word	0x00004245
     7e4:	000004b5 	.word	0x000004b5
     7e8:	0000ffff 	.word	0x0000ffff
     7ec:	00000549 	.word	0x00000549
     7f0:	20000d5c 	.word	0x20000d5c
     7f4:	00001479 	.word	0x00001479
     7f8:	20000ddc 	.word	0x20000ddc
     7fc:	00001465 	.word	0x00001465
     800:	00003f81 	.word	0x00003f81

00000804 <configure_ADXL375>:
/* Also configures the external interrupt for the sensors interrupt output pin
/* @params none
/* @returns none
/************************************************************************/
void configure_ADXL375(void)
{
     804:	b5f0      	push	{r4, r5, r6, r7, lr}
     806:	b08b      	sub	sp, #44	; 0x2c
	// All buffers are separate for readability
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	// FIFO Stream mode (ring buffer) and 32 data points
	uint8_t wr_buffer1[2] = {ADXL375_FIFO_ADDR, ADXL375_FIFO_STREAM | 0x1F};
     808:	ae06      	add	r6, sp, #24
     80a:	4c65      	ldr	r4, [pc, #404]	; (9a0 <configure_ADXL375+0x19c>)
     80c:	1c21      	adds	r1, r4, #0
     80e:	3110      	adds	r1, #16
     810:	1c30      	adds	r0, r6, #0
     812:	2202      	movs	r2, #2
     814:	4d63      	ldr	r5, [pc, #396]	; (9a4 <configure_ADXL375+0x1a0>)
     816:	47a8      	blx	r5
	
	uint8_t wr_buffer4[2] = {ADXL375_INT_MAP_ADDR, (~ADXL375_INT_MAP_ACTIVITY & ~ADXL375_INT_SRC_WATERMARK & ~ADXL375_INT_SRC_WATERMARK) & 0xFF};
     818:	1c21      	adds	r1, r4, #0
     81a:	3114      	adds	r1, #20
     81c:	a805      	add	r0, sp, #20
     81e:	2202      	movs	r2, #2
     820:	47a8      	blx	r5
	// Enable interrupts for activity
	uint8_t wr_buffer5[2] = {ADXL375_INT_EN_ADDR, ADXL375_INT_EN_ACTIVITY | ADXL375_INT_SRC_INACTIVITY};
     822:	1c21      	adds	r1, r4, #0
     824:	3118      	adds	r1, #24
     826:	a804      	add	r0, sp, #16
     828:	2202      	movs	r2, #2
     82a:	47a8      	blx	r5
	// Set the part to measure mode -- this consumes lots of power. Should be changed to sleep.
	// There seems to be an issue triggering an interrupt in sleep mode (it doesn't work).
	uint8_t wr_buffer6[2] = {ADXL375_POWER_CTL_ADDR, ADXL375_POWER_CTL_MEASUSRE | ADXL375_POWER_CTL_SLEEP};
     82c:	1c21      	adds	r1, r4, #0
     82e:	311c      	adds	r1, #28
     830:	a803      	add	r0, sp, #12
     832:	2202      	movs	r2, #2
     834:	47a8      	blx	r5
	
	// Calibrate the sensor before configuring anything else
	ADXL375_calibrate();
     836:	4b5c      	ldr	r3, [pc, #368]	; (9a8 <configure_ADXL375+0x1a4>)
     838:	4798      	blx	r3
	
	ADXL375_set_activity_thresh(5, true, true, true);
     83a:	2005      	movs	r0, #5
     83c:	2101      	movs	r1, #1
     83e:	2201      	movs	r2, #1
     840:	2301      	movs	r3, #1
     842:	4c5a      	ldr	r4, [pc, #360]	; (9ac <configure_ADXL375+0x1a8>)
     844:	47a0      	blx	r4
	ADXL375_set_inactivity_thresh(7, 255, true, true, true);
     846:	2301      	movs	r3, #1
     848:	9300      	str	r3, [sp, #0]
     84a:	2007      	movs	r0, #7
     84c:	21ff      	movs	r1, #255	; 0xff
     84e:	2201      	movs	r2, #1
     850:	4c57      	ldr	r4, [pc, #348]	; (9b0 <configure_ADXL375+0x1ac>)
     852:	47a0      	blx	r4
	
	i2c_packet.address = ADXL375_ADDR;
     854:	ab07      	add	r3, sp, #28
     856:	2253      	movs	r2, #83	; 0x53
     858:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     85a:	2200      	movs	r2, #0
     85c:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     85e:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     860:	3202      	adds	r2, #2
     862:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer1;
     864:	9608      	str	r6, [sp, #32]
/************************************************************************/
void configure_ADXL375(void)
{
	// All buffers are separate for readability
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     866:	2500      	movs	r5, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	/* Write each packet one at a time, bad for efficiency, but good for readability */
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     868:	4c52      	ldr	r4, [pc, #328]	; (9b4 <configure_ADXL375+0x1b0>)
     86a:	4f53      	ldr	r7, [pc, #332]	; (9b8 <configure_ADXL375+0x1b4>)
     86c:	4e53      	ldr	r6, [pc, #332]	; (9bc <configure_ADXL375+0x1b8>)
     86e:	e006      	b.n	87e <configure_ADXL375+0x7a>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     870:	1c6b      	adds	r3, r5, #1
     872:	b29b      	uxth	r3, r3
     874:	4a4f      	ldr	r2, [pc, #316]	; (9b4 <configure_ADXL375+0x1b0>)
     876:	8912      	ldrh	r2, [r2, #8]
     878:	42aa      	cmp	r2, r5
     87a:	d006      	beq.n	88a <configure_ADXL375+0x86>
     87c:	1c1d      	adds	r5, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 2;
	i2c_packet.data = wr_buffer1;
	
	/* Write each packet one at a time, bad for efficiency, but good for readability */
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     87e:	1c20      	adds	r0, r4, #0
     880:	a907      	add	r1, sp, #28
     882:	47b8      	blx	r7
     884:	7030      	strb	r0, [r6, #0]
     886:	2800      	cmp	r0, #0
     888:	d1f2      	bne.n	870 <configure_ADXL375+0x6c>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer4;
     88a:	ab05      	add	r3, sp, #20
     88c:	9308      	str	r3, [sp, #32]
	timeout = 0;
     88e:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     890:	4c48      	ldr	r4, [pc, #288]	; (9b4 <configure_ADXL375+0x1b0>)
     892:	4f49      	ldr	r7, [pc, #292]	; (9b8 <configure_ADXL375+0x1b4>)
     894:	4e49      	ldr	r6, [pc, #292]	; (9bc <configure_ADXL375+0x1b8>)
     896:	e006      	b.n	8a6 <configure_ADXL375+0xa2>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     898:	1c6b      	adds	r3, r5, #1
     89a:	b29b      	uxth	r3, r3
     89c:	4a45      	ldr	r2, [pc, #276]	; (9b4 <configure_ADXL375+0x1b0>)
     89e:	8912      	ldrh	r2, [r2, #8]
     8a0:	42aa      	cmp	r2, r5
     8a2:	d006      	beq.n	8b2 <configure_ADXL375+0xae>
     8a4:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer4;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8a6:	1c20      	adds	r0, r4, #0
     8a8:	a907      	add	r1, sp, #28
     8aa:	47b8      	blx	r7
     8ac:	7030      	strb	r0, [r6, #0]
     8ae:	2800      	cmp	r0, #0
     8b0:	d1f2      	bne.n	898 <configure_ADXL375+0x94>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer5;
     8b2:	ab04      	add	r3, sp, #16
     8b4:	9308      	str	r3, [sp, #32]
	timeout = 0;
     8b6:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8b8:	4c3e      	ldr	r4, [pc, #248]	; (9b4 <configure_ADXL375+0x1b0>)
     8ba:	4f3f      	ldr	r7, [pc, #252]	; (9b8 <configure_ADXL375+0x1b4>)
     8bc:	4e3f      	ldr	r6, [pc, #252]	; (9bc <configure_ADXL375+0x1b8>)
     8be:	e006      	b.n	8ce <configure_ADXL375+0xca>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     8c0:	1c6b      	adds	r3, r5, #1
     8c2:	b29b      	uxth	r3, r3
     8c4:	4a3b      	ldr	r2, [pc, #236]	; (9b4 <configure_ADXL375+0x1b0>)
     8c6:	8912      	ldrh	r2, [r2, #8]
     8c8:	42aa      	cmp	r2, r5
     8ca:	d006      	beq.n	8da <configure_ADXL375+0xd6>
     8cc:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer5;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8ce:	1c20      	adds	r0, r4, #0
     8d0:	a907      	add	r1, sp, #28
     8d2:	47b8      	blx	r7
     8d4:	7030      	strb	r0, [r6, #0]
     8d6:	2800      	cmp	r0, #0
     8d8:	d1f2      	bne.n	8c0 <configure_ADXL375+0xbc>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	i2c_packet.data = wr_buffer6;
     8da:	ab03      	add	r3, sp, #12
     8dc:	9308      	str	r3, [sp, #32]
	timeout = 0;
     8de:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8e0:	4c34      	ldr	r4, [pc, #208]	; (9b4 <configure_ADXL375+0x1b0>)
     8e2:	4f35      	ldr	r7, [pc, #212]	; (9b8 <configure_ADXL375+0x1b4>)
     8e4:	4e35      	ldr	r6, [pc, #212]	; (9bc <configure_ADXL375+0x1b8>)
     8e6:	e006      	b.n	8f6 <configure_ADXL375+0xf2>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     8e8:	1c6b      	adds	r3, r5, #1
     8ea:	b29b      	uxth	r3, r3
     8ec:	4a31      	ldr	r2, [pc, #196]	; (9b4 <configure_ADXL375+0x1b0>)
     8ee:	8912      	ldrh	r2, [r2, #8]
     8f0:	42aa      	cmp	r2, r5
     8f2:	d006      	beq.n	902 <configure_ADXL375+0xfe>
     8f4:	1c1d      	adds	r5, r3, #0
	}
	
	i2c_packet.data = wr_buffer6;
	timeout = 0;
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     8f6:	1c20      	adds	r0, r4, #0
     8f8:	a907      	add	r1, sp, #28
     8fa:	47b8      	blx	r7
     8fc:	7030      	strb	r0, [r6, #0]
     8fe:	2800      	cmp	r0, #0
     900:	d1f2      	bne.n	8e8 <configure_ADXL375+0xe4>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     902:	a902      	add	r1, sp, #8
     904:	2400      	movs	r4, #0
     906:	704c      	strb	r4, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     908:	70cc      	strb	r4, [r1, #3]
	
		
	// Set up the interrupt pin
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = PINMUX_PA16A_EIC_EXTINT0;
     90a:	700c      	strb	r4, [r1, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     90c:	708c      	strb	r4, [r1, #2]
	
	system_pinmux_pin_set_config(ADXL375_INT_PIN, &config_pinmux);
     90e:	2010      	movs	r0, #16
     910:	4b2b      	ldr	r3, [pc, #172]	; (9c0 <configure_ADXL375+0x1bc>)
     912:	4798      	blx	r3
	uint32_t pin_index = (gpio_pin % 32);

	if (mode == SYSTEM_PINMUX_PIN_SAMPLE_ONDEMAND) {
		port->CTRL.reg |= (1 << pin_index);
	} else {
		port->CTRL.reg &= ~(1 << pin_index);
     914:	4a2b      	ldr	r2, [pc, #172]	; (9c4 <configure_ADXL375+0x1c0>)
     916:	6a51      	ldr	r1, [r2, #36]	; 0x24
     918:	4b2b      	ldr	r3, [pc, #172]	; (9c8 <configure_ADXL375+0x1c4>)
     91a:	400b      	ands	r3, r1
     91c:	6253      	str	r3, [r2, #36]	; 0x24
	system_pinmux_pin_set_input_sample_mode(ADXL375_INT_PIN, SYSTEM_PINMUX_PIN_SAMPLE_CONTINUOUS);
	
	// Disable the EIC so we can write regs
	REG_EIC_CTRLA = 0;
     91e:	4b2b      	ldr	r3, [pc, #172]	; (9cc <configure_ADXL375+0x1c8>)
     920:	701c      	strb	r4, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
     922:	492b      	ldr	r1, [pc, #172]	; (9d0 <configure_ADXL375+0x1cc>)
     924:	2202      	movs	r2, #2
     926:	680b      	ldr	r3, [r1, #0]
     928:	421a      	tst	r2, r3
     92a:	d1fc      	bne.n	926 <configure_ADXL375+0x122>
	
	// Enable interrupts on EXTINT[0]
	REG_EIC_INTENSET |= 0x01;
     92c:	4b29      	ldr	r3, [pc, #164]	; (9d4 <configure_ADXL375+0x1d0>)
     92e:	681a      	ldr	r2, [r3, #0]
     930:	2101      	movs	r1, #1
     932:	430a      	orrs	r2, r1
     934:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_INTENSET & 0x01)) return;
     936:	681b      	ldr	r3, [r3, #0]
     938:	4219      	tst	r1, r3
     93a:	d02e      	beq.n	99a <configure_ADXL375+0x196>
	
	// Turn filtering off and set detection for falling edge for EXTINT[0]
	REG_EIC_CONFIG0 &= ~0x8;
     93c:	4b26      	ldr	r3, [pc, #152]	; (9d8 <configure_ADXL375+0x1d4>)
     93e:	681a      	ldr	r2, [r3, #0]
     940:	3107      	adds	r1, #7
     942:	438a      	bics	r2, r1
     944:	601a      	str	r2, [r3, #0]
	REG_EIC_CONFIG0 |= 0x4;
     946:	681a      	ldr	r2, [r3, #0]
     948:	3904      	subs	r1, #4
     94a:	430a      	orrs	r2, r1
     94c:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_CONFIG0 & 0x4) && (REG_EIC_CONFIG0 & 0x8)) return;
     94e:	681b      	ldr	r3, [r3, #0]
     950:	4219      	tst	r1, r3
     952:	d103      	bne.n	95c <configure_ADXL375+0x158>
     954:	4b20      	ldr	r3, [pc, #128]	; (9d8 <configure_ADXL375+0x1d4>)
     956:	681b      	ldr	r3, [r3, #0]
     958:	071b      	lsls	r3, r3, #28
     95a:	d41e      	bmi.n	99a <configure_ADXL375+0x196>
	
	// Enable asynchronous interrupts for EXTINT[0]
	REG_EIC_ASYNCH |= 0x00000001;
     95c:	4b1f      	ldr	r3, [pc, #124]	; (9dc <configure_ADXL375+0x1d8>)
     95e:	681a      	ldr	r2, [r3, #0]
     960:	2101      	movs	r1, #1
     962:	430a      	orrs	r2, r1
     964:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_ASYNCH & 0x01)) return;
     966:	681b      	ldr	r3, [r3, #0]
     968:	4219      	tst	r1, r3
     96a:	d016      	beq.n	99a <configure_ADXL375+0x196>
	
	// Enable the EIC
	REG_EIC_CTRLA = 0x02;
     96c:	2202      	movs	r2, #2
     96e:	4b17      	ldr	r3, [pc, #92]	; (9cc <configure_ADXL375+0x1c8>)
     970:	701a      	strb	r2, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
     972:	4917      	ldr	r1, [pc, #92]	; (9d0 <configure_ADXL375+0x1cc>)
     974:	680b      	ldr	r3, [r1, #0]
     976:	421a      	tst	r2, r3
     978:	d1fc      	bne.n	974 <configure_ADXL375+0x170>
	if(!(REG_EIC_CTRLA & 0x02)) return;
     97a:	4b14      	ldr	r3, [pc, #80]	; (9cc <configure_ADXL375+0x1c8>)
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	079b      	lsls	r3, r3, #30
     980:	d50b      	bpl.n	99a <configure_ADXL375+0x196>
	
	// register the callback function
	if(!(extint_register_callback(ADXL375_ISR_Handler, 0, EXTINT_CALLBACK_TYPE_DETECT) == STATUS_OK)) return;
     982:	4817      	ldr	r0, [pc, #92]	; (9e0 <configure_ADXL375+0x1dc>)
     984:	2100      	movs	r1, #0
     986:	2200      	movs	r2, #0
     988:	4b16      	ldr	r3, [pc, #88]	; (9e4 <configure_ADXL375+0x1e0>)
     98a:	4798      	blx	r3
     98c:	2800      	cmp	r0, #0
     98e:	d104      	bne.n	99a <configure_ADXL375+0x196>
	// Set the buffer index pointer to 0
	uiAccelerometerMatrixPtr = 0;
     990:	2200      	movs	r2, #0
     992:	4b15      	ldr	r3, [pc, #84]	; (9e8 <configure_ADXL375+0x1e4>)
     994:	801a      	strh	r2, [r3, #0]
	ADXL375_inactive_interrupts = 0;
     996:	4b15      	ldr	r3, [pc, #84]	; (9ec <configure_ADXL375+0x1e8>)
     998:	701a      	strb	r2, [r3, #0]
	
}
     99a:	b00b      	add	sp, #44	; 0x2c
     99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	0000425c 	.word	0x0000425c
     9a4:	00004245 	.word	0x00004245
     9a8:	000005a9 	.word	0x000005a9
     9ac:	0000026d 	.word	0x0000026d
     9b0:	00000379 	.word	0x00000379
     9b4:	20000d5c 	.word	0x20000d5c
     9b8:	00001479 	.word	0x00001479
     9bc:	20000ddc 	.word	0x20000ddc
     9c0:	00003c71 	.word	0x00003c71
     9c4:	40002800 	.word	0x40002800
     9c8:	fffeffff 	.word	0xfffeffff
     9cc:	40002400 	.word	0x40002400
     9d0:	40002404 	.word	0x40002404
     9d4:	40002410 	.word	0x40002410
     9d8:	4000241c 	.word	0x4000241c
     9dc:	40002418 	.word	0x40002418
     9e0:	00000ac1 	.word	0x00000ac1
     9e4:	000033dd 	.word	0x000033dd
     9e8:	20000ccc 	.word	0x20000ccc
     9ec:	20000cdd 	.word	0x20000cdd

000009f0 <ADXL375_read_samples>:
/* @param[in,out] data, pointer to data array of 3*length
/* @param[in] length, number of bytes to read out per axis
/* @returns none
/************************************************************************/
void ADXL375_read_samples(uint8_t* data, uint8_t length)
{
     9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9f2:	465f      	mov	r7, fp
     9f4:	464e      	mov	r6, r9
     9f6:	4645      	mov	r5, r8
     9f8:	b4e0      	push	{r5, r6, r7}
     9fa:	b088      	sub	sp, #32
     9fc:	1c04      	adds	r4, r0, #0
     9fe:	1c0d      	adds	r5, r1, #0
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t tempBuffer[6];
	uint8_t wr_buffer[6] = {ADXL375_DATAX0, ADXL375_DATAX1, ADXL375_DATAY0, ADXL375_DATAY1, ADXL375_DATAZ0, ADXL375_DATAZ1};
     a00:	a801      	add	r0, sp, #4
     a02:	4929      	ldr	r1, [pc, #164]	; (aa8 <ADXL375_read_samples+0xb8>)
     a04:	3120      	adds	r1, #32
     a06:	2206      	movs	r2, #6
     a08:	4b28      	ldr	r3, [pc, #160]	; (aac <ADXL375_read_samples+0xbc>)
     a0a:	4798      	blx	r3
	
	i2c_packet.address = ADXL375_ADDR;
     a0c:	ab05      	add	r3, sp, #20
     a0e:	2253      	movs	r2, #83	; 0x53
     a10:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     a12:	2200      	movs	r2, #0
     a14:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     a16:	725a      	strb	r2, [r3, #9]
	
	for(int i = 0; i < length; i++){
     a18:	2d00      	cmp	r5, #0
     a1a:	dd3f      	ble.n	a9c <ADXL375_read_samples+0xac>
     a1c:	46a3      	mov	fp, r4
     a1e:	46a1      	mov	r9, r4
     a20:	44a9      	add	r9, r5
     a22:	2400      	movs	r4, #0
		// Write the registers that should be read out
		i2c_packet.data_length = 6;
		i2c_packet.data = wr_buffer;
		while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a24:	4e22      	ldr	r6, [pc, #136]	; (ab0 <ADXL375_read_samples+0xc0>)
     a26:	4f23      	ldr	r7, [pc, #140]	; (ab4 <ADXL375_read_samples+0xc4>)
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	
	for(int i = 0; i < length; i++){
		// Write the registers that should be read out
		i2c_packet.data_length = 6;
     a28:	ab05      	add	r3, sp, #20
     a2a:	2206      	movs	r2, #6
     a2c:	805a      	strh	r2, [r3, #2]
		i2c_packet.data = wr_buffer;
     a2e:	aa01      	add	r2, sp, #4
     a30:	9206      	str	r2, [sp, #24]
		while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a32:	e006      	b.n	a42 <ADXL375_read_samples+0x52>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a34:	1c63      	adds	r3, r4, #1
     a36:	b29b      	uxth	r3, r3
     a38:	4a1f      	ldr	r2, [pc, #124]	; (ab8 <ADXL375_read_samples+0xc8>)
     a3a:	8912      	ldrh	r2, [r2, #8]
     a3c:	42a2      	cmp	r2, r4
     a3e:	d007      	beq.n	a50 <ADXL375_read_samples+0x60>
     a40:	1c1c      	adds	r4, r3, #0
	
	for(int i = 0; i < length; i++){
		// Write the registers that should be read out
		i2c_packet.data_length = 6;
		i2c_packet.data = wr_buffer;
		while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a42:	481d      	ldr	r0, [pc, #116]	; (ab8 <ADXL375_read_samples+0xc8>)
     a44:	a905      	add	r1, sp, #20
     a46:	47b0      	blx	r6
     a48:	7038      	strb	r0, [r7, #0]
     a4a:	2800      	cmp	r0, #0
     a4c:	d1f2      	bne.n	a34 <ADXL375_read_samples+0x44>
     a4e:	e000      	b.n	a52 <ADXL375_read_samples+0x62>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a50:	1c1c      	adds	r4, r3, #0
		}
		// Perform the readout
		i2c_packet.data_length = 6;
     a52:	ab05      	add	r3, sp, #20
     a54:	2206      	movs	r2, #6
     a56:	805a      	strh	r2, [r3, #2]
		i2c_packet.data = tempBuffer;
     a58:	aa03      	add	r2, sp, #12
     a5a:	9206      	str	r2, [sp, #24]
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a5c:	4b17      	ldr	r3, [pc, #92]	; (abc <ADXL375_read_samples+0xcc>)
     a5e:	4698      	mov	r8, r3
     a60:	4d14      	ldr	r5, [pc, #80]	; (ab4 <ADXL375_read_samples+0xc4>)
     a62:	e006      	b.n	a72 <ADXL375_read_samples+0x82>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a64:	1c63      	adds	r3, r4, #1
     a66:	b29b      	uxth	r3, r3
     a68:	4a13      	ldr	r2, [pc, #76]	; (ab8 <ADXL375_read_samples+0xc8>)
     a6a:	8912      	ldrh	r2, [r2, #8]
     a6c:	42a2      	cmp	r2, r4
     a6e:	d007      	beq.n	a80 <ADXL375_read_samples+0x90>
     a70:	1c1c      	adds	r4, r3, #0
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
		}
		// Perform the readout
		i2c_packet.data_length = 6;
		i2c_packet.data = tempBuffer;
		while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     a72:	4811      	ldr	r0, [pc, #68]	; (ab8 <ADXL375_read_samples+0xc8>)
     a74:	a905      	add	r1, sp, #20
     a76:	47c0      	blx	r8
     a78:	7028      	strb	r0, [r5, #0]
     a7a:	2800      	cmp	r0, #0
     a7c:	d1f2      	bne.n	a64 <ADXL375_read_samples+0x74>
     a7e:	e000      	b.n	a82 <ADXL375_read_samples+0x92>
			if(timeout++ == i2c_master_instance.buffer_timeout) break;
     a80:	1c1c      	adds	r4, r3, #0
		}
		data[i]		= tempBuffer[1];
     a82:	ab03      	add	r3, sp, #12
     a84:	785a      	ldrb	r2, [r3, #1]
     a86:	4659      	mov	r1, fp
     a88:	700a      	strb	r2, [r1, #0]
		data[i+1]	= tempBuffer[3];
     a8a:	78da      	ldrb	r2, [r3, #3]
     a8c:	704a      	strb	r2, [r1, #1]
		data[i+2]	= tempBuffer[5];
     a8e:	795b      	ldrb	r3, [r3, #5]
     a90:	708b      	strb	r3, [r1, #2]
     a92:	2301      	movs	r3, #1
     a94:	469c      	mov	ip, r3
     a96:	44e3      	add	fp, ip
	
	i2c_packet.address = ADXL375_ADDR;
	i2c_packet.ten_bit_address = false;
	i2c_packet.high_speed = false;
	
	for(int i = 0; i < length; i++){
     a98:	45cb      	cmp	fp, r9
     a9a:	d1c5      	bne.n	a28 <ADXL375_read_samples+0x38>
		}
		data[i]		= tempBuffer[1];
		data[i+1]	= tempBuffer[3];
		data[i+2]	= tempBuffer[5];
	}
     a9c:	b008      	add	sp, #32
     a9e:	bc1c      	pop	{r2, r3, r4}
     aa0:	4690      	mov	r8, r2
     aa2:	4699      	mov	r9, r3
     aa4:	46a3      	mov	fp, r4
     aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aa8:	0000425c 	.word	0x0000425c
     aac:	00004245 	.word	0x00004245
     ab0:	00001479 	.word	0x00001479
     ab4:	20000ddc 	.word	0x20000ddc
     ab8:	20000d5c 	.word	0x20000d5c
     abc:	00001465 	.word	0x00001465

00000ac0 <ADXL375_ISR_Handler>:
/* When INT1 pin on the ADXL375 is triggered, this function is called.
/* @params none
/* @returns none
**************************************************************************/
void ADXL375_ISR_Handler(void)
{
     ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ac2:	b085      	sub	sp, #20
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t buffer = ADXL375_INT_SRC_ADDR;
     ac4:	466b      	mov	r3, sp
     ac6:	1cda      	adds	r2, r3, #3
     ac8:	2330      	movs	r3, #48	; 0x30
     aca:	7013      	strb	r3, [r2, #0]
	
	i2c_packet.address = ADXL375_ADDR;
     acc:	ab01      	add	r3, sp, #4
     ace:	2153      	movs	r1, #83	; 0x53
     ad0:	8019      	strh	r1, [r3, #0]
	i2c_packet.ten_bit_address = false;
     ad2:	2100      	movs	r1, #0
     ad4:	7219      	strb	r1, [r3, #8]
	i2c_packet.high_speed = false;
     ad6:	7259      	strb	r1, [r3, #9]
	i2c_packet.data_length = 1;
     ad8:	3101      	adds	r1, #1
     ada:	8059      	strh	r1, [r3, #2]
	i2c_packet.data = &buffer;
     adc:	9202      	str	r2, [sp, #8]
/* @returns none
**************************************************************************/
void ADXL375_ISR_Handler(void)
{
	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
     ade:	2400      	movs	r4, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = &buffer;
	
	// Check the interrupt source value
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     ae0:	4d33      	ldr	r5, [pc, #204]	; (bb0 <ADXL375_ISR_Handler+0xf0>)
     ae2:	4f34      	ldr	r7, [pc, #208]	; (bb4 <ADXL375_ISR_Handler+0xf4>)
     ae4:	4e34      	ldr	r6, [pc, #208]	; (bb8 <ADXL375_ISR_Handler+0xf8>)
     ae6:	e006      	b.n	af6 <ADXL375_ISR_Handler+0x36>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     ae8:	1c63      	adds	r3, r4, #1
     aea:	b29b      	uxth	r3, r3
     aec:	4a30      	ldr	r2, [pc, #192]	; (bb0 <ADXL375_ISR_Handler+0xf0>)
     aee:	8912      	ldrh	r2, [r2, #8]
     af0:	42a2      	cmp	r2, r4
     af2:	d00f      	beq.n	b14 <ADXL375_ISR_Handler+0x54>
     af4:	1c1c      	adds	r4, r3, #0
	i2c_packet.high_speed = false;
	i2c_packet.data_length = 1;
	i2c_packet.data = &buffer;
	
	// Check the interrupt source value
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     af6:	1c28      	adds	r0, r5, #0
     af8:	a901      	add	r1, sp, #4
     afa:	47b8      	blx	r7
     afc:	7030      	strb	r0, [r6, #0]
     afe:	2800      	cmp	r0, #0
     b00:	d1f2      	bne.n	ae8 <ADXL375_ISR_Handler+0x28>
     b02:	e008      	b.n	b16 <ADXL375_ISR_Handler+0x56>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     b04:	1c63      	adds	r3, r4, #1
     b06:	b29b      	uxth	r3, r3
     b08:	4a29      	ldr	r2, [pc, #164]	; (bb0 <ADXL375_ISR_Handler+0xf0>)
     b0a:	8912      	ldrh	r2, [r2, #8]
     b0c:	42a2      	cmp	r2, r4
     b0e:	d00b      	beq.n	b28 <ADXL375_ISR_Handler+0x68>
     b10:	1c1c      	adds	r4, r3, #0
     b12:	e003      	b.n	b1c <ADXL375_ISR_Handler+0x5c>
	i2c_packet.data_length = 1;
	i2c_packet.data = &buffer;
	
	// Check the interrupt source value
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     b14:	1c1c      	adds	r4, r3, #0
	}
	
	while((status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     b16:	4d26      	ldr	r5, [pc, #152]	; (bb0 <ADXL375_ISR_Handler+0xf0>)
     b18:	4f28      	ldr	r7, [pc, #160]	; (bbc <ADXL375_ISR_Handler+0xfc>)
     b1a:	4e27      	ldr	r6, [pc, #156]	; (bb8 <ADXL375_ISR_Handler+0xf8>)
     b1c:	1c28      	adds	r0, r5, #0
     b1e:	a901      	add	r1, sp, #4
     b20:	47b8      	blx	r7
     b22:	7030      	strb	r0, [r6, #0]
     b24:	2800      	cmp	r0, #0
     b26:	d1ed      	bne.n	b04 <ADXL375_ISR_Handler+0x44>
		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	// If the source of the interrupt was movement, handle it.
	if(buffer & ADXL375_INT_SRC_ACTIVITY){
     b28:	466b      	mov	r3, sp
     b2a:	3303      	adds	r3, #3
     b2c:	781b      	ldrb	r3, [r3, #0]
     b2e:	06db      	lsls	r3, r3, #27
     b30:	d535      	bpl.n	b9e <ADXL375_ISR_Handler+0xde>
		// If we are in winter mode, then switch to summer mode otherwise stay in winter mode
		ucCurrent_Mode = ucCurrent_Mode == WINTER_MODE ? SUMMER_MODE : WINTER_MODE;
     b32:	4a23      	ldr	r2, [pc, #140]	; (bc0 <ADXL375_ISR_Handler+0x100>)
     b34:	7813      	ldrb	r3, [r2, #0]
     b36:	3b01      	subs	r3, #1
     b38:	1e59      	subs	r1, r3, #1
     b3a:	418b      	sbcs	r3, r1
     b3c:	7013      	strb	r3, [r2, #0]
		// Movement interrupt triggered, enter 12.5 Hz sampling mode
		ADXL375_begin_sampling();		
     b3e:	4b21      	ldr	r3, [pc, #132]	; (bc4 <ADXL375_ISR_Handler+0x104>)
     b40:	4798      	blx	r3
     b42:	e02c      	b.n	b9e <ADXL375_ISR_Handler+0xde>
	}
	// If the source of the interrupt is from the the FIFO filling up
	if(buffer & ADXL375_INT_SRC_WATERMARK){
     b44:	2420      	movs	r4, #32
		// FIFO is full, read it out
		// We know that 32 points are in the FIFO since thats the size we set it to
		for(int i = 0; i < 32; i++){
			ADXL375_read_samples(ucAccelerometerMatrix + uiAccelerometerMatrixPtr++, 1);
     b46:	4d20      	ldr	r5, [pc, #128]	; (bc8 <ADXL375_ISR_Handler+0x108>)
     b48:	4f20      	ldr	r7, [pc, #128]	; (bcc <ADXL375_ISR_Handler+0x10c>)
     b4a:	4e21      	ldr	r6, [pc, #132]	; (bd0 <ADXL375_ISR_Handler+0x110>)
     b4c:	8828      	ldrh	r0, [r5, #0]
     b4e:	1c43      	adds	r3, r0, #1
     b50:	802b      	strh	r3, [r5, #0]
     b52:	b200      	sxth	r0, r0
     b54:	19c0      	adds	r0, r0, r7
     b56:	2101      	movs	r1, #1
     b58:	47b0      	blx	r6
     b5a:	3c01      	subs	r4, #1
	}
	// If the source of the interrupt is from the the FIFO filling up
	if(buffer & ADXL375_INT_SRC_WATERMARK){
		// FIFO is full, read it out
		// We know that 32 points are in the FIFO since thats the size we set it to
		for(int i = 0; i < 32; i++){
     b5c:	2c00      	cmp	r4, #0
     b5e:	d1f5      	bne.n	b4c <ADXL375_ISR_Handler+0x8c>
			ADXL375_read_samples(ucAccelerometerMatrix + uiAccelerometerMatrixPtr++, 1);
		}
		// If we have taken 2 sets of samples, then stop (5.12 seconds worth of data)
		if(!(uiAccelerometerMatrixPtr % 2)) ADXL375_end_sampling();
     b60:	4b19      	ldr	r3, [pc, #100]	; (bc8 <ADXL375_ISR_Handler+0x108>)
     b62:	881b      	ldrh	r3, [r3, #0]
     b64:	07db      	lsls	r3, r3, #31
     b66:	d401      	bmi.n	b6c <ADXL375_ISR_Handler+0xac>
     b68:	4b1a      	ldr	r3, [pc, #104]	; (bd4 <ADXL375_ISR_Handler+0x114>)
     b6a:	4798      	blx	r3
	}
	// If the source of the interrupt was from inactivity
	if(buffer & ADXL375_INT_SRC_INACTIVITY){
     b6c:	466b      	mov	r3, sp
     b6e:	3303      	adds	r3, #3
     b70:	781b      	ldrb	r3, [r3, #0]
     b72:	071b      	lsls	r3, r3, #28
     b74:	d519      	bpl.n	baa <ADXL375_ISR_Handler+0xea>
		// If we are in summer mode, and we have had greater than 3 interrupts, then switch to winter mode
		// 3 Interrupts yields 12.75 minutes (255/60 is 4.25 minutes per interrupt--255 is the number of seconds to wait for inactivity)
		if(++ADXL375_inactive_interrupts >= 3){
     b76:	4a18      	ldr	r2, [pc, #96]	; (bd8 <ADXL375_ISR_Handler+0x118>)
     b78:	7813      	ldrb	r3, [r2, #0]
     b7a:	3301      	adds	r3, #1
     b7c:	b2db      	uxtb	r3, r3
     b7e:	7013      	strb	r3, [r2, #0]
     b80:	2b02      	cmp	r3, #2
     b82:	d904      	bls.n	b8e <ADXL375_ISR_Handler+0xce>
			ucCurrent_Mode = ucCurrent_Mode == SUMMER_MODE ? WINTER_MODE : SUMMER_MODE;
     b84:	4a0e      	ldr	r2, [pc, #56]	; (bc0 <ADXL375_ISR_Handler+0x100>)
     b86:	7813      	ldrb	r3, [r2, #0]
     b88:	4259      	negs	r1, r3
     b8a:	414b      	adcs	r3, r1
     b8c:	7013      	strb	r3, [r2, #0]
		}
		// If we are in winter mode already, then disable the inactivity interrupt
		if(ucCurrent_Mode == WINTER_MODE){
     b8e:	4b0c      	ldr	r3, [pc, #48]	; (bc0 <ADXL375_ISR_Handler+0x100>)
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	2b01      	cmp	r3, #1
     b94:	d109      	bne.n	baa <ADXL375_ISR_Handler+0xea>
			ADXL375_disable_interrupt(ADXL375_INT_EN_INACTIVITY);
     b96:	2008      	movs	r0, #8
     b98:	4b10      	ldr	r3, [pc, #64]	; (bdc <ADXL375_ISR_Handler+0x11c>)
     b9a:	4798      	blx	r3
     b9c:	e005      	b.n	baa <ADXL375_ISR_Handler+0xea>
		ucCurrent_Mode = ucCurrent_Mode == WINTER_MODE ? SUMMER_MODE : WINTER_MODE;
		// Movement interrupt triggered, enter 12.5 Hz sampling mode
		ADXL375_begin_sampling();		
	}
	// If the source of the interrupt is from the the FIFO filling up
	if(buffer & ADXL375_INT_SRC_WATERMARK){
     b9e:	466b      	mov	r3, sp
     ba0:	3303      	adds	r3, #3
     ba2:	781b      	ldrb	r3, [r3, #0]
     ba4:	079b      	lsls	r3, r3, #30
     ba6:	d4cd      	bmi.n	b44 <ADXL375_ISR_Handler+0x84>
     ba8:	e7e0      	b.n	b6c <ADXL375_ISR_Handler+0xac>
		// If we are in winter mode already, then disable the inactivity interrupt
		if(ucCurrent_Mode == WINTER_MODE){
			ADXL375_disable_interrupt(ADXL375_INT_EN_INACTIVITY);
		}
	}
}
     baa:	b005      	add	sp, #20
     bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	20000d5c 	.word	0x20000d5c
     bb4:	00001479 	.word	0x00001479
     bb8:	20000ddc 	.word	0x20000ddc
     bbc:	00001465 	.word	0x00001465
     bc0:	20000db8 	.word	0x20000db8
     bc4:	000004b5 	.word	0x000004b5
     bc8:	20000ccc 	.word	0x20000ccc
     bcc:	200000cc 	.word	0x200000cc
     bd0:	000009f1 	.word	0x000009f1
     bd4:	00000549 	.word	0x00000549
     bd8:	20000cdd 	.word	0x20000cdd
     bdc:	000001ad 	.word	0x000001ad

00000be0 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     be0:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     be2:	4b0c      	ldr	r3, [pc, #48]	; (c14 <EVSYS_Handler+0x34>)
     be4:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     be6:	2186      	movs	r1, #134	; 0x86
     be8:	05c9      	lsls	r1, r1, #23
     bea:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     bec:	6898      	ldr	r0, [r3, #8]
     bee:	4302      	orrs	r2, r0
     bf0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     bf2:	4b09      	ldr	r3, [pc, #36]	; (c18 <EVSYS_Handler+0x38>)
     bf4:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     bf6:	2c00      	cmp	r4, #0
     bf8:	d005      	beq.n	c06 <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     bfa:	6820      	ldr	r0, [r4, #0]
     bfc:	6863      	ldr	r3, [r4, #4]
     bfe:	4798      	blx	r3
		current_hook = current_hook->next;
     c00:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
     c02:	2c00      	cmp	r4, #0
     c04:	d1f9      	bne.n	bfa <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     c06:	4b03      	ldr	r3, [pc, #12]	; (c14 <EVSYS_Handler+0x34>)
     c08:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     c0a:	689a      	ldr	r2, [r3, #8]
     c0c:	438a      	bics	r2, r1
     c0e:	609a      	str	r2, [r3, #8]
}
     c10:	bd10      	pop	{r4, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	20000000 	.word	0x20000000
     c18:	0fff0fff 	.word	0x0fff0fff

00000c1c <_system_events_init>:

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     c1c:	4906      	ldr	r1, [pc, #24]	; (c38 <_system_events_init+0x1c>)
     c1e:	6a0b      	ldr	r3, [r1, #32]
     c20:	2201      	movs	r2, #1
     c22:	4313      	orrs	r3, r2
     c24:	620b      	str	r3, [r1, #32]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     c26:	2386      	movs	r3, #134	; 0x86
     c28:	05db      	lsls	r3, r3, #23
     c2a:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     c2c:	1c19      	adds	r1, r3, #0
     c2e:	780b      	ldrb	r3, [r1, #0]
     c30:	4213      	tst	r3, r2
     c32:	d1fc      	bne.n	c2e <_system_events_init+0x12>
	}
}
     c34:	4770      	bx	lr
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	40000400 	.word	0x40000400

00000c3c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     c3c:	4a06      	ldr	r2, [pc, #24]	; (c58 <_extint_enable+0x1c>)
     c3e:	7811      	ldrb	r1, [r2, #0]
     c40:	2302      	movs	r3, #2
     c42:	430b      	orrs	r3, r1
     c44:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     c46:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c48:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     c4a:	6853      	ldr	r3, [r2, #4]
     c4c:	4219      	tst	r1, r3
     c4e:	d1fc      	bne.n	c4a <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c50:	6853      	ldr	r3, [r2, #4]
     c52:	4218      	tst	r0, r3
     c54:	d1f9      	bne.n	c4a <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     c56:	4770      	bx	lr
     c58:	40002400 	.word	0x40002400

00000c5c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     c5c:	b500      	push	{lr}
     c5e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     c60:	4a18      	ldr	r2, [pc, #96]	; (cc4 <_system_extint_init+0x68>)
     c62:	6953      	ldr	r3, [r2, #20]
     c64:	2180      	movs	r1, #128	; 0x80
     c66:	0089      	lsls	r1, r1, #2
     c68:	430b      	orrs	r3, r1
     c6a:	6153      	str	r3, [r2, #20]

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     c6c:	a901      	add	r1, sp, #4
     c6e:	2302      	movs	r3, #2
     c70:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     c72:	2003      	movs	r0, #3
     c74:	4b14      	ldr	r3, [pc, #80]	; (cc8 <_system_extint_init+0x6c>)
     c76:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     c78:	2003      	movs	r0, #3
     c7a:	4b14      	ldr	r3, [pc, #80]	; (ccc <_system_extint_init+0x70>)
     c7c:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     c7e:	4a14      	ldr	r2, [pc, #80]	; (cd0 <_system_extint_init+0x74>)
     c80:	7811      	ldrb	r1, [r2, #0]
     c82:	2301      	movs	r3, #1
     c84:	430b      	orrs	r3, r1
     c86:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     c88:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c8a:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     c8c:	6853      	ldr	r3, [r2, #4]
     c8e:	4219      	tst	r1, r3
     c90:	d1fc      	bne.n	c8c <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c92:	6853      	ldr	r3, [r2, #4]
     c94:	4218      	tst	r0, r3
     c96:	d009      	beq.n	cac <_system_extint_init+0x50>
     c98:	e7f8      	b.n	c8c <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     c9a:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c9c:	428b      	cmp	r3, r1
     c9e:	d1fc      	bne.n	c9a <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ca0:	2208      	movs	r2, #8
     ca2:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <_system_extint_init+0x78>)
     ca4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     ca6:	4b0c      	ldr	r3, [pc, #48]	; (cd8 <_system_extint_init+0x7c>)
     ca8:	4798      	blx	r3
     caa:	e009      	b.n	cc0 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     cac:	4a08      	ldr	r2, [pc, #32]	; (cd0 <_system_extint_init+0x74>)
     cae:	7813      	ldrb	r3, [r2, #0]
     cb0:	2110      	movs	r1, #16
     cb2:	438b      	bics	r3, r1
     cb4:	7013      	strb	r3, [r2, #0]
     cb6:	4b09      	ldr	r3, [pc, #36]	; (cdc <_system_extint_init+0x80>)
     cb8:	1c19      	adds	r1, r3, #0
     cba:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     cbc:	2200      	movs	r2, #0
     cbe:	e7ec      	b.n	c9a <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     cc0:	b003      	add	sp, #12
     cc2:	bd00      	pop	{pc}
     cc4:	40000400 	.word	0x40000400
     cc8:	00003b75 	.word	0x00003b75
     ccc:	00003b0d 	.word	0x00003b0d
     cd0:	40002400 	.word	0x40002400
     cd4:	e000e100 	.word	0xe000e100
     cd8:	00000c3d 	.word	0x00000c3d
     cdc:	20000e70 	.word	0x20000e70

00000ce0 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ce0:	6802      	ldr	r2, [r0, #0]
     ce2:	2104      	movs	r1, #4
     ce4:	4b07      	ldr	r3, [pc, #28]	; (d04 <rtc_calendar_enable+0x24>)
     ce6:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ce8:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     cea:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     cec:	2b00      	cmp	r3, #0
     cee:	d1fc      	bne.n	cea <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
     cf0:	8811      	ldrh	r1, [r2, #0]
     cf2:	3302      	adds	r3, #2
     cf4:	430b      	orrs	r3, r1
     cf6:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     cf8:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     cfa:	6913      	ldr	r3, [r2, #16]
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     cfc:	2b00      	cmp	r3, #0
     cfe:	d1fc      	bne.n	cfa <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
     d00:	4770      	bx	lr
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	e000e100 	.word	0xe000e100

00000d08 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     d08:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d0a:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d0c:	2404      	movs	r4, #4
     d0e:	2380      	movs	r3, #128	; 0x80
     d10:	4907      	ldr	r1, [pc, #28]	; (d30 <rtc_calendar_disable+0x28>)
     d12:	50cc      	str	r4, [r1, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d14:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     d16:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     d18:	2b00      	cmp	r3, #0
     d1a:	d1fc      	bne.n	d16 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
     d1c:	8813      	ldrh	r3, [r2, #0]
     d1e:	2102      	movs	r1, #2
     d20:	438b      	bics	r3, r1
     d22:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d24:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     d26:	6913      	ldr	r3, [r2, #16]
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     d28:	2b00      	cmp	r3, #0
     d2a:	d1fc      	bne.n	d26 <rtc_calendar_disable+0x1e>
		/* Wait for synchronization */
	}
}
     d2c:	bd10      	pop	{r4, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	e000e100 	.word	0xe000e100

00000d34 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     d34:	b538      	push	{r3, r4, r5, lr}
     d36:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d38:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <rtc_calendar_reset+0x2c>)
     d3c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     d3e:	2300      	movs	r3, #0
     d40:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
     d42:	8663      	strh	r3, [r4, #50]	; 0x32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d44:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     d46:	6913      	ldr	r3, [r2, #16]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     d48:	2b00      	cmp	r3, #0
     d4a:	d1fc      	bne.n	d46 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
     d4c:	882a      	ldrh	r2, [r5, #0]
     d4e:	3301      	adds	r3, #1
     d50:	4313      	orrs	r3, r2
     d52:	802b      	strh	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d54:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     d56:	6913      	ldr	r3, [r2, #16]
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;

	while (rtc_calendar_is_syncing(module)) {
     d58:	2b00      	cmp	r3, #0
     d5a:	d1fc      	bne.n	d56 <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
     d5c:	bd38      	pop	{r3, r4, r5, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	00000d09 	.word	0x00000d09

00000d64 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     d64:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     d66:	88cb      	ldrh	r3, [r1, #6]
     d68:	88c2      	ldrh	r2, [r0, #6]
     d6a:	1a9b      	subs	r3, r3, r2
     d6c:	069a      	lsls	r2, r3, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     d6e:	790b      	ldrb	r3, [r1, #4]
     d70:	045c      	lsls	r4, r3, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     d72:	794b      	ldrb	r3, [r1, #5]
     d74:	059b      	lsls	r3, r3, #22
     d76:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     d78:	788c      	ldrb	r4, [r1, #2]
     d7a:	0324      	lsls	r4, r4, #12
     d7c:	4323      	orrs	r3, r4
     d7e:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     d80:	7902      	ldrb	r2, [r0, #4]
     d82:	2a00      	cmp	r2, #0
     d84:	d105      	bne.n	d92 <rtc_calendar_time_to_register_value+0x2e>
     d86:	78ca      	ldrb	r2, [r1, #3]
     d88:	2a00      	cmp	r2, #0
     d8a:	d002      	beq.n	d92 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
     d8c:	2280      	movs	r2, #128	; 0x80
     d8e:	0252      	lsls	r2, r2, #9
     d90:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     d92:	7848      	ldrb	r0, [r1, #1]
     d94:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     d96:	780a      	ldrb	r2, [r1, #0]
     d98:	4310      	orrs	r0, r2
     d9a:	4318      	orrs	r0, r3

	return register_value;
}
     d9c:	bd10      	pop	{r4, pc}
     d9e:	46c0      	nop			; (mov r8, r8)

00000da0 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     da0:	b538      	push	{r3, r4, r5, lr}
     da2:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     da4:	6805      	ldr	r5, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     da6:	4b05      	ldr	r3, [pc, #20]	; (dbc <rtc_calendar_set_time+0x1c>)
     da8:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     daa:	692b      	ldr	r3, [r5, #16]

	Rtc *const rtc_module = module->hw;

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);

	while (rtc_calendar_is_syncing(module)) {
     dac:	2b00      	cmp	r3, #0
     dae:	d1fc      	bne.n	daa <rtc_calendar_set_time+0xa>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     db0:	61a8      	str	r0, [r5, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     db2:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     db4:	6913      	ldr	r3, [r2, #16]
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
     db6:	2b00      	cmp	r3, #0
     db8:	d1fc      	bne.n	db4 <rtc_calendar_set_time+0x14>
		/* Wait for synchronization */
	}
}
     dba:	bd38      	pop	{r3, r4, r5, pc}
     dbc:	00000d65 	.word	0x00000d65

00000dc0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     dc2:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     dc4:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     dc6:	2a01      	cmp	r2, #1
     dc8:	d815      	bhi.n	df6 <rtc_calendar_set_alarm+0x36>
     dca:	1c14      	adds	r4, r2, #0
     dcc:	1c0d      	adds	r5, r1, #0
     dce:	1c07      	adds	r7, r0, #0
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     dd0:	4b0a      	ldr	r3, [pc, #40]	; (dfc <rtc_calendar_set_alarm+0x3c>)
     dd2:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     dd4:	6933      	ldr	r3, [r6, #16]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
     dd6:	2b00      	cmp	r3, #0
     dd8:	d1fc      	bne.n	dd4 <rtc_calendar_set_alarm+0x14>
     dda:	00e2      	lsls	r2, r4, #3
     ddc:	18b2      	adds	r2, r6, r2
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     dde:	6210      	str	r0, [r2, #32]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     de0:	6839      	ldr	r1, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     de2:	690b      	ldr	r3, [r1, #16]
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
     de4:	2b00      	cmp	r3, #0
     de6:	d1fc      	bne.n	de2 <rtc_calendar_set_alarm+0x22>
			/* Wait for synchronization */
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     de8:	7a29      	ldrb	r1, [r5, #8]
     dea:	3324      	adds	r3, #36	; 0x24
     dec:	54d1      	strb	r1, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     dee:	683a      	ldr	r2, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     df0:	6913      	ldr	r3, [r2, #16]
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	while (rtc_calendar_is_syncing(module)) {
     df2:	2b00      	cmp	r3, #0
     df4:	d1fc      	bne.n	df0 <rtc_calendar_set_alarm+0x30>
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
     df6:	1c18      	adds	r0, r3, #0
     df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	00000d65 	.word	0x00000d65

00000e00 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	1c05      	adds	r5, r0, #0
     e04:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     e06:	6001      	str	r1, [r0, #0]
     e08:	4a13      	ldr	r2, [pc, #76]	; (e58 <rtc_calendar_init+0x58>)
     e0a:	6953      	ldr	r3, [r2, #20]
     e0c:	2180      	movs	r1, #128	; 0x80
     e0e:	0049      	lsls	r1, r1, #1
     e10:	430b      	orrs	r3, r1
     e12:	6153      	str	r3, [r2, #20]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     e14:	2200      	movs	r2, #0
     e16:	4b11      	ldr	r3, [pc, #68]	; (e5c <rtc_calendar_init+0x5c>)
     e18:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
     e1a:	4b11      	ldr	r3, [pc, #68]	; (e60 <rtc_calendar_init+0x60>)
     e1c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
     e1e:	78e3      	ldrb	r3, [r4, #3]
     e20:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
     e22:	88a3      	ldrh	r3, [r4, #4]
     e24:	80eb      	strh	r3, [r5, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     e26:	4b0f      	ldr	r3, [pc, #60]	; (e64 <rtc_calendar_init+0x64>)
     e28:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e2a:	682a      	ldr	r2, [r5, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     e2c:	8823      	ldrh	r3, [r4, #0]
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
	}
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
     e2e:	78e1      	ldrb	r1, [r4, #3]
     e30:	2900      	cmp	r1, #0
     e32:	d002      	beq.n	e3a <rtc_calendar_init+0x3a>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     e34:	2108      	movs	r1, #8
     e36:	430b      	orrs	r3, r1
     e38:	e001      	b.n	e3e <rtc_calendar_init+0x3e>
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
     e3a:	2148      	movs	r1, #72	; 0x48
     e3c:	430b      	orrs	r3, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
     e3e:	78a1      	ldrb	r1, [r4, #2]
     e40:	2900      	cmp	r1, #0
     e42:	d001      	beq.n	e48 <rtc_calendar_init+0x48>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
     e44:	2180      	movs	r1, #128	; 0x80
     e46:	430b      	orrs	r3, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
     e48:	8013      	strh	r3, [r2, #0]

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     e4a:	1da1      	adds	r1, r4, #6
     e4c:	1c28      	adds	r0, r5, #0
     e4e:	2200      	movs	r2, #0
     e50:	4b05      	ldr	r3, [pc, #20]	; (e68 <rtc_calendar_init+0x68>)
     e52:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
     e54:	bd38      	pop	{r3, r4, r5, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	40000400 	.word	0x40000400
     e5c:	40001000 	.word	0x40001000
     e60:	00000d35 	.word	0x00000d35
     e64:	20000eb0 	.word	0x20000eb0
     e68:	00000dc1 	.word	0x00000dc1

00000e6c <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
     e6c:	2a09      	cmp	r2, #9
     e6e:	d901      	bls.n	e74 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     e70:	2017      	movs	r0, #23
     e72:	e00a      	b.n	e8a <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     e74:	1c93      	adds	r3, r2, #2
     e76:	009b      	lsls	r3, r3, #2
     e78:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     e7a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
     e7c:	2301      	movs	r3, #1
     e7e:	4093      	lsls	r3, r2
     e80:	1c1a      	adds	r2, r3, #0
     e82:	430a      	orrs	r2, r1
     e84:	b292      	uxth	r2, r2
     e86:	8602      	strh	r2, [r0, #48]	; 0x30
     e88:	2000      	movs	r0, #0
	}

	return status;
}
     e8a:	4770      	bx	lr

00000e8c <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     e8c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     e8e:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     e90:	2909      	cmp	r1, #9
     e92:	d102      	bne.n	e9a <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     e94:	4a0e      	ldr	r2, [pc, #56]	; (ed0 <rtc_calendar_enable_callback+0x44>)
     e96:	815a      	strh	r2, [r3, #10]
     e98:	e011      	b.n	ebe <rtc_calendar_enable_callback+0x32>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
     e9a:	2907      	cmp	r1, #7
     e9c:	d805      	bhi.n	eaa <rtc_calendar_enable_callback+0x1e>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
     e9e:	2201      	movs	r2, #1
     ea0:	408a      	lsls	r2, r1
     ea2:	24ff      	movs	r4, #255	; 0xff
     ea4:	4022      	ands	r2, r4
     ea6:	815a      	strh	r2, [r3, #10]
     ea8:	e009      	b.n	ebe <rtc_calendar_enable_callback+0x32>
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	0052      	lsls	r2, r2, #1
     eae:	1c0c      	adds	r4, r1, #0
     eb0:	3c08      	subs	r4, #8
     eb2:	40a2      	lsls	r2, r4
     eb4:	1c14      	adds	r4, r2, #0
     eb6:	2280      	movs	r2, #128	; 0x80
     eb8:	0052      	lsls	r2, r2, #1
     eba:	4022      	ands	r2, r4
     ebc:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     ebe:	8e42      	ldrh	r2, [r0, #50]	; 0x32
     ec0:	2301      	movs	r3, #1
     ec2:	408b      	lsls	r3, r1
     ec4:	1c19      	adds	r1, r3, #0
     ec6:	4311      	orrs	r1, r2
     ec8:	b289      	uxth	r1, r1
     eca:	8641      	strh	r1, [r0, #50]	; 0x32
}
     ecc:	bd10      	pop	{r4, pc}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	ffff8000 	.word	0xffff8000

00000ed4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ed6:	465f      	mov	r7, fp
     ed8:	4656      	mov	r6, sl
     eda:	464d      	mov	r5, r9
     edc:	4644      	mov	r4, r8
     ede:	b4f0      	push	{r4, r5, r6, r7}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     ee0:	4b23      	ldr	r3, [pc, #140]	; (f70 <RTC_Handler+0x9c>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	469a      	mov	sl, r3

	Rtc *const rtc_module = module->hw;
     ee6:	681e      	ldr	r6, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     eea:	4652      	mov	r2, sl
     eec:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     eee:	401a      	ands	r2, r3
     ef0:	4690      	mov	r8, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     ef2:	89b3      	ldrh	r3, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     ef4:	8972      	ldrh	r2, [r6, #10]
     ef6:	4013      	ands	r3, r2

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     ef8:	b21a      	sxth	r2, r3
     efa:	2a00      	cmp	r2, #0
     efc:	da08      	bge.n	f10 <RTC_Handler+0x3c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     efe:	4643      	mov	r3, r8
     f00:	059b      	lsls	r3, r3, #22
     f02:	d502      	bpl.n	f0a <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     f04:	4653      	mov	r3, sl
     f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f08:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     f0a:	4b1a      	ldr	r3, [pc, #104]	; (f74 <RTC_Handler+0xa0>)
     f0c:	81b3      	strh	r3, [r6, #12]
     f0e:	e028      	b.n	f62 <RTC_Handler+0x8e>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     f10:	27ff      	movs	r7, #255	; 0xff
     f12:	401f      	ands	r7, r3
     f14:	d01a      	beq.n	f4c <RTC_Handler+0x78>
     f16:	2400      	movs	r4, #0
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     f18:	2301      	movs	r3, #1
     f1a:	4699      	mov	r9, r3
			  && (callback_mask & (1 << i))) {
				module->callbacks[i]();
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     f1c:	33fe      	adds	r3, #254	; 0xfe
     f1e:	469b      	mov	fp, r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     f20:	1c23      	adds	r3, r4, #0
     f22:	464d      	mov	r5, r9
     f24:	40a5      	lsls	r5, r4
     f26:	422f      	tst	r7, r5
     f28:	d009      	beq.n	f3e <RTC_Handler+0x6a>
			  && (callback_mask & (1 << i))) {
     f2a:	4642      	mov	r2, r8
     f2c:	4122      	asrs	r2, r4
     f2e:	4649      	mov	r1, r9
     f30:	4211      	tst	r1, r2
     f32:	d004      	beq.n	f3e <RTC_Handler+0x6a>
				module->callbacks[i]();
     f34:	3302      	adds	r3, #2
     f36:	009b      	lsls	r3, r3, #2
     f38:	4652      	mov	r2, sl
     f3a:	589b      	ldr	r3, [r3, r2]
     f3c:	4798      	blx	r3
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     f3e:	465b      	mov	r3, fp
     f40:	401d      	ands	r5, r3
     f42:	81b5      	strh	r5, [r6, #12]
     f44:	3401      	adds	r4, #1
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
     f46:	2c08      	cmp	r4, #8
     f48:	d1ea      	bne.n	f20 <RTC_Handler+0x4c>
     f4a:	e00a      	b.n	f62 <RTC_Handler+0x8e>
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
		}
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     f4c:	05db      	lsls	r3, r3, #23
     f4e:	d508      	bpl.n	f62 <RTC_Handler+0x8e>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     f50:	4643      	mov	r3, r8
     f52:	05db      	lsls	r3, r3, #23
     f54:	d502      	bpl.n	f5c <RTC_Handler+0x88>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     f56:	4653      	mov	r3, sl
     f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f5a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     f5c:	2380      	movs	r3, #128	; 0x80
     f5e:	005b      	lsls	r3, r3, #1
     f60:	81b3      	strh	r3, [r6, #12]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     f62:	bc3c      	pop	{r2, r3, r4, r5}
     f64:	4690      	mov	r8, r2
     f66:	4699      	mov	r9, r3
     f68:	46a2      	mov	sl, r4
     f6a:	46ab      	mov	fp, r5
     f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	20000eb0 	.word	0x20000eb0
     f74:	ffff8000 	.word	0xffff8000

00000f78 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     f78:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     f7a:	2207      	movs	r2, #7
     f7c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     f7e:	421a      	tst	r2, r3
     f80:	d1fc      	bne.n	f7c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     f82:	4770      	bx	lr

00000f84 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     f84:	b5f0      	push	{r4, r5, r6, r7, lr}
     f86:	464f      	mov	r7, r9
     f88:	4646      	mov	r6, r8
     f8a:	b4c0      	push	{r6, r7}
     f8c:	b083      	sub	sp, #12
     f8e:	1c07      	adds	r7, r0, #0
     f90:	1c0d      	adds	r5, r1, #0
     f92:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     f94:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f96:	1c08      	adds	r0, r1, #0
     f98:	4b6b      	ldr	r3, [pc, #428]	; (1148 <i2c_master_init+0x1c4>)
     f9a:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21)
	if (sercom_index == 5) {
     f9c:	2805      	cmp	r0, #5
     f9e:	d100      	bne.n	fa2 <i2c_master_init+0x1e>
     fa0:	e0ba      	b.n	1118 <i2c_master_init+0x194>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fa2:	1c04      	adds	r4, r0, #0
     fa4:	3412      	adds	r4, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     fa6:	4969      	ldr	r1, [pc, #420]	; (114c <i2c_master_init+0x1c8>)
     fa8:	69cb      	ldr	r3, [r1, #28]
	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     faa:	2201      	movs	r2, #1
     fac:	4082      	lsls	r2, r0
     fae:	1c10      	adds	r0, r2, #0
     fb0:	4318      	orrs	r0, r3
     fb2:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     fb4:	a901      	add	r1, sp, #4
     fb6:	7b33      	ldrb	r3, [r6, #12]
     fb8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     fba:	b2e4      	uxtb	r4, r4
     fbc:	1c20      	adds	r0, r4, #0
     fbe:	4b64      	ldr	r3, [pc, #400]	; (1150 <i2c_master_init+0x1cc>)
     fc0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     fc2:	1c20      	adds	r0, r4, #0
     fc4:	4b63      	ldr	r3, [pc, #396]	; (1154 <i2c_master_init+0x1d0>)
     fc6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fc8:	7b30      	ldrb	r0, [r6, #12]
     fca:	2100      	movs	r1, #0
     fcc:	4b62      	ldr	r3, [pc, #392]	; (1158 <i2c_master_init+0x1d4>)
     fce:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     fd0:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     fd2:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     fd4:	079b      	lsls	r3, r3, #30
     fd6:	d500      	bpl.n	fda <i2c_master_init+0x56>
     fd8:	e0b0      	b.n	113c <i2c_master_init+0x1b8>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     fda:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     fdc:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     fde:	07db      	lsls	r3, r3, #31
     fe0:	d500      	bpl.n	fe4 <i2c_master_init+0x60>
     fe2:	e0ab      	b.n	113c <i2c_master_init+0x1b8>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     fe4:	2314      	movs	r3, #20
     fe6:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fe8:	683d      	ldr	r5, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     fea:	1c28      	adds	r0, r5, #0
     fec:	4b56      	ldr	r3, [pc, #344]	; (1148 <i2c_master_init+0x1c4>)
     fee:	4798      	blx	r3
     ff0:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ff2:	2380      	movs	r3, #128	; 0x80
     ff4:	466a      	mov	r2, sp
     ff6:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ff8:	2300      	movs	r3, #0
     ffa:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ffc:	2201      	movs	r2, #1
     ffe:	4669      	mov	r1, sp
    1000:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    1002:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    1004:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1006:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1008:	2800      	cmp	r0, #0
    100a:	d103      	bne.n	1014 <i2c_master_init+0x90>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    100c:	1c28      	adds	r0, r5, #0
    100e:	2100      	movs	r1, #0
    1010:	4b52      	ldr	r3, [pc, #328]	; (115c <i2c_master_init+0x1d8>)
    1012:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1014:	466b      	mov	r3, sp
    1016:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1018:	2302      	movs	r3, #2
    101a:	466a      	mov	r2, sp
    101c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    101e:	0c00      	lsrs	r0, r0, #16
    1020:	b2c0      	uxtb	r0, r0
    1022:	4669      	mov	r1, sp
    1024:	4b4e      	ldr	r3, [pc, #312]	; (1160 <i2c_master_init+0x1dc>)
    1026:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1028:	2c00      	cmp	r4, #0
    102a:	d104      	bne.n	1036 <i2c_master_init+0xb2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    102c:	1c28      	adds	r0, r5, #0
    102e:	2101      	movs	r1, #1
    1030:	4b4a      	ldr	r3, [pc, #296]	; (115c <i2c_master_init+0x1d8>)
    1032:	4798      	blx	r3
    1034:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    1036:	466b      	mov	r3, sp
    1038:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    103a:	2302      	movs	r3, #2
    103c:	466a      	mov	r2, sp
    103e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1040:	0c24      	lsrs	r4, r4, #16
    1042:	b2e0      	uxtb	r0, r4
    1044:	4669      	mov	r1, sp
    1046:	4b46      	ldr	r3, [pc, #280]	; (1160 <i2c_master_init+0x1dc>)
    1048:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    104a:	8ab3      	ldrh	r3, [r6, #20]
    104c:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    104e:	8af3      	ldrh	r3, [r6, #22]
    1050:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1052:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1054:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1056:	2a00      	cmp	r2, #0
    1058:	d104      	bne.n	1064 <i2c_master_init+0xe0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    105a:	4b42      	ldr	r3, [pc, #264]	; (1164 <i2c_master_init+0x1e0>)
    105c:	789b      	ldrb	r3, [r3, #2]
    105e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1060:	0fdb      	lsrs	r3, r3, #31
    1062:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1064:	6932      	ldr	r2, [r6, #16]
    1066:	2a00      	cmp	r2, #0
    1068:	d000      	beq.n	106c <i2c_master_init+0xe8>
		tmp_ctrla |= config->start_hold_time;
    106a:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    106c:	68b2      	ldr	r2, [r6, #8]
    106e:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1070:	2224      	movs	r2, #36	; 0x24
    1072:	5cb2      	ldrb	r2, [r6, r2]
    1074:	2a00      	cmp	r2, #0
    1076:	d002      	beq.n	107e <i2c_master_init+0xfa>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1078:	2280      	movs	r2, #128	; 0x80
    107a:	05d2      	lsls	r2, r2, #23
    107c:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    107e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1080:	2a00      	cmp	r2, #0
    1082:	d000      	beq.n	1086 <i2c_master_init+0x102>
		tmp_ctrla |= config->inactive_timeout;
    1084:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
    1086:	222c      	movs	r2, #44	; 0x2c
    1088:	5cb2      	ldrb	r2, [r6, r2]
    108a:	2a00      	cmp	r2, #0
    108c:	d002      	beq.n	1094 <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    108e:	2280      	movs	r2, #128	; 0x80
    1090:	0512      	lsls	r2, r2, #20
    1092:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1094:	222d      	movs	r2, #45	; 0x2d
    1096:	5cb2      	ldrb	r2, [r6, r2]
    1098:	2a00      	cmp	r2, #0
    109a:	d002      	beq.n	10a2 <i2c_master_init+0x11e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    109c:	2280      	movs	r2, #128	; 0x80
    109e:	0412      	lsls	r2, r2, #16
    10a0:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    10a2:	222e      	movs	r2, #46	; 0x2e
    10a4:	5cb2      	ldrb	r2, [r6, r2]
    10a6:	2a00      	cmp	r2, #0
    10a8:	d002      	beq.n	10b0 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    10aa:	2280      	movs	r2, #128	; 0x80
    10ac:	03d2      	lsls	r2, r2, #15
    10ae:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    10b0:	682a      	ldr	r2, [r5, #0]
    10b2:	4313      	orrs	r3, r2
    10b4:	602b      	str	r3, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    10b6:	2380      	movs	r3, #128	; 0x80
    10b8:	005b      	lsls	r3, r3, #1
    10ba:	606b      	str	r3, [r5, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    10bc:	4647      	mov	r7, r8
    10be:	3712      	adds	r7, #18
    10c0:	b2fb      	uxtb	r3, r7
    10c2:	4698      	mov	r8, r3
    10c4:	1c18      	adds	r0, r3, #0
    10c6:	4b28      	ldr	r3, [pc, #160]	; (1168 <i2c_master_init+0x1e4>)
    10c8:	4798      	blx	r3
    10ca:	1c04      	adds	r4, r0, #0
	uint32_t fscl        = 1000*config->baud_rate;
    10cc:	20fa      	movs	r0, #250	; 0xfa
    10ce:	0080      	lsls	r0, r0, #2
    10d0:	6833      	ldr	r3, [r6, #0]
    10d2:	4343      	muls	r3, r0
    10d4:	4699      	mov	r9, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
	int32_t  denominator = 2*fscl;
    10d6:	005f      	lsls	r7, r3, #1
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
    10d8:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
    10da:	4360      	muls	r0, r4
    10dc:	4923      	ldr	r1, [pc, #140]	; (116c <i2c_master_init+0x1e8>)
    10de:	4b24      	ldr	r3, [pc, #144]	; (1170 <i2c_master_init+0x1ec>)
    10e0:	4798      	blx	r3
    10e2:	300a      	adds	r0, #10
    10e4:	464b      	mov	r3, r9
    10e6:	4358      	muls	r0, r3
    10e8:	1a20      	subs	r0, r4, r0
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
    10ea:	19c0      	adds	r0, r0, r7
    10ec:	3801      	subs	r0, #1
    10ee:	1c39      	adds	r1, r7, #0
    10f0:	4b20      	ldr	r3, [pc, #128]	; (1174 <i2c_master_init+0x1f0>)
    10f2:	4798      	blx	r3
    10f4:	1e04      	subs	r4, r0, #0

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
    10f6:	2cff      	cmp	r4, #255	; 0xff
    10f8:	d81f      	bhi.n	113a <i2c_master_init+0x1b6>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
    10fa:	4640      	mov	r0, r8
    10fc:	4b1a      	ldr	r3, [pc, #104]	; (1168 <i2c_master_init+0x1e4>)
    10fe:	4798      	blx	r3
    1100:	6871      	ldr	r1, [r6, #4]
    1102:	23fa      	movs	r3, #250	; 0xfa
    1104:	00db      	lsls	r3, r3, #3
    1106:	4359      	muls	r1, r3
    1108:	1e4b      	subs	r3, r1, #1
    110a:	1818      	adds	r0, r3, r0
    110c:	4b18      	ldr	r3, [pc, #96]	; (1170 <i2c_master_init+0x1ec>)
    110e:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
    1110:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1112:	28ff      	cmp	r0, #255	; 0xff
    1114:	d811      	bhi.n	113a <i2c_master_init+0x1b6>
    1116:	e006      	b.n	1126 <i2c_master_init+0x1a2>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1118:	4a0c      	ldr	r2, [pc, #48]	; (114c <i2c_master_init+0x1c8>)
    111a:	6a11      	ldr	r1, [r2, #32]
    111c:	2302      	movs	r3, #2
    111e:	430b      	orrs	r3, r1
    1120:	6213      	str	r3, [r2, #32]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1122:	2418      	movs	r4, #24
    1124:	e746      	b.n	fb4 <i2c_master_init+0x30>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    1126:	0400      	lsls	r0, r0, #16
    1128:	23ff      	movs	r3, #255	; 0xff
    112a:	041b      	lsls	r3, r3, #16
    112c:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    112e:	23ff      	movs	r3, #255	; 0xff
    1130:	401c      	ands	r4, r3
    1132:	4304      	orrs	r4, r0
    1134:	60ec      	str	r4, [r5, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
    1136:	2000      	movs	r0, #0
    1138:	e000      	b.n	113c <i2c_master_init+0x1b8>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    113a:	2040      	movs	r0, #64	; 0x40
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    113c:	b003      	add	sp, #12
    113e:	bc0c      	pop	{r2, r3}
    1140:	4690      	mov	r8, r2
    1142:	4699      	mov	r9, r3
    1144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	000033a1 	.word	0x000033a1
    114c:	40000400 	.word	0x40000400
    1150:	00003b75 	.word	0x00003b75
    1154:	00003b0d 	.word	0x00003b0d
    1158:	000031e9 	.word	0x000031e9
    115c:	00003235 	.word	0x00003235
    1160:	00003c71 	.word	0x00003c71
    1164:	41002000 	.word	0x41002000
    1168:	00003b99 	.word	0x00003b99
    116c:	3b9aca00 	.word	0x3b9aca00
    1170:	00003e61 	.word	0x00003e61
    1174:	00003f81 	.word	0x00003f81

00001178 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1178:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    117a:	7e1a      	ldrb	r2, [r3, #24]
    117c:	0792      	lsls	r2, r2, #30
    117e:	d507      	bpl.n	1190 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1180:	2202      	movs	r2, #2
    1182:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1184:	8b5b      	ldrh	r3, [r3, #26]
    1186:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1188:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    118a:	17db      	asrs	r3, r3, #31
    118c:	4018      	ands	r0, r3
    118e:	e00a      	b.n	11a6 <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1190:	8b5a      	ldrh	r2, [r3, #26]
    1192:	0752      	lsls	r2, r2, #29
    1194:	d506      	bpl.n	11a4 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1196:	685a      	ldr	r2, [r3, #4]
    1198:	21c0      	movs	r1, #192	; 0xc0
    119a:	0289      	lsls	r1, r1, #10
    119c:	430a      	orrs	r2, r1
    119e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    11a0:	2018      	movs	r0, #24
    11a2:	e000      	b.n	11a6 <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
    11a4:	2000      	movs	r0, #0
}
    11a6:	4770      	bx	lr

000011a8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    11a8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11aa:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    11ac:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11ae:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    11b0:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11b2:	e004      	b.n	11be <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    11b4:	3301      	adds	r3, #1
    11b6:	b29b      	uxth	r3, r3
    11b8:	8901      	ldrh	r1, [r0, #8]
    11ba:	4299      	cmp	r1, r3
    11bc:	d907      	bls.n	11ce <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11be:	7e11      	ldrb	r1, [r2, #24]
    11c0:	4221      	tst	r1, r4
    11c2:	d106      	bne.n	11d2 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    11c4:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    11c6:	4229      	tst	r1, r5
    11c8:	d0f4      	beq.n	11b4 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    11ca:	2000      	movs	r0, #0
    11cc:	e002      	b.n	11d4 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
    11ce:	2012      	movs	r0, #18
    11d0:	e000      	b.n	11d4 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
    11d2:	2000      	movs	r0, #0
}
    11d4:	bd30      	pop	{r4, r5, pc}
    11d6:	46c0      	nop			; (mov r8, r8)

000011d8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    11d8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11da:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    11dc:	6863      	ldr	r3, [r4, #4]
    11de:	2280      	movs	r2, #128	; 0x80
    11e0:	02d2      	lsls	r2, r2, #11
    11e2:	4313      	orrs	r3, r2
    11e4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    11e6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    11e8:	4b02      	ldr	r3, [pc, #8]	; (11f4 <_i2c_master_send_hs_master_code+0x1c>)
    11ea:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    11ec:	2301      	movs	r3, #1
    11ee:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    11f0:	bd10      	pop	{r4, pc}
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	000011a9 	.word	0x000011a9

000011f8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    11f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fa:	465f      	mov	r7, fp
    11fc:	4656      	mov	r6, sl
    11fe:	464d      	mov	r5, r9
    1200:	4644      	mov	r4, r8
    1202:	b4f0      	push	{r4, r5, r6, r7}
    1204:	b083      	sub	sp, #12
    1206:	1c06      	adds	r6, r0, #0
    1208:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    120a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    120c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    120e:	682b      	ldr	r3, [r5, #0]
    1210:	011b      	lsls	r3, r3, #4
    1212:	0fdb      	lsrs	r3, r3, #31
    1214:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1216:	7a4b      	ldrb	r3, [r1, #9]
    1218:	2b00      	cmp	r3, #0
    121a:	d002      	beq.n	1222 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    121c:	7a89      	ldrb	r1, [r1, #10]
    121e:	4b4f      	ldr	r3, [pc, #316]	; (135c <_i2c_master_read_packet+0x164>)
    1220:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1222:	686a      	ldr	r2, [r5, #4]
    1224:	4b4e      	ldr	r3, [pc, #312]	; (1360 <_i2c_master_read_packet+0x168>)
    1226:	4013      	ands	r3, r2
    1228:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    122a:	464b      	mov	r3, r9
    122c:	7a1b      	ldrb	r3, [r3, #8]
    122e:	2b00      	cmp	r3, #0
    1230:	d026      	beq.n	1280 <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1232:	464b      	mov	r3, r9
    1234:	7a5b      	ldrb	r3, [r3, #9]
    1236:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1238:	464b      	mov	r3, r9
    123a:	881b      	ldrh	r3, [r3, #0]
    123c:	005b      	lsls	r3, r3, #1
    123e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1240:	2280      	movs	r2, #128	; 0x80
    1242:	0212      	lsls	r2, r2, #8
    1244:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1246:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1248:	1c30      	adds	r0, r6, #0
    124a:	4b46      	ldr	r3, [pc, #280]	; (1364 <_i2c_master_read_packet+0x16c>)
    124c:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    124e:	686a      	ldr	r2, [r5, #4]
    1250:	4b43      	ldr	r3, [pc, #268]	; (1360 <_i2c_master_read_packet+0x168>)
    1252:	4013      	ands	r3, r2
    1254:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1256:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1258:	d178      	bne.n	134c <_i2c_master_read_packet+0x154>
			tmp_status = _i2c_master_address_response(module);
    125a:	1c30      	adds	r0, r6, #0
    125c:	4b42      	ldr	r3, [pc, #264]	; (1368 <_i2c_master_read_packet+0x170>)
    125e:	4798      	blx	r3
    1260:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
    1262:	d173      	bne.n	134c <_i2c_master_read_packet+0x154>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1264:	464b      	mov	r3, r9
    1266:	7a5b      	ldrb	r3, [r3, #9]
    1268:	039b      	lsls	r3, r3, #14
    126a:	2201      	movs	r2, #1
    126c:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    126e:	464a      	mov	r2, r9
    1270:	8812      	ldrh	r2, [r2, #0]
    1272:	0a12      	lsrs	r2, r2, #8
    1274:	2178      	movs	r1, #120	; 0x78
    1276:	430a      	orrs	r2, r1
    1278:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    127a:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    127c:	626b      	str	r3, [r5, #36]	; 0x24
    127e:	e009      	b.n	1294 <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1280:	464b      	mov	r3, r9
    1282:	881b      	ldrh	r3, [r3, #0]
    1284:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1286:	464b      	mov	r3, r9
    1288:	7a5b      	ldrb	r3, [r3, #9]
    128a:	039b      	lsls	r3, r3, #14
    128c:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    128e:	2201      	movs	r2, #1
    1290:	4313      	orrs	r3, r2
    1292:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1294:	1c30      	adds	r0, r6, #0
    1296:	4b33      	ldr	r3, [pc, #204]	; (1364 <_i2c_master_read_packet+0x16c>)
    1298:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    129a:	686a      	ldr	r2, [r5, #4]
    129c:	4b30      	ldr	r3, [pc, #192]	; (1360 <_i2c_master_read_packet+0x168>)
    129e:	4013      	ands	r3, r2
    12a0:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    12a2:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    12a4:	d152      	bne.n	134c <_i2c_master_read_packet+0x154>
		tmp_status = _i2c_master_address_response(module);
    12a6:	1c30      	adds	r0, r6, #0
    12a8:	4b2f      	ldr	r3, [pc, #188]	; (1368 <_i2c_master_read_packet+0x170>)
    12aa:	4798      	blx	r3
    12ac:	9001      	str	r0, [sp, #4]
    12ae:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    12b0:	d14c      	bne.n	134c <_i2c_master_read_packet+0x154>
    12b2:	3c01      	subs	r4, #1
    12b4:	b2a4      	uxth	r4, r4
    12b6:	2300      	movs	r3, #0
    12b8:	4698      	mov	r8, r3
		/* Read data buffer. */
		while (tmp_data_length--) {
    12ba:	4b2c      	ldr	r3, [pc, #176]	; (136c <_i2c_master_read_packet+0x174>)
    12bc:	469b      	mov	fp, r3
    12be:	e029      	b.n	1314 <_i2c_master_read_packet+0x11c>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    12c0:	8b6b      	ldrh	r3, [r5, #26]
    12c2:	069b      	lsls	r3, r3, #26
    12c4:	d541      	bpl.n	134a <_i2c_master_read_packet+0x152>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    12c6:	7af3      	ldrb	r3, [r6, #11]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d00f      	beq.n	12ec <_i2c_master_read_packet+0xf4>
    12cc:	4653      	mov	r3, sl
    12ce:	2b00      	cmp	r3, #0
    12d0:	d102      	bne.n	12d8 <_i2c_master_read_packet+0xe0>
    12d2:	2c00      	cmp	r4, #0
    12d4:	d002      	beq.n	12dc <_i2c_master_read_packet+0xe4>
    12d6:	e009      	b.n	12ec <_i2c_master_read_packet+0xf4>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    12d8:	2c01      	cmp	r4, #1
    12da:	d107      	bne.n	12ec <_i2c_master_read_packet+0xf4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    12dc:	686b      	ldr	r3, [r5, #4]
    12de:	2280      	movs	r2, #128	; 0x80
    12e0:	02d2      	lsls	r2, r2, #11
    12e2:	4313      	orrs	r3, r2
    12e4:	606b      	str	r3, [r5, #4]
    12e6:	3c01      	subs	r4, #1
    12e8:	b2a4      	uxth	r4, r4
    12ea:	e013      	b.n	1314 <_i2c_master_read_packet+0x11c>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    12ec:	1c30      	adds	r0, r6, #0
    12ee:	4b20      	ldr	r3, [pc, #128]	; (1370 <_i2c_master_read_packet+0x178>)
    12f0:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    12f2:	4643      	mov	r3, r8
    12f4:	1c5f      	adds	r7, r3, #1
    12f6:	b2bf      	uxth	r7, r7
    12f8:	2328      	movs	r3, #40	; 0x28
    12fa:	5ceb      	ldrb	r3, [r5, r3]
    12fc:	464a      	mov	r2, r9
    12fe:	6852      	ldr	r2, [r2, #4]
    1300:	4641      	mov	r1, r8
    1302:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1304:	1c30      	adds	r0, r6, #0
    1306:	4b17      	ldr	r3, [pc, #92]	; (1364 <_i2c_master_read_packet+0x16c>)
    1308:	4798      	blx	r3
    130a:	3c01      	subs	r4, #1
    130c:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    130e:	2800      	cmp	r0, #0
    1310:	d103      	bne.n	131a <_i2c_master_read_packet+0x122>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    1312:	46b8      	mov	r8, r7
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1314:	455c      	cmp	r4, fp
    1316:	d1d3      	bne.n	12c0 <_i2c_master_read_packet+0xc8>
    1318:	e001      	b.n	131e <_i2c_master_read_packet+0x126>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    131a:	46b8      	mov	r8, r7
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    131c:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
    131e:	7ab3      	ldrb	r3, [r6, #10]
    1320:	2b00      	cmp	r3, #0
    1322:	d007      	beq.n	1334 <_i2c_master_read_packet+0x13c>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1324:	1c30      	adds	r0, r6, #0
    1326:	4b12      	ldr	r3, [pc, #72]	; (1370 <_i2c_master_read_packet+0x178>)
    1328:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    132a:	686b      	ldr	r3, [r5, #4]
    132c:	22c0      	movs	r2, #192	; 0xc0
    132e:	0292      	lsls	r2, r2, #10
    1330:	4313      	orrs	r3, r2
    1332:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1334:	1c30      	adds	r0, r6, #0
    1336:	4b0e      	ldr	r3, [pc, #56]	; (1370 <_i2c_master_read_packet+0x178>)
    1338:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    133a:	2328      	movs	r3, #40	; 0x28
    133c:	5cea      	ldrb	r2, [r5, r3]
    133e:	464b      	mov	r3, r9
    1340:	685b      	ldr	r3, [r3, #4]
    1342:	4641      	mov	r1, r8
    1344:	545a      	strb	r2, [r3, r1]
    1346:	9b01      	ldr	r3, [sp, #4]
    1348:	e000      	b.n	134c <_i2c_master_read_packet+0x154>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    134a:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    134c:	1c18      	adds	r0, r3, #0
    134e:	b003      	add	sp, #12
    1350:	bc3c      	pop	{r2, r3, r4, r5}
    1352:	4690      	mov	r8, r2
    1354:	4699      	mov	r9, r3
    1356:	46a2      	mov	sl, r4
    1358:	46ab      	mov	fp, r5
    135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    135c:	000011d9 	.word	0x000011d9
    1360:	fffbffff 	.word	0xfffbffff
    1364:	000011a9 	.word	0x000011a9
    1368:	00001179 	.word	0x00001179
    136c:	0000ffff 	.word	0x0000ffff
    1370:	00000f79 	.word	0x00000f79

00001374 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1374:	b5f0      	push	{r4, r5, r6, r7, lr}
    1376:	465f      	mov	r7, fp
    1378:	4656      	mov	r6, sl
    137a:	464d      	mov	r5, r9
    137c:	4644      	mov	r4, r8
    137e:	b4f0      	push	{r4, r5, r6, r7}
    1380:	b083      	sub	sp, #12
    1382:	1c06      	adds	r6, r0, #0
    1384:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1386:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1388:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    138a:	4b31      	ldr	r3, [pc, #196]	; (1450 <_i2c_master_write_packet+0xdc>)
    138c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    138e:	7a7b      	ldrb	r3, [r7, #9]
    1390:	2b00      	cmp	r3, #0
    1392:	d003      	beq.n	139c <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1394:	7ab9      	ldrb	r1, [r7, #10]
    1396:	1c30      	adds	r0, r6, #0
    1398:	4b2e      	ldr	r3, [pc, #184]	; (1454 <_i2c_master_write_packet+0xe0>)
    139a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    139c:	686a      	ldr	r2, [r5, #4]
    139e:	4b2e      	ldr	r3, [pc, #184]	; (1458 <_i2c_master_write_packet+0xe4>)
    13a0:	4013      	ands	r3, r2
    13a2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    13a4:	7a3b      	ldrb	r3, [r7, #8]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d009      	beq.n	13be <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    13aa:	7a7b      	ldrb	r3, [r7, #9]
    13ac:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    13ae:	883b      	ldrh	r3, [r7, #0]
    13b0:	005b      	lsls	r3, r3, #1
    13b2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    13b4:	2280      	movs	r2, #128	; 0x80
    13b6:	0212      	lsls	r2, r2, #8
    13b8:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    13ba:	626b      	str	r3, [r5, #36]	; 0x24
    13bc:	e005      	b.n	13ca <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    13be:	7a7b      	ldrb	r3, [r7, #9]
    13c0:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    13c2:	883b      	ldrh	r3, [r7, #0]
    13c4:	005b      	lsls	r3, r3, #1
    13c6:	4313      	orrs	r3, r2
    13c8:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13ca:	1c30      	adds	r0, r6, #0
    13cc:	4b23      	ldr	r3, [pc, #140]	; (145c <_i2c_master_write_packet+0xe8>)
    13ce:	4798      	blx	r3
    13d0:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    13d2:	d136      	bne.n	1442 <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
    13d4:	1c30      	adds	r0, r6, #0
    13d6:	4b22      	ldr	r3, [pc, #136]	; (1460 <_i2c_master_write_packet+0xec>)
    13d8:	4798      	blx	r3
    13da:	1e03      	subs	r3, r0, #0
    13dc:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    13de:	d130      	bne.n	1442 <_i2c_master_write_packet+0xce>
    13e0:	46a0      	mov	r8, r4
    13e2:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    13e4:	3320      	adds	r3, #32
    13e6:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    13e8:	4b19      	ldr	r3, [pc, #100]	; (1450 <_i2c_master_write_packet+0xdc>)
    13ea:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    13ec:	4b1b      	ldr	r3, [pc, #108]	; (145c <_i2c_master_write_packet+0xe8>)
    13ee:	469a      	mov	sl, r3
    13f0:	e011      	b.n	1416 <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    13f2:	8b6b      	ldrh	r3, [r5, #26]
    13f4:	464a      	mov	r2, r9
    13f6:	4213      	tst	r3, r2
    13f8:	d022      	beq.n	1440 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    13fa:	1c30      	adds	r0, r6, #0
    13fc:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	5d1a      	ldrb	r2, [r3, r4]
    1402:	2328      	movs	r3, #40	; 0x28
    1404:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1406:	1c30      	adds	r0, r6, #0
    1408:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    140a:	2800      	cmp	r0, #0
    140c:	d106      	bne.n	141c <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    140e:	8b6b      	ldrh	r3, [r5, #26]
    1410:	3401      	adds	r4, #1
    1412:	075b      	lsls	r3, r3, #29
    1414:	d404      	bmi.n	1420 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    1416:	4544      	cmp	r4, r8
    1418:	d1eb      	bne.n	13f2 <_i2c_master_write_packet+0x7e>
    141a:	e003      	b.n	1424 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    141c:	9001      	str	r0, [sp, #4]
    141e:	e001      	b.n	1424 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1420:	231e      	movs	r3, #30
    1422:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
    1424:	7ab3      	ldrb	r3, [r6, #10]
    1426:	9801      	ldr	r0, [sp, #4]
    1428:	2b00      	cmp	r3, #0
    142a:	d00a      	beq.n	1442 <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    142c:	1c30      	adds	r0, r6, #0
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <_i2c_master_write_packet+0xdc>)
    1430:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1432:	686b      	ldr	r3, [r5, #4]
    1434:	22c0      	movs	r2, #192	; 0xc0
    1436:	0292      	lsls	r2, r2, #10
    1438:	4313      	orrs	r3, r2
    143a:	606b      	str	r3, [r5, #4]
    143c:	9801      	ldr	r0, [sp, #4]
    143e:	e000      	b.n	1442 <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    1440:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1442:	b003      	add	sp, #12
    1444:	bc3c      	pop	{r2, r3, r4, r5}
    1446:	4690      	mov	r8, r2
    1448:	4699      	mov	r9, r3
    144a:	46a2      	mov	sl, r4
    144c:	46ab      	mov	fp, r5
    144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1450:	00000f79 	.word	0x00000f79
    1454:	000011d9 	.word	0x000011d9
    1458:	fffbffff 	.word	0xfffbffff
    145c:	000011a9 	.word	0x000011a9
    1460:	00001179 	.word	0x00001179

00001464 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1464:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1466:	2301      	movs	r3, #1
    1468:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    146a:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
    146c:	4b01      	ldr	r3, [pc, #4]	; (1474 <i2c_master_read_packet_wait+0x10>)
    146e:	4798      	blx	r3
}
    1470:	bd08      	pop	{r3, pc}
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	000011f9 	.word	0x000011f9

00001478 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1478:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    147a:	2301      	movs	r3, #1
    147c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    147e:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1480:	4b01      	ldr	r3, [pc, #4]	; (1488 <i2c_master_write_packet_wait+0x10>)
    1482:	4798      	blx	r3
}
    1484:	bd08      	pop	{r3, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00001375 	.word	0x00001375

0000148c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    148c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    148e:	0080      	lsls	r0, r0, #2
    1490:	4b14      	ldr	r3, [pc, #80]	; (14e4 <_tc_interrupt_handler+0x58>)
    1492:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1494:	682b      	ldr	r3, [r5, #0]
    1496:	7a9c      	ldrb	r4, [r3, #10]
    1498:	7e2b      	ldrb	r3, [r5, #24]
    149a:	401c      	ands	r4, r3
    149c:	7e6b      	ldrb	r3, [r5, #25]
    149e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    14a0:	07e3      	lsls	r3, r4, #31
    14a2:	d505      	bpl.n	14b0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    14a4:	1c28      	adds	r0, r5, #0
    14a6:	68ab      	ldr	r3, [r5, #8]
    14a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    14aa:	2301      	movs	r3, #1
    14ac:	682a      	ldr	r2, [r5, #0]
    14ae:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    14b0:	07a3      	lsls	r3, r4, #30
    14b2:	d505      	bpl.n	14c0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    14b4:	1c28      	adds	r0, r5, #0
    14b6:	68eb      	ldr	r3, [r5, #12]
    14b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    14ba:	2302      	movs	r3, #2
    14bc:	682a      	ldr	r2, [r5, #0]
    14be:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    14c0:	06e3      	lsls	r3, r4, #27
    14c2:	d505      	bpl.n	14d0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    14c4:	1c28      	adds	r0, r5, #0
    14c6:	692b      	ldr	r3, [r5, #16]
    14c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    14ca:	2310      	movs	r3, #16
    14cc:	682a      	ldr	r2, [r5, #0]
    14ce:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    14d0:	06a3      	lsls	r3, r4, #26
    14d2:	d505      	bpl.n	14e0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    14d4:	1c28      	adds	r0, r5, #0
    14d6:	696b      	ldr	r3, [r5, #20]
    14d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    14da:	682b      	ldr	r3, [r5, #0]
    14dc:	2220      	movs	r2, #32
    14de:	729a      	strb	r2, [r3, #10]
	}
}
    14e0:	bd38      	pop	{r3, r4, r5, pc}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	20000eb4 	.word	0x20000eb4

000014e8 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
    14e8:	b508      	push	{r3, lr}
    14ea:	2000      	movs	r0, #0
    14ec:	4b01      	ldr	r3, [pc, #4]	; (14f4 <TC0_Handler+0xc>)
    14ee:	4798      	blx	r3
    14f0:	bd08      	pop	{r3, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	0000148d 	.word	0x0000148d

000014f8 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    14f8:	b508      	push	{r3, lr}
    14fa:	2001      	movs	r0, #1
    14fc:	4b01      	ldr	r3, [pc, #4]	; (1504 <TC1_Handler+0xc>)
    14fe:	4798      	blx	r3
    1500:	bd08      	pop	{r3, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	0000148d 	.word	0x0000148d

00001508 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    1508:	b508      	push	{r3, lr}
    150a:	2002      	movs	r0, #2
    150c:	4b01      	ldr	r3, [pc, #4]	; (1514 <TC4_Handler+0xc>)
    150e:	4798      	blx	r3
    1510:	bd08      	pop	{r3, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	0000148d 	.word	0x0000148d

00001518 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    1518:	b5f0      	push	{r4, r5, r6, r7, lr}
    151a:	465f      	mov	r7, fp
    151c:	4656      	mov	r6, sl
    151e:	464d      	mov	r5, r9
    1520:	4644      	mov	r4, r8
    1522:	b4f0      	push	{r4, r5, r6, r7}
    1524:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    1526:	4bc8      	ldr	r3, [pc, #800]	; (1848 <USB_Handler+0x330>)
    1528:	681f      	ldr	r7, [r3, #0]
    152a:	683d      	ldr	r5, [r7, #0]
    152c:	782b      	ldrb	r3, [r5, #0]
    152e:	09db      	lsrs	r3, r3, #7
    1530:	d100      	bne.n	1534 <USB_Handler+0x1c>
    1532:	e154      	b.n	17de <USB_Handler+0x2c6>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    1534:	8c28      	ldrh	r0, [r5, #32]
    1536:	b280      	uxth	r0, r0
    1538:	4bc4      	ldr	r3, [pc, #784]	; (184c <USB_Handler+0x334>)
    153a:	4798      	blx	r3
    153c:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    153e:	2c1f      	cmp	r4, #31
    1540:	d900      	bls.n	1544 <USB_Handler+0x2c>
    1542:	e0d2      	b.n	16ea <USB_Handler+0x1d2>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    1544:	1c03      	adds	r3, r0, #0
    1546:	3308      	adds	r3, #8
    1548:	015b      	lsls	r3, r3, #5
    154a:	18ed      	adds	r5, r5, r3
    154c:	79ed      	ldrb	r5, [r5, #7]
    154e:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    1550:	07ab      	lsls	r3, r5, #30
    1552:	d050      	beq.n	15f6 <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1554:	4abe      	ldr	r2, [pc, #760]	; (1850 <USB_Handler+0x338>)
    1556:	2301      	movs	r3, #1
    1558:	4083      	lsls	r3, r0
    155a:	6811      	ldr	r1, [r2, #0]
    155c:	4399      	bics	r1, r3
    155e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1560:	1c03      	adds	r3, r0, #0
    1562:	3308      	adds	r3, #8
    1564:	015b      	lsls	r3, r3, #5
    1566:	683a      	ldr	r2, [r7, #0]
    1568:	4694      	mov	ip, r2
    156a:	4463      	add	r3, ip
    156c:	2203      	movs	r2, #3
    156e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1570:	183b      	adds	r3, r7, r0
    1572:	33a8      	adds	r3, #168	; 0xa8
    1574:	799b      	ldrb	r3, [r3, #6]
    1576:	07db      	lsls	r3, r3, #31
    1578:	d53d      	bpl.n	15f6 <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    157a:	4bb6      	ldr	r3, [pc, #728]	; (1854 <USB_Handler+0x33c>)
    157c:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    157e:	683a      	ldr	r2, [r7, #0]
    1580:	1c03      	adds	r3, r0, #0
    1582:	3308      	adds	r3, #8
    1584:	015b      	lsls	r3, r3, #5
    1586:	5c9b      	ldrb	r3, [r3, r2]
    1588:	2203      	movs	r2, #3
    158a:	4013      	ands	r3, r2
    158c:	2b01      	cmp	r3, #1
    158e:	d110      	bne.n	15b2 <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1590:	0142      	lsls	r2, r0, #5
    1592:	4bb1      	ldr	r3, [pc, #708]	; (1858 <USB_Handler+0x340>)
    1594:	189b      	adds	r3, r3, r2
    1596:	685a      	ldr	r2, [r3, #4]
    1598:	0492      	lsls	r2, r2, #18
    159a:	0c92      	lsrs	r2, r2, #18
    159c:	49ad      	ldr	r1, [pc, #692]	; (1854 <USB_Handler+0x33c>)
    159e:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    15a0:	685a      	ldr	r2, [r3, #4]
    15a2:	0112      	lsls	r2, r2, #4
    15a4:	0c92      	lsrs	r2, r2, #18
    15a6:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    15a8:	685a      	ldr	r2, [r3, #4]
    15aa:	0b92      	lsrs	r2, r2, #14
    15ac:	0392      	lsls	r2, r2, #14
    15ae:	605a      	str	r2, [r3, #4]
    15b0:	e019      	b.n	15e6 <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    15b2:	0143      	lsls	r3, r0, #5
    15b4:	4aa8      	ldr	r2, [pc, #672]	; (1858 <USB_Handler+0x340>)
    15b6:	18d3      	adds	r3, r2, r3
    15b8:	685a      	ldr	r2, [r3, #4]
    15ba:	0112      	lsls	r2, r2, #4
    15bc:	0c92      	lsrs	r2, r2, #18
    15be:	48a5      	ldr	r0, [pc, #660]	; (1854 <USB_Handler+0x33c>)
    15c0:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    15c2:	6859      	ldr	r1, [r3, #4]
    15c4:	0489      	lsls	r1, r1, #18
    15c6:	0c89      	lsrs	r1, r1, #18
    15c8:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    15ca:	6858      	ldr	r0, [r3, #4]
    15cc:	49a3      	ldr	r1, [pc, #652]	; (185c <USB_Handler+0x344>)
    15ce:	4001      	ands	r1, r0
    15d0:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    15d2:	2a00      	cmp	r2, #0
    15d4:	d107      	bne.n	15e6 <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    15d6:	0163      	lsls	r3, r4, #5
    15d8:	4a9f      	ldr	r2, [pc, #636]	; (1858 <USB_Handler+0x340>)
    15da:	18d3      	adds	r3, r2, r3
    15dc:	685b      	ldr	r3, [r3, #4]
    15de:	049b      	lsls	r3, r3, #18
    15e0:	0c9b      	lsrs	r3, r3, #18
    15e2:	4a9c      	ldr	r2, [pc, #624]	; (1854 <USB_Handler+0x33c>)
    15e4:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    15e6:	4b98      	ldr	r3, [pc, #608]	; (1848 <USB_Handler+0x330>)
    15e8:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    15ea:	1ca3      	adds	r3, r4, #2
    15ec:	011b      	lsls	r3, r3, #4
    15ee:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    15f0:	685b      	ldr	r3, [r3, #4]
    15f2:	4998      	ldr	r1, [pc, #608]	; (1854 <USB_Handler+0x33c>)
    15f4:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    15f6:	076b      	lsls	r3, r5, #29
    15f8:	d50e      	bpl.n	1618 <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    15fa:	4a95      	ldr	r2, [pc, #596]	; (1850 <USB_Handler+0x338>)
    15fc:	2301      	movs	r3, #1
    15fe:	40a3      	lsls	r3, r4
    1600:	6811      	ldr	r1, [r2, #0]
    1602:	4399      	bics	r1, r3
    1604:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1606:	4b90      	ldr	r3, [pc, #576]	; (1848 <USB_Handler+0x330>)
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	681a      	ldr	r2, [r3, #0]
    160c:	1c23      	adds	r3, r4, #0
    160e:	3308      	adds	r3, #8
    1610:	015b      	lsls	r3, r3, #5
    1612:	18d3      	adds	r3, r2, r3
    1614:	2204      	movs	r2, #4
    1616:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    1618:	072b      	lsls	r3, r5, #28
    161a:	d521      	bpl.n	1660 <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    161c:	4a8c      	ldr	r2, [pc, #560]	; (1850 <USB_Handler+0x338>)
    161e:	2301      	movs	r3, #1
    1620:	40a3      	lsls	r3, r4
    1622:	6811      	ldr	r1, [r2, #0]
    1624:	4399      	bics	r1, r3
    1626:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1628:	4b87      	ldr	r3, [pc, #540]	; (1848 <USB_Handler+0x330>)
    162a:	6818      	ldr	r0, [r3, #0]
    162c:	1c23      	adds	r3, r4, #0
    162e:	3308      	adds	r3, #8
    1630:	015b      	lsls	r3, r3, #5
    1632:	6802      	ldr	r2, [r0, #0]
    1634:	4694      	mov	ip, r2
    1636:	4463      	add	r3, ip
    1638:	2208      	movs	r2, #8
    163a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    163c:	1903      	adds	r3, r0, r4
    163e:	33a8      	adds	r3, #168	; 0xa8
    1640:	799b      	ldrb	r3, [r3, #6]
    1642:	079b      	lsls	r3, r3, #30
    1644:	d50c      	bpl.n	1660 <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    1646:	4983      	ldr	r1, [pc, #524]	; (1854 <USB_Handler+0x33c>)
    1648:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    164a:	0163      	lsls	r3, r4, #5
    164c:	4a82      	ldr	r2, [pc, #520]	; (1858 <USB_Handler+0x340>)
    164e:	18d3      	adds	r3, r2, r3
    1650:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    1652:	231f      	movs	r3, #31
    1654:	4013      	ands	r3, r2
    1656:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1658:	0123      	lsls	r3, r4, #4
    165a:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    165e:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    1660:	06eb      	lsls	r3, r5, #27
    1662:	d522      	bpl.n	16aa <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1664:	4a7a      	ldr	r2, [pc, #488]	; (1850 <USB_Handler+0x338>)
    1666:	2301      	movs	r3, #1
    1668:	40a3      	lsls	r3, r4
    166a:	6811      	ldr	r1, [r2, #0]
    166c:	4399      	bics	r1, r3
    166e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1670:	4b75      	ldr	r3, [pc, #468]	; (1848 <USB_Handler+0x330>)
    1672:	6818      	ldr	r0, [r3, #0]
    1674:	1c23      	adds	r3, r4, #0
    1676:	3308      	adds	r3, #8
    1678:	015b      	lsls	r3, r3, #5
    167a:	6802      	ldr	r2, [r0, #0]
    167c:	4694      	mov	ip, r2
    167e:	4463      	add	r3, ip
    1680:	2210      	movs	r2, #16
    1682:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1684:	1903      	adds	r3, r0, r4
    1686:	33a8      	adds	r3, #168	; 0xa8
    1688:	799b      	ldrb	r3, [r3, #6]
    168a:	075b      	lsls	r3, r3, #29
    168c:	d50d      	bpl.n	16aa <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    168e:	4a71      	ldr	r2, [pc, #452]	; (1854 <USB_Handler+0x33c>)
    1690:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1692:	0163      	lsls	r3, r4, #5
    1694:	4970      	ldr	r1, [pc, #448]	; (1858 <USB_Handler+0x340>)
    1696:	18cb      	adds	r3, r1, r3
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	011b      	lsls	r3, r3, #4
    169c:	0c9b      	lsrs	r3, r3, #18
    169e:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    16a0:	0123      	lsls	r3, r4, #4
    16a2:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    16a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16a6:	2100      	movs	r1, #0
    16a8:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    16aa:	06ab      	lsls	r3, r5, #26
    16ac:	d400      	bmi.n	16b0 <USB_Handler+0x198>
    16ae:	e1f8      	b.n	1aa2 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    16b0:	4a67      	ldr	r2, [pc, #412]	; (1850 <USB_Handler+0x338>)
    16b2:	2301      	movs	r3, #1
    16b4:	40a3      	lsls	r3, r4
    16b6:	6811      	ldr	r1, [r2, #0]
    16b8:	4399      	bics	r1, r3
    16ba:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    16bc:	4b62      	ldr	r3, [pc, #392]	; (1848 <USB_Handler+0x330>)
    16be:	6818      	ldr	r0, [r3, #0]
    16c0:	1c23      	adds	r3, r4, #0
    16c2:	3308      	adds	r3, #8
    16c4:	015b      	lsls	r3, r3, #5
    16c6:	6802      	ldr	r2, [r0, #0]
    16c8:	4694      	mov	ip, r2
    16ca:	4463      	add	r3, ip
    16cc:	2220      	movs	r2, #32
    16ce:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    16d0:	1903      	adds	r3, r0, r4
    16d2:	33a8      	adds	r3, #168	; 0xa8
    16d4:	799b      	ldrb	r3, [r3, #6]
    16d6:	071b      	lsls	r3, r3, #28
    16d8:	d400      	bmi.n	16dc <USB_Handler+0x1c4>
    16da:	e1e2      	b.n	1aa2 <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    16dc:	495d      	ldr	r1, [pc, #372]	; (1854 <USB_Handler+0x33c>)
    16de:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    16e0:	0124      	lsls	r4, r4, #4
    16e2:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    16e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    16e6:	4798      	blx	r3
    16e8:	e1db      	b.n	1aa2 <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    16ea:	8bac      	ldrh	r4, [r5, #28]
    16ec:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    16ee:	0763      	lsls	r3, r4, #29
    16f0:	d508      	bpl.n	1704 <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    16f2:	2304      	movs	r3, #4
    16f4:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    16f6:	33a1      	adds	r3, #161	; 0xa1
    16f8:	5cfb      	ldrb	r3, [r7, r3]
    16fa:	07db      	lsls	r3, r3, #31
    16fc:	d502      	bpl.n	1704 <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	1c38      	adds	r0, r7, #0
    1702:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    1704:	0723      	lsls	r3, r4, #28
    1706:	d50d      	bpl.n	1724 <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1708:	2200      	movs	r2, #0
    170a:	4b51      	ldr	r3, [pc, #324]	; (1850 <USB_Handler+0x338>)
    170c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    170e:	4b4e      	ldr	r3, [pc, #312]	; (1848 <USB_Handler+0x330>)
    1710:	6818      	ldr	r0, [r3, #0]
    1712:	2308      	movs	r3, #8
    1714:	6802      	ldr	r2, [r0, #0]
    1716:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    1718:	339d      	adds	r3, #157	; 0x9d
    171a:	5cc3      	ldrb	r3, [r0, r3]
    171c:	079b      	lsls	r3, r3, #30
    171e:	d501      	bpl.n	1724 <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    1720:	6883      	ldr	r3, [r0, #8]
    1722:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    1724:	0663      	lsls	r3, r4, #25
    1726:	d50a      	bpl.n	173e <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    1728:	4b47      	ldr	r3, [pc, #284]	; (1848 <USB_Handler+0x330>)
    172a:	6818      	ldr	r0, [r3, #0]
    172c:	2340      	movs	r3, #64	; 0x40
    172e:	6802      	ldr	r2, [r0, #0]
    1730:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    1732:	3365      	adds	r3, #101	; 0x65
    1734:	5cc3      	ldrb	r3, [r0, r3]
    1736:	06db      	lsls	r3, r3, #27
    1738:	d501      	bpl.n	173e <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    173a:	6943      	ldr	r3, [r0, #20]
    173c:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    173e:	06a3      	lsls	r3, r4, #26
    1740:	d50a      	bpl.n	1758 <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    1742:	4b41      	ldr	r3, [pc, #260]	; (1848 <USB_Handler+0x330>)
    1744:	6818      	ldr	r0, [r3, #0]
    1746:	2320      	movs	r3, #32
    1748:	6802      	ldr	r2, [r0, #0]
    174a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    174c:	3385      	adds	r3, #133	; 0x85
    174e:	5cc3      	ldrb	r3, [r0, r3]
    1750:	071b      	lsls	r3, r3, #28
    1752:	d501      	bpl.n	1758 <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    1754:	6903      	ldr	r3, [r0, #16]
    1756:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    1758:	06e3      	lsls	r3, r4, #27
    175a:	d50a      	bpl.n	1772 <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    175c:	4b3a      	ldr	r3, [pc, #232]	; (1848 <USB_Handler+0x330>)
    175e:	6818      	ldr	r0, [r3, #0]
    1760:	2310      	movs	r3, #16
    1762:	6802      	ldr	r2, [r0, #0]
    1764:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    1766:	3395      	adds	r3, #149	; 0x95
    1768:	5cc3      	ldrb	r3, [r0, r3]
    176a:	075b      	lsls	r3, r3, #29
    176c:	d501      	bpl.n	1772 <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    176e:	68c3      	ldr	r3, [r0, #12]
    1770:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    1772:	0623      	lsls	r3, r4, #24
    1774:	d50d      	bpl.n	1792 <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1776:	2200      	movs	r2, #0
    1778:	4b35      	ldr	r3, [pc, #212]	; (1850 <USB_Handler+0x338>)
    177a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    177c:	4b32      	ldr	r3, [pc, #200]	; (1848 <USB_Handler+0x330>)
    177e:	6818      	ldr	r0, [r3, #0]
    1780:	2380      	movs	r3, #128	; 0x80
    1782:	6802      	ldr	r2, [r0, #0]
    1784:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    1786:	3325      	adds	r3, #37	; 0x25
    1788:	5cc3      	ldrb	r3, [r0, r3]
    178a:	069b      	lsls	r3, r3, #26
    178c:	d501      	bpl.n	1792 <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    178e:	6983      	ldr	r3, [r0, #24]
    1790:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    1792:	05e3      	lsls	r3, r4, #23
    1794:	d50e      	bpl.n	17b4 <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    1796:	2200      	movs	r2, #0
    1798:	4b2d      	ldr	r3, [pc, #180]	; (1850 <USB_Handler+0x338>)
    179a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    179c:	4b2a      	ldr	r3, [pc, #168]	; (1848 <USB_Handler+0x330>)
    179e:	6818      	ldr	r0, [r3, #0]
    17a0:	2380      	movs	r3, #128	; 0x80
    17a2:	005b      	lsls	r3, r3, #1
    17a4:	6802      	ldr	r2, [r0, #0]
    17a6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    17a8:	3b5b      	subs	r3, #91	; 0x5b
    17aa:	5cc3      	ldrb	r3, [r0, r3]
    17ac:	065b      	lsls	r3, r3, #25
    17ae:	d501      	bpl.n	17b4 <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    17b0:	69c3      	ldr	r3, [r0, #28]
    17b2:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    17b4:	05a3      	lsls	r3, r4, #22
    17b6:	d400      	bmi.n	17ba <USB_Handler+0x2a2>
    17b8:	e173      	b.n	1aa2 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    17ba:	2200      	movs	r2, #0
    17bc:	4b24      	ldr	r3, [pc, #144]	; (1850 <USB_Handler+0x338>)
    17be:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    17c0:	4b21      	ldr	r3, [pc, #132]	; (1848 <USB_Handler+0x330>)
    17c2:	6818      	ldr	r0, [r3, #0]
    17c4:	2380      	movs	r3, #128	; 0x80
    17c6:	009b      	lsls	r3, r3, #2
    17c8:	6802      	ldr	r2, [r0, #0]
    17ca:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    17cc:	3b5c      	subs	r3, #92	; 0x5c
    17ce:	3bff      	subs	r3, #255	; 0xff
    17d0:	5cc3      	ldrb	r3, [r0, r3]
    17d2:	2b7f      	cmp	r3, #127	; 0x7f
    17d4:	d800      	bhi.n	17d8 <USB_Handler+0x2c0>
    17d6:	e164      	b.n	1aa2 <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    17d8:	6a03      	ldr	r3, [r0, #32]
    17da:	4798      	blx	r3
    17dc:	e161      	b.n	1aa2 <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    17de:	8c2e      	ldrh	r6, [r5, #32]
    17e0:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    17e2:	2e00      	cmp	r6, #0
    17e4:	d140      	bne.n	1868 <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    17e6:	8bae      	ldrh	r6, [r5, #28]
    17e8:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    17ea:	23ab      	movs	r3, #171	; 0xab
    17ec:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    17ee:	5afd      	ldrh	r5, [r7, r3]
    17f0:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    17f2:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    17f4:	5afb      	ldrh	r3, [r7, r3]
    17f6:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    17f8:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    17fa:	4f19      	ldr	r7, [pc, #100]	; (1860 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    17fc:	4b12      	ldr	r3, [pc, #72]	; (1848 <USB_Handler+0x330>)
    17fe:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    1800:	4698      	mov	r8, r3
    1802:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    1804:	5bdb      	ldrh	r3, [r3, r7]
    1806:	421e      	tst	r6, r3
    1808:	d003      	beq.n	1812 <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    180a:	464a      	mov	r2, r9
    180c:	6812      	ldr	r2, [r2, #0]
    180e:	6812      	ldr	r2, [r2, #0]
    1810:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    1812:	421d      	tst	r5, r3
    1814:	d013      	beq.n	183e <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    1816:	2c06      	cmp	r4, #6
    1818:	d107      	bne.n	182a <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    181a:	4b0f      	ldr	r3, [pc, #60]	; (1858 <USB_Handler+0x340>)
    181c:	891b      	ldrh	r3, [r3, #8]
    181e:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    1820:	2380      	movs	r3, #128	; 0x80
    1822:	005b      	lsls	r3, r3, #1
    1824:	4013      	ands	r3, r2
    1826:	4a0f      	ldr	r2, [pc, #60]	; (1864 <USB_Handler+0x34c>)
    1828:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    182a:	1c23      	adds	r3, r4, #0
    182c:	332e      	adds	r3, #46	; 0x2e
    182e:	009b      	lsls	r3, r3, #2
    1830:	4642      	mov	r2, r8
    1832:	6812      	ldr	r2, [r2, #0]
    1834:	589b      	ldr	r3, [r3, r2]
    1836:	4642      	mov	r2, r8
    1838:	6810      	ldr	r0, [r2, #0]
    183a:	490a      	ldr	r1, [pc, #40]	; (1864 <USB_Handler+0x34c>)
    183c:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    183e:	3401      	adds	r4, #1
    1840:	2c07      	cmp	r4, #7
    1842:	d1de      	bne.n	1802 <USB_Handler+0x2ea>
    1844:	e12d      	b.n	1aa2 <USB_Handler+0x58a>
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	2000004c 	.word	0x2000004c
    184c:	00004165 	.word	0x00004165
    1850:	20000040 	.word	0x20000040
    1854:	20000038 	.word	0x20000038
    1858:	20000ec0 	.word	0x20000ec0
    185c:	f0003fff 	.word	0xf0003fff
    1860:	00004284 	.word	0x00004284
    1864:	20000034 	.word	0x20000034
    1868:	1c3c      	adds	r4, r7, #0
    186a:	3459      	adds	r4, #89	; 0x59
    186c:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    186e:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    1870:	2201      	movs	r2, #1
    1872:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1874:	325f      	adds	r2, #95	; 0x5f
    1876:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1878:	3a50      	subs	r2, #80	; 0x50
    187a:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    187c:	3a04      	subs	r2, #4
    187e:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1880:	46b8      	mov	r8, r7
    1882:	1c2f      	adds	r7, r5, #0
    1884:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    1886:	9301      	str	r3, [sp, #4]
    1888:	1c32      	adds	r2, r6, #0
    188a:	411a      	asrs	r2, r3
    188c:	4661      	mov	r1, ip
    188e:	4211      	tst	r1, r2
    1890:	d100      	bne.n	1894 <USB_Handler+0x37c>
    1892:	e101      	b.n	1a98 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    1894:	1c1a      	adds	r2, r3, #0
    1896:	3208      	adds	r2, #8
    1898:	0152      	lsls	r2, r2, #5
    189a:	18ba      	adds	r2, r7, r2
    189c:	79d2      	ldrb	r2, [r2, #7]
    189e:	b2d2      	uxtb	r2, r2
    18a0:	7a21      	ldrb	r1, [r4, #8]
    18a2:	7825      	ldrb	r5, [r4, #0]
    18a4:	4029      	ands	r1, r5
				flags_run = flags &
    18a6:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    18a8:	464d      	mov	r5, r9
    18aa:	4215      	tst	r5, r2
    18ac:	d02a      	beq.n	1904 <USB_Handler+0x3ec>
    18ae:	1c3d      	adds	r5, r7, #0
    18b0:	4647      	mov	r7, r8
    18b2:	015b      	lsls	r3, r3, #5
    18b4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    18b6:	2308      	movs	r3, #8
    18b8:	33ff      	adds	r3, #255	; 0xff
    18ba:	5ceb      	ldrb	r3, [r5, r3]
    18bc:	065b      	lsls	r3, r3, #25
    18be:	d509      	bpl.n	18d4 <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    18c0:	2240      	movs	r2, #64	; 0x40
    18c2:	2308      	movs	r3, #8
    18c4:	33ff      	adds	r3, #255	; 0xff
    18c6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    18c8:	3b88      	subs	r3, #136	; 0x88
    18ca:	3bff      	subs	r3, #255	; 0xff
    18cc:	4303      	orrs	r3, r0
    18ce:	4a78      	ldr	r2, [pc, #480]	; (1ab0 <USB_Handler+0x598>)
    18d0:	7193      	strb	r3, [r2, #6]
    18d2:	e00a      	b.n	18ea <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    18d4:	2308      	movs	r3, #8
    18d6:	33ff      	adds	r3, #255	; 0xff
    18d8:	5ceb      	ldrb	r3, [r5, r3]
    18da:	069b      	lsls	r3, r3, #26
    18dc:	d505      	bpl.n	18ea <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    18de:	2220      	movs	r2, #32
    18e0:	2308      	movs	r3, #8
    18e2:	33ff      	adds	r3, #255	; 0xff
    18e4:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    18e6:	4b72      	ldr	r3, [pc, #456]	; (1ab0 <USB_Handler+0x598>)
    18e8:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    18ea:	2360      	movs	r3, #96	; 0x60
    18ec:	420b      	tst	r3, r1
    18ee:	d100      	bne.n	18f2 <USB_Handler+0x3da>
    18f0:	e0d7      	b.n	1aa2 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    18f2:	9b01      	ldr	r3, [sp, #4]
    18f4:	011b      	lsls	r3, r3, #4
    18f6:	18fb      	adds	r3, r7, r3
    18f8:	33dc      	adds	r3, #220	; 0xdc
    18fa:	685b      	ldr	r3, [r3, #4]
    18fc:	1c38      	adds	r0, r7, #0
    18fe:	496c      	ldr	r1, [pc, #432]	; (1ab0 <USB_Handler+0x598>)
    1900:	4798      	blx	r3
    1902:	e0ce      	b.n	1aa2 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1904:	4655      	mov	r5, sl
    1906:	4215      	tst	r5, r2
    1908:	d01f      	beq.n	194a <USB_Handler+0x432>
    190a:	1c3d      	adds	r5, r7, #0
    190c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    190e:	9a01      	ldr	r2, [sp, #4]
    1910:	1c13      	adds	r3, r2, #0
    1912:	3308      	adds	r3, #8
    1914:	015b      	lsls	r3, r3, #5
    1916:	18ed      	adds	r5, r5, r3
    1918:	2310      	movs	r3, #16
    191a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    191c:	18bb      	adds	r3, r7, r2
    191e:	3361      	adds	r3, #97	; 0x61
    1920:	33ff      	adds	r3, #255	; 0xff
    1922:	781b      	ldrb	r3, [r3, #0]
    1924:	06db      	lsls	r3, r3, #27
    1926:	d400      	bmi.n	192a <USB_Handler+0x412>
    1928:	e0bb      	b.n	1aa2 <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    192a:	1c10      	adds	r0, r2, #0
    192c:	0153      	lsls	r3, r2, #5
    192e:	4a61      	ldr	r2, [pc, #388]	; (1ab4 <USB_Handler+0x59c>)
    1930:	18d3      	adds	r3, r2, r3
    1932:	685b      	ldr	r3, [r3, #4]
    1934:	049b      	lsls	r3, r3, #18
    1936:	0c9b      	lsrs	r3, r3, #18
    1938:	495d      	ldr	r1, [pc, #372]	; (1ab0 <USB_Handler+0x598>)
    193a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    193c:	0103      	lsls	r3, r0, #4
    193e:	18fb      	adds	r3, r7, r3
    1940:	33d8      	adds	r3, #216	; 0xd8
    1942:	685b      	ldr	r3, [r3, #4]
    1944:	4640      	mov	r0, r8
    1946:	4798      	blx	r3
    1948:	e0ab      	b.n	1aa2 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    194a:	465d      	mov	r5, fp
    194c:	4215      	tst	r5, r2
    194e:	d05f      	beq.n	1a10 <USB_Handler+0x4f8>
    1950:	1c3d      	adds	r5, r7, #0
    1952:	4647      	mov	r7, r8
    1954:	4680      	mov	r8, r0
    1956:	9b01      	ldr	r3, [sp, #4]
    1958:	015b      	lsls	r3, r3, #5
    195a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    195c:	2308      	movs	r3, #8
    195e:	33ff      	adds	r3, #255	; 0xff
    1960:	5ceb      	ldrb	r3, [r5, r3]
    1962:	071b      	lsls	r3, r3, #28
    1964:	d523      	bpl.n	19ae <USB_Handler+0x496>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    1966:	2208      	movs	r2, #8
    1968:	2308      	movs	r3, #8
    196a:	33ff      	adds	r3, #255	; 0xff
    196c:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	015b      	lsls	r3, r3, #5
    1972:	4a50      	ldr	r2, [pc, #320]	; (1ab4 <USB_Handler+0x59c>)
    1974:	18d3      	adds	r3, r2, r3
    1976:	3318      	adds	r3, #24
    1978:	789b      	ldrb	r3, [r3, #2]
    197a:	079b      	lsls	r3, r3, #30
    197c:	d507      	bpl.n	198e <USB_Handler+0x476>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    197e:	9b01      	ldr	r3, [sp, #4]
    1980:	015a      	lsls	r2, r3, #5
    1982:	4b4c      	ldr	r3, [pc, #304]	; (1ab4 <USB_Handler+0x59c>)
    1984:	189b      	adds	r3, r3, r2
    1986:	7e9a      	ldrb	r2, [r3, #26]
    1988:	2002      	movs	r0, #2
    198a:	4382      	bics	r2, r0
    198c:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    198e:	2380      	movs	r3, #128	; 0x80
    1990:	425b      	negs	r3, r3
    1992:	4642      	mov	r2, r8
    1994:	4313      	orrs	r3, r2
    1996:	4a46      	ldr	r2, [pc, #280]	; (1ab0 <USB_Handler+0x598>)
    1998:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    199a:	9b01      	ldr	r3, [sp, #4]
    199c:	3308      	adds	r3, #8
    199e:	015b      	lsls	r3, r3, #5
    19a0:	683a      	ldr	r2, [r7, #0]
    19a2:	4694      	mov	ip, r2
    19a4:	4463      	add	r3, ip
    19a6:	79db      	ldrb	r3, [r3, #7]
    19a8:	079b      	lsls	r3, r3, #30
    19aa:	d525      	bpl.n	19f8 <USB_Handler+0x4e0>
    19ac:	e079      	b.n	1aa2 <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    19ae:	2308      	movs	r3, #8
    19b0:	33ff      	adds	r3, #255	; 0xff
    19b2:	5ceb      	ldrb	r3, [r5, r3]
    19b4:	075b      	lsls	r3, r3, #29
    19b6:	d51f      	bpl.n	19f8 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    19b8:	2204      	movs	r2, #4
    19ba:	2308      	movs	r3, #8
    19bc:	33ff      	adds	r3, #255	; 0xff
    19be:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    19c0:	9b01      	ldr	r3, [sp, #4]
    19c2:	015b      	lsls	r3, r3, #5
    19c4:	4a3b      	ldr	r2, [pc, #236]	; (1ab4 <USB_Handler+0x59c>)
    19c6:	18d3      	adds	r3, r2, r3
    19c8:	3308      	adds	r3, #8
    19ca:	789b      	ldrb	r3, [r3, #2]
    19cc:	079b      	lsls	r3, r3, #30
    19ce:	d507      	bpl.n	19e0 <USB_Handler+0x4c8>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    19d0:	9b01      	ldr	r3, [sp, #4]
    19d2:	015a      	lsls	r2, r3, #5
    19d4:	4b37      	ldr	r3, [pc, #220]	; (1ab4 <USB_Handler+0x59c>)
    19d6:	189b      	adds	r3, r3, r2
    19d8:	7a9a      	ldrb	r2, [r3, #10]
    19da:	2002      	movs	r0, #2
    19dc:	4382      	bics	r2, r0
    19de:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    19e0:	4b33      	ldr	r3, [pc, #204]	; (1ab0 <USB_Handler+0x598>)
    19e2:	4642      	mov	r2, r8
    19e4:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    19e6:	9b01      	ldr	r3, [sp, #4]
    19e8:	3308      	adds	r3, #8
    19ea:	015b      	lsls	r3, r3, #5
    19ec:	683a      	ldr	r2, [r7, #0]
    19ee:	4694      	mov	ip, r2
    19f0:	4463      	add	r3, ip
    19f2:	79db      	ldrb	r3, [r3, #7]
    19f4:	07db      	lsls	r3, r3, #31
    19f6:	d454      	bmi.n	1aa2 <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    19f8:	230c      	movs	r3, #12
    19fa:	420b      	tst	r3, r1
    19fc:	d051      	beq.n	1aa2 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    19fe:	9b01      	ldr	r3, [sp, #4]
    1a00:	011b      	lsls	r3, r3, #4
    1a02:	18fb      	adds	r3, r7, r3
    1a04:	33d4      	adds	r3, #212	; 0xd4
    1a06:	685b      	ldr	r3, [r3, #4]
    1a08:	1c38      	adds	r0, r7, #0
    1a0a:	4929      	ldr	r1, [pc, #164]	; (1ab0 <USB_Handler+0x598>)
    1a0c:	4798      	blx	r3
    1a0e:	e048      	b.n	1aa2 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1a10:	2503      	movs	r5, #3
    1a12:	4215      	tst	r5, r2
    1a14:	d040      	beq.n	1a98 <USB_Handler+0x580>
    1a16:	1c3d      	adds	r5, r7, #0
    1a18:	4647      	mov	r7, r8
    1a1a:	4680      	mov	r8, r0
    1a1c:	9b01      	ldr	r3, [sp, #4]
    1a1e:	015b      	lsls	r3, r3, #5
    1a20:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1a22:	2308      	movs	r3, #8
    1a24:	33ff      	adds	r3, #255	; 0xff
    1a26:	5ceb      	ldrb	r3, [r5, r3]
    1a28:	079b      	lsls	r3, r3, #30
    1a2a:	d512      	bpl.n	1a52 <USB_Handler+0x53a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    1a2c:	2202      	movs	r2, #2
    1a2e:	2308      	movs	r3, #8
    1a30:	33ff      	adds	r3, #255	; 0xff
    1a32:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1a34:	4a1e      	ldr	r2, [pc, #120]	; (1ab0 <USB_Handler+0x598>)
    1a36:	3b88      	subs	r3, #136	; 0x88
    1a38:	3bff      	subs	r3, #255	; 0xff
    1a3a:	4303      	orrs	r3, r0
    1a3c:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    1a3e:	9b01      	ldr	r3, [sp, #4]
    1a40:	015b      	lsls	r3, r3, #5
    1a42:	481c      	ldr	r0, [pc, #112]	; (1ab4 <USB_Handler+0x59c>)
    1a44:	18c3      	adds	r3, r0, r3
    1a46:	3310      	adds	r3, #16
    1a48:	685b      	ldr	r3, [r3, #4]
    1a4a:	049b      	lsls	r3, r3, #18
    1a4c:	0c9b      	lsrs	r3, r3, #18
    1a4e:	8053      	strh	r3, [r2, #2]
    1a50:	e017      	b.n	1a82 <USB_Handler+0x56a>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1a52:	2308      	movs	r3, #8
    1a54:	33ff      	adds	r3, #255	; 0xff
    1a56:	5ceb      	ldrb	r3, [r5, r3]
    1a58:	07db      	lsls	r3, r3, #31
    1a5a:	d512      	bpl.n	1a82 <USB_Handler+0x56a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    1a5c:	2201      	movs	r2, #1
    1a5e:	2308      	movs	r3, #8
    1a60:	33ff      	adds	r3, #255	; 0xff
    1a62:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1a64:	4812      	ldr	r0, [pc, #72]	; (1ab0 <USB_Handler+0x598>)
    1a66:	4643      	mov	r3, r8
    1a68:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    1a6a:	9b01      	ldr	r3, [sp, #4]
    1a6c:	015a      	lsls	r2, r3, #5
    1a6e:	4b11      	ldr	r3, [pc, #68]	; (1ab4 <USB_Handler+0x59c>)
    1a70:	189b      	adds	r3, r3, r2
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	0492      	lsls	r2, r2, #18
    1a76:	0c92      	lsrs	r2, r2, #18
    1a78:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    1a7a:	685b      	ldr	r3, [r3, #4]
    1a7c:	011b      	lsls	r3, r3, #4
    1a7e:	0c9b      	lsrs	r3, r3, #18
    1a80:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1a82:	078b      	lsls	r3, r1, #30
    1a84:	d00d      	beq.n	1aa2 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    1a86:	9b01      	ldr	r3, [sp, #4]
    1a88:	330d      	adds	r3, #13
    1a8a:	011b      	lsls	r3, r3, #4
    1a8c:	18fb      	adds	r3, r7, r3
    1a8e:	685b      	ldr	r3, [r3, #4]
    1a90:	1c38      	adds	r0, r7, #0
    1a92:	4907      	ldr	r1, [pc, #28]	; (1ab0 <USB_Handler+0x598>)
    1a94:	4798      	blx	r3
    1a96:	e004      	b.n	1aa2 <USB_Handler+0x58a>
    1a98:	3301      	adds	r3, #1
    1a9a:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    1a9c:	2b08      	cmp	r3, #8
    1a9e:	d000      	beq.n	1aa2 <USB_Handler+0x58a>
    1aa0:	e6f0      	b.n	1884 <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    1aa2:	b003      	add	sp, #12
    1aa4:	bc3c      	pop	{r2, r3, r4, r5}
    1aa6:	4690      	mov	r8, r2
    1aa8:	4699      	mov	r9, r3
    1aaa:	46a2      	mov	sl, r4
    1aac:	46ab      	mov	fp, r5
    1aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab0:	20000044 	.word	0x20000044
    1ab4:	20000ec0 	.word	0x20000ec0

00001ab8 <rtc_match_callback>:
/* @brief function that gets called upon RTC driven wakeup
/* @params none
/* @returns none
/************************************************************************/
void rtc_match_callback(void)
{
    1ab8:	b510      	push	{r4, lr}
	struct rtc_calendar_time stCurrent_time;
	/* Errata 13901 fix */
	SUPC->VREF.reg &= ~(1 << 8);
    1aba:	4b14      	ldr	r3, [pc, #80]	; (1b0c <rtc_match_callback+0x54>)
    1abc:	69d9      	ldr	r1, [r3, #28]
    1abe:	4a14      	ldr	r2, [pc, #80]	; (1b10 <rtc_match_callback+0x58>)
    1ac0:	400a      	ands	r2, r1
    1ac2:	61da      	str	r2, [r3, #28]
	SUPC->VREG.bit.SEL = 1;
    1ac4:	699a      	ldr	r2, [r3, #24]
    1ac6:	210c      	movs	r1, #12
    1ac8:	438a      	bics	r2, r1
    1aca:	3908      	subs	r1, #8
    1acc:	430a      	orrs	r2, r1
    1ace:	619a      	str	r2, [r3, #24]
	/* Errata 14539 fix */
	GCLK->GENCTRL->bit.SRC = SYSTEM_CLOCK_SOURCE_OSC16M;
    1ad0:	4910      	ldr	r1, [pc, #64]	; (1b14 <rtc_match_callback+0x5c>)
    1ad2:	680b      	ldr	r3, [r1, #0]
    1ad4:	220f      	movs	r2, #15
    1ad6:	4393      	bics	r3, r2
    1ad8:	3a09      	subs	r2, #9
    1ada:	4313      	orrs	r3, r2
    1adc:	600b      	str	r3, [r1, #0]
	
	// Set a new alarm for the interval depending on what mode we are in
	// This method is according to the Atmel App note AT03266
	if(ucCurrent_Mode){
    1ade:	4b0e      	ldr	r3, [pc, #56]	; (1b18 <rtc_match_callback+0x60>)
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d008      	beq.n	1af8 <rtc_match_callback+0x40>
		// Winter mode
		alarm.time.hour += 1;
		alarm.time.hour %= 24;
    1ae6:	4c0d      	ldr	r4, [pc, #52]	; (1b1c <rtc_match_callback+0x64>)
	
	// Set a new alarm for the interval depending on what mode we are in
	// This method is according to the Atmel App note AT03266
	if(ucCurrent_Mode){
		// Winter mode
		alarm.time.hour += 1;
    1ae8:	78a0      	ldrb	r0, [r4, #2]
    1aea:	3001      	adds	r0, #1
		alarm.time.hour %= 24;
    1aec:	b2c0      	uxtb	r0, r0
    1aee:	2118      	movs	r1, #24
    1af0:	4b0b      	ldr	r3, [pc, #44]	; (1b20 <rtc_match_callback+0x68>)
    1af2:	4798      	blx	r3
    1af4:	70a1      	strb	r1, [r4, #2]
    1af6:	e007      	b.n	1b08 <rtc_match_callback+0x50>
	}else{
		// Summer mode
		alarm.time.minute += 20;
		alarm.time.minute %= 60;
    1af8:	4c08      	ldr	r4, [pc, #32]	; (1b1c <rtc_match_callback+0x64>)
		// Winter mode
		alarm.time.hour += 1;
		alarm.time.hour %= 24;
	}else{
		// Summer mode
		alarm.time.minute += 20;
    1afa:	7860      	ldrb	r0, [r4, #1]
    1afc:	3014      	adds	r0, #20
		alarm.time.minute %= 60;
    1afe:	b2c0      	uxtb	r0, r0
    1b00:	213c      	movs	r1, #60	; 0x3c
    1b02:	4b07      	ldr	r3, [pc, #28]	; (1b20 <rtc_match_callback+0x68>)
    1b04:	4798      	blx	r3
    1b06:	7061      	strb	r1, [r4, #1]
	}
}
    1b08:	bd10      	pop	{r4, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	40001400 	.word	0x40001400
    1b10:	fffffeff 	.word	0xfffffeff
    1b14:	40001820 	.word	0x40001820
    1b18:	20000db8 	.word	0x20000db8
    1b1c:	20000cd0 	.word	0x20000cd0
    1b20:	00003f6d 	.word	0x00003f6d

00001b24 <sleep>:
/* This function is necessary to fix the errata for the part upon wakeup and sleep every time
/* @params none
/* @returns none
/************************************************************************/
void sleep(void)
{
    1b24:	b510      	push	{r4, lr}
	/* Errata 13901 fix */
	SUPC->VREF.reg |= (1 << 8);
    1b26:	4b0d      	ldr	r3, [pc, #52]	; (1b5c <sleep+0x38>)
    1b28:	69da      	ldr	r2, [r3, #28]
    1b2a:	2180      	movs	r1, #128	; 0x80
    1b2c:	0049      	lsls	r1, r1, #1
    1b2e:	430a      	orrs	r2, r1
    1b30:	61da      	str	r2, [r3, #28]
	SUPC->VREG.bit.SEL = 0;
    1b32:	699a      	ldr	r2, [r3, #24]
    1b34:	39f4      	subs	r1, #244	; 0xf4
    1b36:	438a      	bics	r2, r1
    1b38:	619a      	str	r2, [r3, #24]
	/* Errata 14539 fix */
	GCLK->GENCTRL->bit.SRC = SYSTEM_CLOCK_SOURCE_ULP32K;
    1b3a:	4909      	ldr	r1, [pc, #36]	; (1b60 <sleep+0x3c>)
    1b3c:	680b      	ldr	r3, [r1, #0]
    1b3e:	220f      	movs	r2, #15
    1b40:	4393      	bics	r3, r2
    1b42:	3a0c      	subs	r2, #12
    1b44:	4313      	orrs	r3, r2
    1b46:	600b      	str	r3, [r1, #0]
	// Make sure the DFLL and DPLL are shut off before entering sleep mode again
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_DFLL);
    1b48:	2007      	movs	r0, #7
    1b4a:	4c06      	ldr	r4, [pc, #24]	; (1b64 <sleep+0x40>)
    1b4c:	47a0      	blx	r4
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_DPLL);
    1b4e:	2008      	movs	r0, #8
    1b50:	47a0      	blx	r4
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1b52:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    1b56:	bf30      	wfi
	// Put the part in sleep mode
	system_sleep();
}
    1b58:	bd10      	pop	{r4, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	40001400 	.word	0x40001400
    1b60:	40001820 	.word	0x40001820
    1b64:	00003795 	.word	0x00003795

00001b68 <configure_sleepmode>:
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
	PM->SLEEPCFG.reg = sleep_mode;
    1b68:	2204      	movs	r2, #4
    1b6a:	2380      	movs	r3, #128	; 0x80
    1b6c:	05db      	lsls	r3, r3, #23
    1b6e:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    1b70:	1c1a      	adds	r2, r3, #0
    1b72:	7853      	ldrb	r3, [r2, #1]
    1b74:	2b04      	cmp	r3, #4
    1b76:	d1fc      	bne.n	1b72 <configure_sleepmode+0xa>
	 * devices can show higher consumption than expected.
	*/
	stby_config.power_domain = SYSTEM_POWER_DOMAIN_PD01;
	
	// Force buck mode on the internal regulator
	SUPC->VREG.bit.SEL = 1;
    1b78:	4b0e      	ldr	r3, [pc, #56]	; (1bb4 <configure_sleepmode+0x4c>)
    1b7a:	699a      	ldr	r2, [r3, #24]
    1b7c:	210c      	movs	r1, #12
    1b7e:	438a      	bics	r2, r1
    1b80:	3908      	subs	r1, #8
    1b82:	430a      	orrs	r2, r1
    1b84:	619a      	str	r2, [r3, #24]
	SUPC->VREG.bit.RUNSTDBY = 1;
    1b86:	6999      	ldr	r1, [r3, #24]
    1b88:	2240      	movs	r2, #64	; 0x40
    1b8a:	430a      	orrs	r2, r1
    1b8c:	619a      	str	r2, [r3, #24]
	SUPC->VREF.bit.ONDEMAND = 1;
    1b8e:	69d9      	ldr	r1, [r3, #28]
    1b90:	2280      	movs	r2, #128	; 0x80
    1b92:	430a      	orrs	r2, r1
    1b94:	61da      	str	r2, [r3, #28]
static inline void system_standby_set_config(
		struct system_standby_config *const config)
{
	Assert(config);
#if SAML21
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    1b96:	2132      	movs	r1, #50	; 0x32
    1b98:	2280      	movs	r2, #128	; 0x80
    1b9a:	05d2      	lsls	r2, r2, #23
    1b9c:	8111      	strh	r1, [r2, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b9e:	4806      	ldr	r0, [pc, #24]	; (1bb8 <configure_sleepmode+0x50>)
    1ba0:	6842      	ldr	r2, [r0, #4]
    1ba2:	3914      	subs	r1, #20
    1ba4:	438a      	bics	r2, r1
    1ba6:	391c      	subs	r1, #28
    1ba8:	430a      	orrs	r2, r1
    1baa:	6042      	str	r2, [r0, #4]
	system_standby_set_config(&stby_config);

	system_flash_set_waitstates(1);
	
	/* BOD33 disabled */
	SUPC->BOD33.reg &= ~SUPC_BOD33_ENABLE;
    1bac:	691a      	ldr	r2, [r3, #16]
    1bae:	438a      	bics	r2, r1
    1bb0:	611a      	str	r2, [r3, #16]
}
    1bb2:	4770      	bx	lr
    1bb4:	40001400 	.word	0x40001400
    1bb8:	41004000 	.word	0x41004000

00001bbc <configure_rtc>:
/* @brief function to configure the SAM L21 RTC
/* @params none
/* @returns none
/************************************************************************/
void configure_rtc(void)
{
    1bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bbe:	465f      	mov	r7, fp
    1bc0:	4656      	mov	r6, sl
    1bc2:	464d      	mov	r5, r9
    1bc4:	4644      	mov	r4, r8
    1bc6:	b4f0      	push	{r4, r5, r6, r7}
    1bc8:	b087      	sub	sp, #28
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1bca:	ac02      	add	r4, sp, #8
    1bcc:	23b0      	movs	r3, #176	; 0xb0
    1bce:	011b      	lsls	r3, r3, #4
    1bd0:	8023      	strh	r3, [r4, #0]
	config->clear_on_match      = false;
    1bd2:	2600      	movs	r6, #0
    1bd4:	70a6      	strb	r6, [r4, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    1bd6:	23fa      	movs	r3, #250	; 0xfa
    1bd8:	00db      	lsls	r3, r3, #3
    1bda:	80a3      	strh	r3, [r4, #4]
	uint8_t ucIndex;
    /* Initialize RTC in calendar mode. */
    struct rtc_calendar_config config_rtc_calendar;
    rtc_calendar_get_config_defaults(&config_rtc_calendar);
	// Alarm time for first time based interrupt
    alarm.time.year = 2015;
    1bdc:	4920      	ldr	r1, [pc, #128]	; (1c60 <configure_rtc+0xa4>)
    1bde:	4b21      	ldr	r3, [pc, #132]	; (1c64 <configure_rtc+0xa8>)
    1be0:	469b      	mov	fp, r3
    1be2:	80cb      	strh	r3, [r1, #6]
    alarm.time.month = 11;
    1be4:	230b      	movs	r3, #11
    1be6:	469a      	mov	sl, r3
    1be8:	714b      	strb	r3, [r1, #5]
    alarm.time.day = 2;
    1bea:	2302      	movs	r3, #2
    1bec:	4699      	mov	r9, r3
    1bee:	710b      	strb	r3, [r1, #4]
    alarm.time.hour = 19;
    1bf0:	2313      	movs	r3, #19
    1bf2:	4698      	mov	r8, r3
    1bf4:	708b      	strb	r3, [r1, #2]
    alarm.time.minute = 31;
    1bf6:	271f      	movs	r7, #31
    1bf8:	704f      	strb	r7, [r1, #1]
    alarm.time.second = 00;
    1bfa:	700e      	strb	r6, [r1, #0]
	// Configure 24 hour clock mode, set the alarm, and use a grainularity of seconds
    config_rtc_calendar.clock_24h = true;
    1bfc:	2501      	movs	r5, #1
    1bfe:	70e5      	strb	r5, [r4, #3]
    config_rtc_calendar.alarm[0].time = alarm.time;
    1c00:	200e      	movs	r0, #14
    1c02:	4468      	add	r0, sp
    1c04:	2208      	movs	r2, #8
    1c06:	4b18      	ldr	r3, [pc, #96]	; (1c68 <configure_rtc+0xac>)
    1c08:	4798      	blx	r3
    config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    1c0a:	73a5      	strb	r5, [r4, #14]
    rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    1c0c:	4d17      	ldr	r5, [pc, #92]	; (1c6c <configure_rtc+0xb0>)
    1c0e:	1c28      	adds	r0, r5, #0
    1c10:	4917      	ldr	r1, [pc, #92]	; (1c70 <configure_rtc+0xb4>)
    1c12:	1c22      	adds	r2, r4, #0
    1c14:	4b17      	ldr	r3, [pc, #92]	; (1c74 <configure_rtc+0xb8>)
    1c16:	4798      	blx	r3
    rtc_calendar_enable(&rtc_instance);
    1c18:	1c28      	adds	r0, r5, #0
    1c1a:	4b17      	ldr	r3, [pc, #92]	; (1c78 <configure_rtc+0xbc>)
    1c1c:	4798      	blx	r3
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    1c1e:	466b      	mov	r3, sp
    1c20:	701e      	strb	r6, [r3, #0]
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    1c22:	70de      	strb	r6, [r3, #3]
    /* Set current time. */
    struct rtc_calendar_time time;
    rtc_calendar_get_time_defaults(&time);
    time.year = 2015;
    1c24:	465a      	mov	r2, fp
    1c26:	80da      	strh	r2, [r3, #6]
    time.month = 11;
    1c28:	4652      	mov	r2, sl
    1c2a:	715a      	strb	r2, [r3, #5]
    time.day = 2;
    1c2c:	464a      	mov	r2, r9
    1c2e:	711a      	strb	r2, [r3, #4]
    time.hour = 19;
    1c30:	4642      	mov	r2, r8
    1c32:	709a      	strb	r2, [r3, #2]
    time.minute = 31;
    1c34:	705f      	strb	r7, [r3, #1]
    time.second = 00;
    rtc_calendar_set_time(&rtc_instance, &time);
    1c36:	1c28      	adds	r0, r5, #0
    1c38:	4669      	mov	r1, sp
    1c3a:	4b10      	ldr	r3, [pc, #64]	; (1c7c <configure_rtc+0xc0>)
    1c3c:	4798      	blx	r3
    events.generate_event_on_alarm[0] = true;
    for(ucIndex = 1; ucIndex < RTC_NUM_OF_ALARMS; ucIndex++){
        events.generate_event_on_alarm[ucIndex] = false;
    }
	// Register the callback function
    rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    1c3e:	1c28      	adds	r0, r5, #0
    1c40:	490f      	ldr	r1, [pc, #60]	; (1c80 <configure_rtc+0xc4>)
    1c42:	2208      	movs	r2, #8
    1c44:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <configure_rtc+0xc8>)
    1c46:	4798      	blx	r3
    rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    1c48:	1c28      	adds	r0, r5, #0
    1c4a:	2108      	movs	r1, #8
    1c4c:	4b0e      	ldr	r3, [pc, #56]	; (1c88 <configure_rtc+0xcc>)
    1c4e:	4798      	blx	r3
}
    1c50:	b007      	add	sp, #28
    1c52:	bc3c      	pop	{r2, r3, r4, r5}
    1c54:	4690      	mov	r8, r2
    1c56:	4699      	mov	r9, r3
    1c58:	46a2      	mov	sl, r4
    1c5a:	46ab      	mov	fp, r5
    1c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	20000cd0 	.word	0x20000cd0
    1c64:	000007df 	.word	0x000007df
    1c68:	00004245 	.word	0x00004245
    1c6c:	20000088 	.word	0x20000088
    1c70:	40002000 	.word	0x40002000
    1c74:	00000e01 	.word	0x00000e01
    1c78:	00000ce1 	.word	0x00000ce1
    1c7c:	00000da1 	.word	0x00000da1
    1c80:	00001ab9 	.word	0x00001ab9
    1c84:	00000e6d 	.word	0x00000e6d
    1c88:	00000e8d 	.word	0x00000e8d

00001c8c <configure_i2c>:
/* @brief I2C configuration function for SAM L21
/* @params none
/* @returns none
/************************************************************************/
void configure_i2c(void)
{	
    1c8c:	b510      	push	{r4, lr}
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1c8e:	4a1e      	ldr	r2, [pc, #120]	; (1d08 <configure_i2c+0x7c>)
    1c90:	2364      	movs	r3, #100	; 0x64
    1c92:	6013      	str	r3, [r2, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1c94:	4b1d      	ldr	r3, [pc, #116]	; (1d0c <configure_i2c+0x80>)
    1c96:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1c98:	2300      	movs	r3, #0
    1c9a:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1c9c:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1c9e:	2180      	movs	r1, #128	; 0x80
    1ca0:	0389      	lsls	r1, r1, #14
    1ca2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    1ca4:	2101      	movs	r1, #1
    1ca6:	4249      	negs	r1, r1
    1ca8:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    1caa:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1cac:	3125      	adds	r1, #37	; 0x25
    1cae:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1cb0:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1cb2:	3108      	adds	r1, #8
    1cb4:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1cb6:	3101      	adds	r1, #1
    1cb8:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    1cba:	3101      	adds	r1, #1
    1cbc:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1cbe:	33d7      	adds	r3, #215	; 0xd7
    1cc0:	8613      	strh	r3, [r2, #48]	; 0x30
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
	config_i2c_master.run_in_standby = true;
    1cc2:	3bd6      	subs	r3, #214	; 0xd6
    1cc4:	7613      	strb	r3, [r2, #24]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
	config_i2c_master.pinmux_pad0 =  PINMUX_PA22C_SERCOM3_PAD0;
    1cc6:	4b12      	ldr	r3, [pc, #72]	; (1d10 <configure_i2c+0x84>)
    1cc8:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 =  PINMUX_PA23C_SERCOM3_PAD1;
    1cca:	4b12      	ldr	r3, [pc, #72]	; (1d14 <configure_i2c+0x88>)
    1ccc:	6213      	str	r3, [r2, #32]
	
	/* Initialize and enable device with config */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    1cce:	4c12      	ldr	r4, [pc, #72]	; (1d18 <configure_i2c+0x8c>)
    1cd0:	1c20      	adds	r0, r4, #0
    1cd2:	4912      	ldr	r1, [pc, #72]	; (1d1c <configure_i2c+0x90>)
    1cd4:	4b12      	ldr	r3, [pc, #72]	; (1d20 <configure_i2c+0x94>)
    1cd6:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cd8:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1cda:	2107      	movs	r1, #7
    1cdc:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1cde:	4219      	tst	r1, r3
    1ce0:	d1fc      	bne.n	1cdc <configure_i2c+0x50>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1ce2:	6811      	ldr	r1, [r2, #0]
    1ce4:	2302      	movs	r3, #2
    1ce6:	430b      	orrs	r3, r1
    1ce8:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1cea:	4b0b      	ldr	r3, [pc, #44]	; (1d18 <configure_i2c+0x8c>)
    1cec:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    1cee:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1cf0:	2010      	movs	r0, #16
    1cf2:	e005      	b.n	1d00 <configure_i2c+0x74>
		timeout_counter++;
    1cf4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1cf6:	42a3      	cmp	r3, r4
    1cf8:	d302      	bcc.n	1d00 <configure_i2c+0x74>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1cfa:	2310      	movs	r3, #16
    1cfc:	8353      	strh	r3, [r2, #26]
    1cfe:	e002      	b.n	1d06 <configure_i2c+0x7a>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1d00:	8b51      	ldrh	r1, [r2, #26]
    1d02:	4201      	tst	r1, r0
    1d04:	d0f6      	beq.n	1cf4 <configure_i2c+0x68>
	i2c_master_enable(&i2c_master_instance);
	
}
    1d06:	bd10      	pop	{r4, pc}
    1d08:	20000d68 	.word	0x20000d68
    1d0c:	00000d48 	.word	0x00000d48
    1d10:	00160002 	.word	0x00160002
    1d14:	00170002 	.word	0x00170002
    1d18:	20000d5c 	.word	0x20000d5c
    1d1c:	42000c00 	.word	0x42000c00
    1d20:	00000f85 	.word	0x00000f85

00001d24 <configure_mag_sw_int>:
/* @brief magnetic switch interrupt configuration
/* @params [in] callback, pointer to function that gets called when the magnetic switch is triggered
/* @returns none
/************************************************************************/
void configure_mag_sw_int(void (*callback)(void))
{
    1d24:	b530      	push	{r4, r5, lr}
    1d26:	b083      	sub	sp, #12
    1d28:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d2a:	a901      	add	r1, sp, #4
    1d2c:	2500      	movs	r5, #0
    1d2e:	704d      	strb	r5, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1d30:	70cd      	strb	r5, [r1, #3]

	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = PINMUX_PA17A_EIC_EXTINT1;
    1d32:	700d      	strb	r5, [r1, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d34:	708d      	strb	r5, [r1, #2]
	
	system_pinmux_pin_set_config(PIN_PA17, &config_pinmux);
    1d36:	2011      	movs	r0, #17
    1d38:	4b1f      	ldr	r3, [pc, #124]	; (1db8 <configure_mag_sw_int+0x94>)
    1d3a:	4798      	blx	r3
	uint32_t pin_index = (gpio_pin % 32);

	if (mode == SYSTEM_PINMUX_PIN_SAMPLE_ONDEMAND) {
		port->CTRL.reg |= (1 << pin_index);
	} else {
		port->CTRL.reg &= ~(1 << pin_index);
    1d3c:	4a1f      	ldr	r2, [pc, #124]	; (1dbc <configure_mag_sw_int+0x98>)
    1d3e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1d40:	4b1f      	ldr	r3, [pc, #124]	; (1dc0 <configure_mag_sw_int+0x9c>)
    1d42:	400b      	ands	r3, r1
    1d44:	6253      	str	r3, [r2, #36]	; 0x24
	system_pinmux_pin_set_input_sample_mode(PIN_PA17, SYSTEM_PINMUX_PIN_SAMPLE_CONTINUOUS);
	
	// Disable the EIC so we can write regs
	REG_EIC_CTRLA = 0;
    1d46:	4b1f      	ldr	r3, [pc, #124]	; (1dc4 <configure_mag_sw_int+0xa0>)
    1d48:	701d      	strb	r5, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
    1d4a:	491f      	ldr	r1, [pc, #124]	; (1dc8 <configure_mag_sw_int+0xa4>)
    1d4c:	2202      	movs	r2, #2
    1d4e:	680b      	ldr	r3, [r1, #0]
    1d50:	421a      	tst	r2, r3
    1d52:	d1fc      	bne.n	1d4e <configure_mag_sw_int+0x2a>
	
	// Enable interrupts on EXTINT[1]
	REG_EIC_INTENSET |= 0x02;
    1d54:	4b1d      	ldr	r3, [pc, #116]	; (1dcc <configure_mag_sw_int+0xa8>)
    1d56:	681a      	ldr	r2, [r3, #0]
    1d58:	2102      	movs	r1, #2
    1d5a:	430a      	orrs	r2, r1
    1d5c:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_INTENSET & 0x02)) return;
    1d5e:	681b      	ldr	r3, [r3, #0]
    1d60:	4219      	tst	r1, r3
    1d62:	d027      	beq.n	1db4 <configure_mag_sw_int+0x90>
	
	// Turn filtering off and set detection for falling edge for EXTINT[1]
	REG_EIC_CONFIG0 &= ~0x80;
    1d64:	4b1a      	ldr	r3, [pc, #104]	; (1dd0 <configure_mag_sw_int+0xac>)
    1d66:	681a      	ldr	r2, [r3, #0]
    1d68:	317e      	adds	r1, #126	; 0x7e
    1d6a:	438a      	bics	r2, r1
    1d6c:	601a      	str	r2, [r3, #0]
	REG_EIC_CONFIG0 |= 0x20;
    1d6e:	681a      	ldr	r2, [r3, #0]
    1d70:	3960      	subs	r1, #96	; 0x60
    1d72:	430a      	orrs	r2, r1
    1d74:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_CONFIG0 & 0x20) && (REG_EIC_CONFIG0 & 0x80)) return;
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	4219      	tst	r1, r3
    1d7a:	d103      	bne.n	1d84 <configure_mag_sw_int+0x60>
    1d7c:	4b14      	ldr	r3, [pc, #80]	; (1dd0 <configure_mag_sw_int+0xac>)
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	061b      	lsls	r3, r3, #24
    1d82:	d417      	bmi.n	1db4 <configure_mag_sw_int+0x90>
	
	// Enable asynchronous interrupts for EXTINT[1]
	REG_EIC_ASYNCH |= 0x00000002;
    1d84:	4b13      	ldr	r3, [pc, #76]	; (1dd4 <configure_mag_sw_int+0xb0>)
    1d86:	681a      	ldr	r2, [r3, #0]
    1d88:	2102      	movs	r1, #2
    1d8a:	430a      	orrs	r2, r1
    1d8c:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_ASYNCH & 0x02)) return;
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	4219      	tst	r1, r3
    1d92:	d00f      	beq.n	1db4 <configure_mag_sw_int+0x90>
	
	// Enable the EIC
	REG_EIC_CTRLA = 0x02;
    1d94:	2202      	movs	r2, #2
    1d96:	4b0b      	ldr	r3, [pc, #44]	; (1dc4 <configure_mag_sw_int+0xa0>)
    1d98:	701a      	strb	r2, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
    1d9a:	490b      	ldr	r1, [pc, #44]	; (1dc8 <configure_mag_sw_int+0xa4>)
    1d9c:	680b      	ldr	r3, [r1, #0]
    1d9e:	421a      	tst	r2, r3
    1da0:	d1fc      	bne.n	1d9c <configure_mag_sw_int+0x78>
	if(!(REG_EIC_CTRLA & 0x02)) return;
    1da2:	4b08      	ldr	r3, [pc, #32]	; (1dc4 <configure_mag_sw_int+0xa0>)
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	079b      	lsls	r3, r3, #30
    1da8:	d504      	bpl.n	1db4 <configure_mag_sw_int+0x90>
	
	// Register the callback
	if(!(extint_register_callback(callback, 1, EXTINT_CALLBACK_TYPE_DETECT) == STATUS_OK)) return;
    1daa:	1c20      	adds	r0, r4, #0
    1dac:	2101      	movs	r1, #1
    1dae:	2200      	movs	r2, #0
    1db0:	4b09      	ldr	r3, [pc, #36]	; (1dd8 <configure_mag_sw_int+0xb4>)
    1db2:	4798      	blx	r3

}
    1db4:	b003      	add	sp, #12
    1db6:	bd30      	pop	{r4, r5, pc}
    1db8:	00003c71 	.word	0x00003c71
    1dbc:	40002800 	.word	0x40002800
    1dc0:	fffdffff 	.word	0xfffdffff
    1dc4:	40002400 	.word	0x40002400
    1dc8:	40002404 	.word	0x40002404
    1dcc:	40002410 	.word	0x40002410
    1dd0:	4000241c 	.word	0x4000241c
    1dd4:	40002418 	.word	0x40002418
    1dd8:	000033dd 	.word	0x000033dd

00001ddc <offload_data>:
/* data to off-chip memory
/* @params none
/* @returns none
/************************************************************************/
void offload_data(void)
{
    1ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dde:	465f      	mov	r7, fp
    1de0:	4656      	mov	r6, sl
    1de2:	464d      	mov	r5, r9
    1de4:	4644      	mov	r4, r8
    1de6:	b4f0      	push	{r4, r5, r6, r7}
    1de8:	b083      	sub	sp, #12
	uint8_t header[3] = {ucTemperatureArrayPtr + 1, uiAccelerometerMatrixPtr + 1, (7 << NIBBLE(1)) & 0x0F};
    1dea:	ab01      	add	r3, sp, #4
    1dec:	4a4b      	ldr	r2, [pc, #300]	; (1f1c <offload_data+0x140>)
    1dee:	7812      	ldrb	r2, [r2, #0]
    1df0:	3201      	adds	r2, #1
    1df2:	701a      	strb	r2, [r3, #0]
    1df4:	4a4a      	ldr	r2, [pc, #296]	; (1f20 <offload_data+0x144>)
    1df6:	8812      	ldrh	r2, [r2, #0]
    1df8:	3201      	adds	r2, #1
    1dfa:	705a      	strb	r2, [r3, #1]
    1dfc:	2200      	movs	r2, #0
    1dfe:	709a      	strb	r2, [r3, #2]
	// Write the header
	for(int i = 0; i < 3; i++)
    1e00:	2400      	movs	r4, #0
	{
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first dei
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    1e02:	4f48      	ldr	r7, [pc, #288]	; (1f24 <offload_data+0x148>)
			S70FL01_active_die++;
			S70FL01_active_die %= 2;
			S70FL01_address = 0;
    1e04:	1c3e      	adds	r6, r7, #0
	// Write the header
	for(int i = 0; i < 3; i++)
	{
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first dei
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    1e06:	4b48      	ldr	r3, [pc, #288]	; (1f28 <offload_data+0x14c>)
    1e08:	683a      	ldr	r2, [r7, #0]
    1e0a:	429a      	cmp	r2, r3
    1e0c:	d908      	bls.n	1e20 <offload_data+0x44>
			S70FL01_active_die++;
    1e0e:	4b47      	ldr	r3, [pc, #284]	; (1f2c <offload_data+0x150>)
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    1e14:	2201      	movs	r2, #1
    1e16:	4013      	ands	r3, r2
    1e18:	4a44      	ldr	r2, [pc, #272]	; (1f2c <offload_data+0x150>)
    1e1a:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    1e1c:	2300      	movs	r3, #0
    1e1e:	6033      	str	r3, [r6, #0]
		}
		S70FL01_verified_write(header[i], S70FL01_active_die, S70FL01_address++);
    1e20:	ab01      	add	r3, sp, #4
    1e22:	5ce0      	ldrb	r0, [r4, r3]
    1e24:	4b41      	ldr	r3, [pc, #260]	; (1f2c <offload_data+0x150>)
    1e26:	7819      	ldrb	r1, [r3, #0]
    1e28:	4b3e      	ldr	r3, [pc, #248]	; (1f24 <offload_data+0x148>)
    1e2a:	681a      	ldr	r2, [r3, #0]
    1e2c:	1c55      	adds	r5, r2, #1
    1e2e:	601d      	str	r5, [r3, #0]
    1e30:	4b3f      	ldr	r3, [pc, #252]	; (1f30 <offload_data+0x154>)
    1e32:	4798      	blx	r3
/************************************************************************/
void offload_data(void)
{
	uint8_t header[3] = {ucTemperatureArrayPtr + 1, uiAccelerometerMatrixPtr + 1, (7 << NIBBLE(1)) & 0x0F};
	// Write the header
	for(int i = 0; i < 3; i++)
    1e34:	3401      	adds	r4, #1
    1e36:	2c03      	cmp	r4, #3
    1e38:	d1e5      	bne.n	1e06 <offload_data+0x2a>
		}
		S70FL01_verified_write(header[i], S70FL01_active_die, S70FL01_address++);
	}
	
	// Write the actual data
	for(int i = 1; i < ucTemperatureArrayPtr; i++){
    1e3a:	4b38      	ldr	r3, [pc, #224]	; (1f1c <offload_data+0x140>)
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	2b01      	cmp	r3, #1
    1e40:	dd25      	ble.n	1e8e <offload_data+0xb2>
    1e42:	4c3c      	ldr	r4, [pc, #240]	; (1f34 <offload_data+0x158>)
    1e44:	2501      	movs	r5, #1
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    1e46:	4f37      	ldr	r7, [pc, #220]	; (1f24 <offload_data+0x148>)
			S70FL01_active_die++;
			S70FL01_active_die %= 2;
    1e48:	4b38      	ldr	r3, [pc, #224]	; (1f2c <offload_data+0x150>)
    1e4a:	4699      	mov	r9, r3
			S70FL01_address = 0;
    1e4c:	46b8      	mov	r8, r7
	
	// Write the actual data
	for(int i = 1; i < ucTemperatureArrayPtr; i++){
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    1e4e:	4b36      	ldr	r3, [pc, #216]	; (1f28 <offload_data+0x14c>)
    1e50:	683a      	ldr	r2, [r7, #0]
    1e52:	429a      	cmp	r2, r3
    1e54:	d909      	bls.n	1e6a <offload_data+0x8e>
			S70FL01_active_die++;
    1e56:	464b      	mov	r3, r9
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    1e5c:	2201      	movs	r2, #1
    1e5e:	4013      	ands	r3, r2
    1e60:	464a      	mov	r2, r9
    1e62:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    1e64:	2300      	movs	r3, #0
    1e66:	4642      	mov	r2, r8
    1e68:	6013      	str	r3, [r2, #0]
		}
		// The temperature values are delta encoded to 8 bits
		S70FL01_verified_write((uiTemperatureArray[i] - uiTemperatureArray[i-1]) & 0xFF, S70FL01_active_die, S70FL01_address++);
    1e6a:	8863      	ldrh	r3, [r4, #2]
    1e6c:	8820      	ldrh	r0, [r4, #0]
    1e6e:	1a18      	subs	r0, r3, r0
    1e70:	b2c0      	uxtb	r0, r0
    1e72:	4b2e      	ldr	r3, [pc, #184]	; (1f2c <offload_data+0x150>)
    1e74:	7819      	ldrb	r1, [r3, #0]
    1e76:	4b2b      	ldr	r3, [pc, #172]	; (1f24 <offload_data+0x148>)
    1e78:	681a      	ldr	r2, [r3, #0]
    1e7a:	1c56      	adds	r6, r2, #1
    1e7c:	601e      	str	r6, [r3, #0]
    1e7e:	4b2c      	ldr	r3, [pc, #176]	; (1f30 <offload_data+0x154>)
    1e80:	4798      	blx	r3
		}
		S70FL01_verified_write(header[i], S70FL01_active_die, S70FL01_address++);
	}
	
	// Write the actual data
	for(int i = 1; i < ucTemperatureArrayPtr; i++){
    1e82:	3501      	adds	r5, #1
    1e84:	3402      	adds	r4, #2
    1e86:	4b25      	ldr	r3, [pc, #148]	; (1f1c <offload_data+0x140>)
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	42ab      	cmp	r3, r5
    1e8c:	dcdf      	bgt.n	1e4e <offload_data+0x72>
			S70FL01_address = 0;
		}
		// The temperature values are delta encoded to 8 bits
		S70FL01_verified_write((uiTemperatureArray[i] - uiTemperatureArray[i-1]) & 0xFF, S70FL01_active_die, S70FL01_address++);
	}
	for(uint16_t i = 1; i < uiAccelerometerMatrixPtr; i++){
    1e8e:	4b24      	ldr	r3, [pc, #144]	; (1f20 <offload_data+0x144>)
    1e90:	2200      	movs	r2, #0
    1e92:	5e9a      	ldrsh	r2, [r3, r2]
    1e94:	2a01      	cmp	r2, #1
    1e96:	dd3a      	ble.n	1f0e <offload_data+0x132>
    1e98:	2501      	movs	r5, #1
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die
		if(S70FL01_address + 3 >= S70FL01_MAX_ADDR){
    1e9a:	4b22      	ldr	r3, [pc, #136]	; (1f24 <offload_data+0x148>)
    1e9c:	469b      	mov	fp, r3
			S70FL01_active_die++;
			S70FL01_active_die %= 2;
			S70FL01_address = 0;
    1e9e:	469a      	mov	sl, r3
		S70FL01_verified_write((uiTemperatureArray[i] - uiTemperatureArray[i-1]) & 0xFF, S70FL01_active_die, S70FL01_address++);
	}
	for(uint16_t i = 1; i < uiAccelerometerMatrixPtr; i++){
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die
		if(S70FL01_address + 3 >= S70FL01_MAX_ADDR){
    1ea0:	465b      	mov	r3, fp
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	3303      	adds	r3, #3
    1ea6:	4920      	ldr	r1, [pc, #128]	; (1f28 <offload_data+0x14c>)
    1ea8:	428b      	cmp	r3, r1
    1eaa:	d909      	bls.n	1ec0 <offload_data+0xe4>
			S70FL01_active_die++;
    1eac:	4b1f      	ldr	r3, [pc, #124]	; (1f2c <offload_data+0x150>)
    1eae:	781b      	ldrb	r3, [r3, #0]
    1eb0:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    1eb2:	2101      	movs	r1, #1
    1eb4:	400b      	ands	r3, r1
    1eb6:	491d      	ldr	r1, [pc, #116]	; (1f2c <offload_data+0x150>)
    1eb8:	700b      	strb	r3, [r1, #0]
			S70FL01_address = 0;
    1eba:	2300      	movs	r3, #0
    1ebc:	4651      	mov	r1, sl
    1ebe:	600b      	str	r3, [r1, #0]
		}
		// Only keep the lower 8 bits of the accelerometer data (this is around 12g which is more than a fighter jet.)
		S70FL01_verified_write(ucAccelerometerMatrix[uiAccelerometerMatrixPtr] & 0xFF, S70FL01_active_die, S70FL01_address++);
    1ec0:	4b1d      	ldr	r3, [pc, #116]	; (1f38 <offload_data+0x15c>)
    1ec2:	4699      	mov	r9, r3
    1ec4:	5c98      	ldrb	r0, [r3, r2]
    1ec6:	4b19      	ldr	r3, [pc, #100]	; (1f2c <offload_data+0x150>)
    1ec8:	4698      	mov	r8, r3
    1eca:	7819      	ldrb	r1, [r3, #0]
    1ecc:	4c15      	ldr	r4, [pc, #84]	; (1f24 <offload_data+0x148>)
    1ece:	6822      	ldr	r2, [r4, #0]
    1ed0:	1c53      	adds	r3, r2, #1
    1ed2:	6023      	str	r3, [r4, #0]
    1ed4:	4f16      	ldr	r7, [pc, #88]	; (1f30 <offload_data+0x154>)
    1ed6:	47b8      	blx	r7
		S70FL01_verified_write(ucAccelerometerMatrix[uiAccelerometerMatrixPtr+1] & 0xFF, S70FL01_active_die, S70FL01_address++);
    1ed8:	4e11      	ldr	r6, [pc, #68]	; (1f20 <offload_data+0x144>)
    1eda:	2200      	movs	r2, #0
    1edc:	5eb3      	ldrsh	r3, [r6, r2]
    1ede:	444b      	add	r3, r9
    1ee0:	7858      	ldrb	r0, [r3, #1]
    1ee2:	4643      	mov	r3, r8
    1ee4:	7819      	ldrb	r1, [r3, #0]
    1ee6:	6822      	ldr	r2, [r4, #0]
    1ee8:	1c53      	adds	r3, r2, #1
    1eea:	6023      	str	r3, [r4, #0]
    1eec:	47b8      	blx	r7
		S70FL01_verified_write(ucAccelerometerMatrix[uiAccelerometerMatrixPtr+2] & 0xFF, S70FL01_active_die, S70FL01_address++);
    1eee:	2200      	movs	r2, #0
    1ef0:	5eb3      	ldrsh	r3, [r6, r2]
    1ef2:	444b      	add	r3, r9
    1ef4:	7898      	ldrb	r0, [r3, #2]
    1ef6:	4643      	mov	r3, r8
    1ef8:	7819      	ldrb	r1, [r3, #0]
    1efa:	6822      	ldr	r2, [r4, #0]
    1efc:	1c53      	adds	r3, r2, #1
    1efe:	6023      	str	r3, [r4, #0]
    1f00:	47b8      	blx	r7
			S70FL01_address = 0;
		}
		// The temperature values are delta encoded to 8 bits
		S70FL01_verified_write((uiTemperatureArray[i] - uiTemperatureArray[i-1]) & 0xFF, S70FL01_active_die, S70FL01_address++);
	}
	for(uint16_t i = 1; i < uiAccelerometerMatrixPtr; i++){
    1f02:	3501      	adds	r5, #1
    1f04:	b2ad      	uxth	r5, r5
    1f06:	2300      	movs	r3, #0
    1f08:	5ef2      	ldrsh	r2, [r6, r3]
    1f0a:	4295      	cmp	r5, r2
    1f0c:	dbc8      	blt.n	1ea0 <offload_data+0xc4>
		// Only keep the lower 8 bits of the accelerometer data (this is around 12g which is more than a fighter jet.)
		S70FL01_verified_write(ucAccelerometerMatrix[uiAccelerometerMatrixPtr] & 0xFF, S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucAccelerometerMatrix[uiAccelerometerMatrixPtr+1] & 0xFF, S70FL01_active_die, S70FL01_address++);
		S70FL01_verified_write(ucAccelerometerMatrix[uiAccelerometerMatrixPtr+2] & 0xFF, S70FL01_active_die, S70FL01_address++);
	}
}
    1f0e:	b003      	add	sp, #12
    1f10:	bc3c      	pop	{r2, r3, r4, r5}
    1f12:	4690      	mov	r8, r2
    1f14:	4699      	mov	r9, r3
    1f16:	46a2      	mov	sl, r4
    1f18:	46ab      	mov	fp, r5
    1f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f1c:	20000cda 	.word	0x20000cda
    1f20:	20000ccc 	.word	0x20000ccc
    1f24:	20000dcc 	.word	0x20000dcc
    1f28:	1fffffff 	.word	0x1fffffff
    1f2c:	20000cdc 	.word	0x20000cdc
    1f30:	00002239 	.word	0x00002239
    1f34:	20000de0 	.word	0x20000de0
    1f38:	200000cc 	.word	0x200000cc

00001f3c <configure_S70FL01>:
/* @params[in] die_cs, the die that should be configured in the S70FL01
/* @params[in] erase_chip, whether or not to erase the die upon config
/* @returns 0 if failure 1 if success
/************************************************************************/
uint8_t configure_S70FL01(uint8_t die_cs, bool erase_chip)
{
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	465f      	mov	r7, fp
    1f40:	4656      	mov	r6, sl
    1f42:	464d      	mov	r5, r9
    1f44:	4644      	mov	r4, r8
    1f46:	b4f0      	push	{r4, r5, r6, r7}
    1f48:	b093      	sub	sp, #76	; 0x4c
    1f4a:	1c04      	adds	r4, r0, #0
    1f4c:	9101      	str	r1, [sp, #4]
	S70FL01_active_die = 0;
    1f4e:	2700      	movs	r7, #0
    1f50:	4ba7      	ldr	r3, [pc, #668]	; (21f0 <STACK_SIZE+0x1f0>)
    1f52:	701f      	strb	r7, [r3, #0]
	S70FL01_address = 0;
    1f54:	4ba7      	ldr	r3, [pc, #668]	; (21f4 <STACK_SIZE+0x1f4>)
    1f56:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f58:	ad03      	add	r5, sp, #12
    1f5a:	2380      	movs	r3, #128	; 0x80
    1f5c:	702b      	strb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1f5e:	70ef      	strb	r7, [r5, #3]
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f60:	2601      	movs	r6, #1
    1f62:	706e      	strb	r6, [r5, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
    1f64:	3b7e      	subs	r3, #126	; 0x7e
    1f66:	70ab      	strb	r3, [r5, #2]

	// Setup Enable -- Disable the chip while configuring.
	system_pinmux_pin_set_config(S70FL01_EN, &config_pinmux);
    1f68:	2012      	movs	r0, #18
    1f6a:	1c29      	adds	r1, r5, #0
    1f6c:	4ba2      	ldr	r3, [pc, #648]	; (21f8 <STACK_SIZE+0x1f8>)
    1f6e:	469a      	mov	sl, r3
    1f70:	4798      	blx	r3
    1f72:	4ba2      	ldr	r3, [pc, #648]	; (21fc <STACK_SIZE+0x1fc>)
    1f74:	4699      	mov	r9, r3
    1f76:	2380      	movs	r3, #128	; 0x80
    1f78:	02db      	lsls	r3, r3, #11
    1f7a:	464a      	mov	r2, r9
    1f7c:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(S70FL01_EN, false);

	// Setup CS1#
	system_pinmux_pin_set_config(S70FL01_CS1, &config_pinmux);
    1f7e:	2005      	movs	r0, #5
    1f80:	1c29      	adds	r1, r5, #0
    1f82:	47d0      	blx	sl
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1f84:	2310      	movs	r3, #16
    1f86:	469b      	mov	fp, r3
    1f88:	464b      	mov	r3, r9
    1f8a:	465a      	mov	r2, fp
    1f8c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(S70FL01_CS2, true);
	
	// Setup CS2#
	system_pinmux_pin_set_config(S70FL01_CS2, &config_pinmux);
    1f8e:	2004      	movs	r0, #4
    1f90:	1c29      	adds	r1, r5, #0
    1f92:	47d0      	blx	sl
    1f94:	464b      	mov	r3, r9
    1f96:	465a      	mov	r2, fp
    1f98:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1f9a:	4d99      	ldr	r5, [pc, #612]	; (2200 <STACK_SIZE+0x200>)
    1f9c:	702c      	strb	r4, [r5, #0]
	slave->address_enabled = config->address_enabled;
    1f9e:	706f      	strb	r7, [r5, #1]
	slave->address         = config->address;
    1fa0:	70af      	strb	r7, [r5, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1fa2:	ab02      	add	r3, sp, #8
    1fa4:	705e      	strb	r6, [r3, #1]
	config->powersave  = false;
    1fa6:	709f      	strb	r7, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1fa8:	701e      	strb	r6, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1faa:	1c20      	adds	r0, r4, #0
    1fac:	1c19      	adds	r1, r3, #0
    1fae:	4b95      	ldr	r3, [pc, #596]	; (2204 <STACK_SIZE+0x204>)
    1fb0:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1fb2:	782b      	ldrb	r3, [r5, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1fb4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1fb6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1fb8:	2900      	cmp	r1, #0
    1fba:	d102      	bne.n	1fc2 <configure_S70FL01+0x86>
		return &(ports[port_index]->Group[group_index]);
    1fbc:	095a      	lsrs	r2, r3, #5
    1fbe:	01d2      	lsls	r2, r2, #7
    1fc0:	444a      	add	r2, r9
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1fc2:	211f      	movs	r1, #31
    1fc4:	400b      	ands	r3, r1
    1fc6:	391e      	subs	r1, #30
    1fc8:	1c08      	adds	r0, r1, #0
    1fca:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1fcc:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1fce:	aa04      	add	r2, sp, #16
    1fd0:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1fd2:	2300      	movs	r3, #0
    1fd4:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1fd6:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1fd8:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    1fda:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    1fdc:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1fde:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1fe0:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1fe2:	930b      	str	r3, [sp, #44]	; 0x2c
    1fe4:	930c      	str	r3, [sp, #48]	; 0x30
	spi_attach_slave(&slave, &slave_dev_config);
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.run_in_standby = false;
	config_spi_master.mode_specific.master.baudrate = 10000UL;
    1fe6:	4b88      	ldr	r3, [pc, #544]	; (2208 <STACK_SIZE+0x208>)
    1fe8:	6193      	str	r3, [r2, #24]
	config_spi_master.character_size = SPI_CHARACTER_SIZE_8BIT;
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
	config_spi_master.mode = SPI_MODE_MASTER;
	config_spi_master.receiver_enable = true;
	config_spi_master.master_slave_select_enable = false;
	config_spi_master.generator_source = GCLK_GENERATOR_1;
    1fea:	2324      	movs	r3, #36	; 0x24
    1fec:	54d1      	strb	r1, [r2, r3]
	/** SPI MUX combination F. DOPO: 0x1 => SCK=PAD3, MOSI=PAD2, DIPO: 0x1 => MISO=PAD1 */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_F;
    1fee:	2388      	movs	r3, #136	; 0x88
    1ff0:	035b      	lsls	r3, r3, #13
    1ff2:	60d3      	str	r3, [r2, #12]
	/* Configure pad 0 as unused */
	config_spi_master.pinmux_pad0 = PINMUX_UNUSED;
    1ff4:	2301      	movs	r3, #1
    1ff6:	425b      	negs	r3, r3
    1ff8:	6293      	str	r3, [r2, #40]	; 0x28
	/* Configure pad 1 as data out */
	config_spi_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    1ffa:	4b84      	ldr	r3, [pc, #528]	; (220c <STACK_SIZE+0x20c>)
    1ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* Configure pad 2 for data in */
	config_spi_master.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2;
    1ffe:	4b84      	ldr	r3, [pc, #528]	; (2210 <STACK_SIZE+0x210>)
    2000:	6313      	str	r3, [r2, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3;
    2002:	4b84      	ldr	r3, [pc, #528]	; (2214 <STACK_SIZE+0x214>)
    2004:	6353      	str	r3, [r2, #52]	; 0x34
	
	spi_init(&spi_master_instance, SERCOM2, &config_spi_master);
    2006:	4d84      	ldr	r5, [pc, #528]	; (2218 <STACK_SIZE+0x218>)
    2008:	1c28      	adds	r0, r5, #0
    200a:	4984      	ldr	r1, [pc, #528]	; (221c <STACK_SIZE+0x21c>)
    200c:	4b84      	ldr	r3, [pc, #528]	; (2220 <STACK_SIZE+0x220>)
    200e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2010:	682a      	ldr	r2, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2012:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2014:	2b00      	cmp	r3, #0
    2016:	d1fc      	bne.n	2012 <STACK_SIZE+0x12>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2018:	6811      	ldr	r1, [r2, #0]
    201a:	3302      	adds	r3, #2
    201c:	430b      	orrs	r3, r1
    201e:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
	spi_enabled = true;
    2020:	2201      	movs	r2, #1
    2022:	4b80      	ldr	r3, [pc, #512]	; (2224 <STACK_SIZE+0x224>)
    2024:	701a      	strb	r2, [r3, #0]
    2026:	4b80      	ldr	r3, [pc, #512]	; (2228 <STACK_SIZE+0x228>)
    2028:	1c1e      	adds	r6, r3, #0
    202a:	3614      	adds	r6, #20
	
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
		rxBuffer[i] = 0;
    202c:	2200      	movs	r2, #0
    202e:	701a      	strb	r2, [r3, #0]
    2030:	3301      	adds	r3, #1
	spi_init(&spi_master_instance, SERCOM2, &config_spi_master);
	spi_enable(&spi_master_instance);
	spi_enabled = true;
	
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
    2032:	42b3      	cmp	r3, r6
    2034:	d1fb      	bne.n	202e <STACK_SIZE+0x2e>
    2036:	2280      	movs	r2, #128	; 0x80
    2038:	02d2      	lsls	r2, r2, #11
    203a:	4b70      	ldr	r3, [pc, #448]	; (21fc <STACK_SIZE+0x1fc>)
    203c:	619a      	str	r2, [r3, #24]
    203e:	4b7b      	ldr	r3, [pc, #492]	; (222c <STACK_SIZE+0x22c>)
    2040:	3b01      	subs	r3, #1
		rxBuffer[i] = 0;
	}
	
	// Enable the chip now that its configured
	port_pin_set_output_level(S70FL01_EN, true);
	for(int i = 0; i < 65535; i++);
    2042:	2b00      	cmp	r3, #0
    2044:	d1fc      	bne.n	2040 <STACK_SIZE+0x40>
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    2046:	09e3      	lsrs	r3, r4, #7
    2048:	4698      	mov	r8, r3
	uint8_t group_index = (gpio_pin / 32);
    204a:	0963      	lsrs	r3, r4, #5
    204c:	4699      	mov	r9, r3

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    204e:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2050:	4642      	mov	r2, r8
    2052:	2a00      	cmp	r2, #0
    2054:	d104      	bne.n	2060 <STACK_SIZE+0x60>
		return &(ports[port_index]->Group[group_index]);
    2056:	464b      	mov	r3, r9
    2058:	01db      	lsls	r3, r3, #7
    205a:	4a68      	ldr	r2, [pc, #416]	; (21fc <STACK_SIZE+0x1fc>)
    205c:	4694      	mov	ip, r2
    205e:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2060:	271f      	movs	r7, #31
    2062:	403c      	ands	r4, r7
    2064:	3f1e      	subs	r7, #30
    2066:	40a7      	lsls	r7, r4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2068:	615f      	str	r7, [r3, #20]
    206a:	23fa      	movs	r3, #250	; 0xfa
    206c:	009b      	lsls	r3, r3, #2
    206e:	3b01      	subs	r3, #1
	
	// Select chip
	port_pin_set_output_level(die_cs, false);
	for(int i = 0; i < 1000; i++);
    2070:	2b00      	cmp	r3, #0
    2072:	d1fc      	bne.n	206e <STACK_SIZE+0x6e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2074:	4b68      	ldr	r3, [pc, #416]	; (2218 <STACK_SIZE+0x218>)
    2076:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2078:	2101      	movs	r1, #1
    207a:	7e1a      	ldrb	r2, [r3, #24]
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    207c:	420a      	tst	r2, r1
    207e:	d0fc      	beq.n	207a <STACK_SIZE+0x7a>
    2080:	2101      	movs	r1, #1
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDID)) != STATUS_OK);
    2082:	2005      	movs	r0, #5
    2084:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2086:	420a      	tst	r2, r1
    2088:	d100      	bne.n	208c <STACK_SIZE+0x8c>
    208a:	e0a7      	b.n	21dc <STACK_SIZE+0x1dc>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    208c:	229f      	movs	r2, #159	; 0x9f
    208e:	629a      	str	r2, [r3, #40]	; 0x28
    2090:	2100      	movs	r1, #0
    2092:	4a67      	ldr	r2, [pc, #412]	; (2230 <STACK_SIZE+0x230>)
    2094:	7011      	strb	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2096:	3104      	adds	r1, #4
    2098:	7e1a      	ldrb	r2, [r3, #24]
	// Read back the contents of the shift reg
	while(!spi_is_ready_to_read(&spi_master_instance));
    209a:	420a      	tst	r2, r1
    209c:	d0fc      	beq.n	2098 <STACK_SIZE+0x98>
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
    209e:	4d5e      	ldr	r5, [pc, #376]	; (2218 <STACK_SIZE+0x218>)
    20a0:	4c64      	ldr	r4, [pc, #400]	; (2234 <STACK_SIZE+0x234>)
    20a2:	1c28      	adds	r0, r5, #0
    20a4:	4960      	ldr	r1, [pc, #384]	; (2228 <STACK_SIZE+0x228>)
    20a6:	2214      	movs	r2, #20
    20a8:	23ff      	movs	r3, #255	; 0xff
    20aa:	47a0      	blx	r4
    20ac:	4b60      	ldr	r3, [pc, #384]	; (2230 <STACK_SIZE+0x230>)
    20ae:	7018      	strb	r0, [r3, #0]
    20b0:	2800      	cmp	r0, #0
    20b2:	d1f6      	bne.n	20a2 <STACK_SIZE+0xa2>
	
	// See if we got anything back. If not, then just return
	for(int i = 0; i < 20; i++){
		if(rxBuffer[i]){
    20b4:	4b5c      	ldr	r3, [pc, #368]	; (2228 <STACK_SIZE+0x228>)
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d119      	bne.n	20f0 <STACK_SIZE+0xf0>
    20bc:	4a5a      	ldr	r2, [pc, #360]	; (2228 <STACK_SIZE+0x228>)
    20be:	1c53      	adds	r3, r2, #1
    20c0:	3213      	adds	r2, #19
    20c2:	7818      	ldrb	r0, [r3, #0]
    20c4:	2800      	cmp	r0, #0
    20c6:	d113      	bne.n	20f0 <STACK_SIZE+0xf0>
			break;
			}else if(i == 19){
    20c8:	4293      	cmp	r3, r2
    20ca:	d10e      	bne.n	20ea <STACK_SIZE+0xea>
	} else {
		Assert(false);
		return NULL;
    20cc:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    20ce:	4642      	mov	r2, r8
    20d0:	2a00      	cmp	r2, #0
    20d2:	d104      	bne.n	20de <STACK_SIZE+0xde>
		return &(ports[port_index]->Group[group_index]);
    20d4:	464b      	mov	r3, r9
    20d6:	01db      	lsls	r3, r3, #7
    20d8:	4a48      	ldr	r2, [pc, #288]	; (21fc <STACK_SIZE+0x1fc>)
    20da:	4694      	mov	ip, r2
    20dc:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    20de:	619f      	str	r7, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    20e0:	2280      	movs	r2, #128	; 0x80
    20e2:	02d2      	lsls	r2, r2, #11
    20e4:	4b45      	ldr	r3, [pc, #276]	; (21fc <STACK_SIZE+0x1fc>)
    20e6:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(die_cs, true);
			port_pin_set_output_level(S70FL01_EN, false);
			return 0;
    20e8:	e07b      	b.n	21e2 <STACK_SIZE+0x1e2>
    20ea:	3301      	adds	r3, #1
	// Read back the contents of the shift reg
	while(!spi_is_ready_to_read(&spi_master_instance));
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
	
	// See if we got anything back. If not, then just return
	for(int i = 0; i < 20; i++){
    20ec:	429e      	cmp	r6, r3
    20ee:	d1e8      	bne.n	20c2 <STACK_SIZE+0xc2>
			port_pin_set_output_level(die_cs, true);
			port_pin_set_output_level(S70FL01_EN, false);
			return 0;
		}
	}
	rxBuffer[0] = 0;
    20f0:	2200      	movs	r2, #0
    20f2:	4b4d      	ldr	r3, [pc, #308]	; (2228 <STACK_SIZE+0x228>)
    20f4:	701a      	strb	r2, [r3, #0]
    20f6:	2364      	movs	r3, #100	; 0x64
    20f8:	3b01      	subs	r3, #1
	
	// We need to delay because the GPIO is faster than the serial out 100 is sufficient for 1 byte
	// Then give it a second to stabilize
	for(int i = 0; i < 100; i++);
    20fa:	2b00      	cmp	r3, #0
    20fc:	d1fc      	bne.n	20f8 <STACK_SIZE+0xf8>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    20fe:	4642      	mov	r2, r8
    2100:	2a00      	cmp	r2, #0
    2102:	d104      	bne.n	210e <STACK_SIZE+0x10e>
		return &(ports[port_index]->Group[group_index]);
    2104:	464b      	mov	r3, r9
    2106:	01db      	lsls	r3, r3, #7
    2108:	4a3c      	ldr	r2, [pc, #240]	; (21fc <STACK_SIZE+0x1fc>)
    210a:	4694      	mov	ip, r2
    210c:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    210e:	619f      	str	r7, [r3, #24]
    2110:	2364      	movs	r3, #100	; 0x64
    2112:	3b01      	subs	r3, #1
	port_pin_set_output_level(die_cs, true);
	for(int i = 0; i < 100; i++);
    2114:	2b00      	cmp	r3, #0
    2116:	d1fc      	bne.n	2112 <STACK_SIZE+0x112>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2118:	4642      	mov	r2, r8
    211a:	2a00      	cmp	r2, #0
    211c:	d104      	bne.n	2128 <STACK_SIZE+0x128>
		return &(ports[port_index]->Group[group_index]);
    211e:	464b      	mov	r3, r9
    2120:	01db      	lsls	r3, r3, #7
    2122:	4a36      	ldr	r2, [pc, #216]	; (21fc <STACK_SIZE+0x1fc>)
    2124:	4694      	mov	ip, r2
    2126:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2128:	615f      	str	r7, [r3, #20]
    212a:	2364      	movs	r3, #100	; 0x64
    212c:	3b01      	subs	r3, #1
	port_pin_set_output_level(die_cs, false);
	for(int i = 0; i < 100; i++);
    212e:	2b00      	cmp	r3, #0
    2130:	d1fc      	bne.n	212c <STACK_SIZE+0x12c>
	
	if(erase_chip){
    2132:	9b01      	ldr	r3, [sp, #4]
    2134:	2b00      	cmp	r3, #0
    2136:	d02d      	beq.n	2194 <STACK_SIZE+0x194>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2138:	4b37      	ldr	r3, [pc, #220]	; (2218 <STACK_SIZE+0x218>)
    213a:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    213c:	2101      	movs	r1, #1
    213e:	7e1a      	ldrb	r2, [r3, #24]
		// Wait for the module to be ready
		while(!spi_is_ready_to_write(&spi_master_instance));
    2140:	420a      	tst	r2, r1
    2142:	d0fc      	beq.n	213e <STACK_SIZE+0x13e>
    2144:	2201      	movs	r2, #1
    2146:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2148:	4211      	tst	r1, r2
    214a:	d0fc      	beq.n	2146 <STACK_SIZE+0x146>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    214c:	22c7      	movs	r2, #199	; 0xc7
    214e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2150:	2101      	movs	r1, #1
    2152:	7e1a      	ldrb	r2, [r3, #24]
		// Set reg to erase entire array
		while(spi_write(&spi_master_instance, S70FL01_BE) != STATUS_OK);
		
		// Wait until the erase completes (Status Reg 0x01)
		// Wait for the module to be ready
		while(!spi_is_ready_to_write(&spi_master_instance));
    2154:	420a      	tst	r2, r1
    2156:	d0fc      	beq.n	2152 <STACK_SIZE+0x152>
    2158:	2201      	movs	r2, #1
    215a:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    215c:	4211      	tst	r1, r2
    215e:	d0fc      	beq.n	215a <STACK_SIZE+0x15a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2160:	2205      	movs	r2, #5
    2162:	629a      	str	r2, [r3, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2164:	4b2c      	ldr	r3, [pc, #176]	; (2218 <STACK_SIZE+0x218>)
    2166:	469a      	mov	sl, r3
		while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
		do{
			// Wait for the peripheral to be ready
			while(!spi_is_ready_to_read(&spi_master_instance));
			// Read back the contents of the shift reg
			while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 1, 0xFF)) != STATUS_OK);
    2168:	1c1d      	adds	r5, r3, #0
    216a:	4c2f      	ldr	r4, [pc, #188]	; (2228 <STACK_SIZE+0x228>)
    216c:	4653      	mov	r3, sl
    216e:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2170:	2204      	movs	r2, #4
    2172:	7e0b      	ldrb	r3, [r1, #24]
		while(!spi_is_ready_to_write(&spi_master_instance));
		// Write the buffer to read back written data
		while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
		do{
			// Wait for the peripheral to be ready
			while(!spi_is_ready_to_read(&spi_master_instance));
    2174:	4213      	tst	r3, r2
    2176:	d0fc      	beq.n	2172 <STACK_SIZE+0x172>
			// Read back the contents of the shift reg
			while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 1, 0xFF)) != STATUS_OK);
    2178:	4e2e      	ldr	r6, [pc, #184]	; (2234 <STACK_SIZE+0x234>)
    217a:	1c28      	adds	r0, r5, #0
    217c:	1c21      	adds	r1, r4, #0
    217e:	2201      	movs	r2, #1
    2180:	23ff      	movs	r3, #255	; 0xff
    2182:	47b0      	blx	r6
    2184:	4b2a      	ldr	r3, [pc, #168]	; (2230 <STACK_SIZE+0x230>)
    2186:	7018      	strb	r0, [r3, #0]
    2188:	2800      	cmp	r0, #0
    218a:	d1f6      	bne.n	217a <STACK_SIZE+0x17a>
		}while(rxBuffer[0] & 0x01);
    218c:	4b26      	ldr	r3, [pc, #152]	; (2228 <STACK_SIZE+0x228>)
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	07db      	lsls	r3, r3, #31
    2192:	d4eb      	bmi.n	216c <STACK_SIZE+0x16c>
    2194:	4b25      	ldr	r3, [pc, #148]	; (222c <STACK_SIZE+0x22c>)
    2196:	3b01      	subs	r3, #1
	}
	// We need to delay because the GPIO is faster than the serial out 100 is sufficient for 1 byte => we have no idea how long this may take so max it out
	for(int i = 0; i < 65535; i++);
    2198:	2b00      	cmp	r3, #0
    219a:	d1fc      	bne.n	2196 <STACK_SIZE+0x196>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    219c:	4642      	mov	r2, r8
    219e:	2a00      	cmp	r2, #0
    21a0:	d104      	bne.n	21ac <STACK_SIZE+0x1ac>
		return &(ports[port_index]->Group[group_index]);
    21a2:	464b      	mov	r3, r9
    21a4:	01db      	lsls	r3, r3, #7
    21a6:	4a15      	ldr	r2, [pc, #84]	; (21fc <STACK_SIZE+0x1fc>)
    21a8:	4694      	mov	ip, r2
    21aa:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    21ac:	619f      	str	r7, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21ae:	2280      	movs	r2, #128	; 0x80
    21b0:	02d2      	lsls	r2, r2, #11
    21b2:	4b12      	ldr	r3, [pc, #72]	; (21fc <STACK_SIZE+0x1fc>)
    21b4:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21b6:	4b18      	ldr	r3, [pc, #96]	; (2218 <STACK_SIZE+0x218>)
    21b8:	681a      	ldr	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    21ba:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    21bc:	2b00      	cmp	r3, #0
    21be:	d1fc      	bne.n	21ba <STACK_SIZE+0x1ba>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    21c0:	6813      	ldr	r3, [r2, #0]
    21c2:	2102      	movs	r1, #2
    21c4:	438b      	bics	r3, r1
    21c6:	6013      	str	r3, [r2, #0]
	port_pin_set_output_level(die_cs, true);
	port_pin_set_output_level(S70FL01_EN, false);
	spi_disable(&spi_master_instance);
	spi_enabled = false;
    21c8:	2300      	movs	r3, #0
    21ca:	4a16      	ldr	r2, [pc, #88]	; (2224 <STACK_SIZE+0x224>)
    21cc:	7013      	strb	r3, [r2, #0]
	S70FL01_active_die = S70FL01_CS1;
    21ce:	3103      	adds	r1, #3
    21d0:	4a07      	ldr	r2, [pc, #28]	; (21f0 <STACK_SIZE+0x1f0>)
    21d2:	7011      	strb	r1, [r2, #0]
	S70FL01_address = 0;
    21d4:	4a07      	ldr	r2, [pc, #28]	; (21f4 <STACK_SIZE+0x1f4>)
    21d6:	6013      	str	r3, [r2, #0]
	return 1;
    21d8:	2001      	movs	r0, #1
    21da:	e002      	b.n	21e2 <STACK_SIZE+0x1e2>
	for(int i = 0; i < 1000; i++);
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDID)) != STATUS_OK);
    21dc:	4a14      	ldr	r2, [pc, #80]	; (2230 <STACK_SIZE+0x230>)
    21de:	7010      	strb	r0, [r2, #0]
    21e0:	e750      	b.n	2084 <STACK_SIZE+0x84>
	spi_enabled = false;
	S70FL01_active_die = S70FL01_CS1;
	S70FL01_address = 0;
	return 1;
	
}
    21e2:	b013      	add	sp, #76	; 0x4c
    21e4:	bc3c      	pop	{r2, r3, r4, r5}
    21e6:	4690      	mov	r8, r2
    21e8:	4699      	mov	r9, r3
    21ea:	46a2      	mov	sl, r4
    21ec:	46ab      	mov	fp, r5
    21ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21f0:	20000cdc 	.word	0x20000cdc
    21f4:	20000dcc 	.word	0x20000dcc
    21f8:	00003c71 	.word	0x00003c71
    21fc:	40002800 	.word	0x40002800
    2200:	20000dc8 	.word	0x20000dc8
    2204:	00003471 	.word	0x00003471
    2208:	00002710 	.word	0x00002710
    220c:	00090003 	.word	0x00090003
    2210:	000a0003 	.word	0x000a0003
    2214:	000b0003 	.word	0x000b0003
    2218:	20000dbc 	.word	0x20000dbc
    221c:	42000800 	.word	0x42000800
    2220:	0000298d 	.word	0x0000298d
    2224:	200000c8 	.word	0x200000c8
    2228:	20000050 	.word	0x20000050
    222c:	0000ffff 	.word	0x0000ffff
    2230:	20000ddc 	.word	0x20000ddc
    2234:	00002ce1 	.word	0x00002ce1

00002238 <S70FL01_verified_write>:
/* @params[in] die the die to write to in the memory module
/* @params[in] address the address to write to in the given die
/* @returns 0 if failure 1 if successful
/************************************************************************/
uint8_t S70FL01_verified_write(uint8_t byte, uint8_t die, uint32_t address)
{
    2238:	b5f0      	push	{r4, r5, r6, r7, lr}
    223a:	4657      	mov	r7, sl
    223c:	464e      	mov	r6, r9
    223e:	4645      	mov	r5, r8
    2240:	b4e0      	push	{r5, r6, r7}
    2242:	b088      	sub	sp, #32
    2244:	4680      	mov	r8, r0
	if(!spi_enabled)
    2246:	4bbc      	ldr	r3, [pc, #752]	; (2538 <S70FL01_verified_write+0x300>)
    2248:	781b      	ldrb	r3, [r3, #0]
    224a:	2b00      	cmp	r3, #0
    224c:	d10b      	bne.n	2266 <S70FL01_verified_write+0x2e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    224e:	4bbb      	ldr	r3, [pc, #748]	; (253c <S70FL01_verified_write+0x304>)
    2250:	6818      	ldr	r0, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2252:	69c3      	ldr	r3, [r0, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2254:	2b00      	cmp	r3, #0
    2256:	d1fc      	bne.n	2252 <S70FL01_verified_write+0x1a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2258:	6804      	ldr	r4, [r0, #0]
    225a:	3302      	adds	r3, #2
    225c:	4323      	orrs	r3, r4
    225e:	6003      	str	r3, [r0, #0]
	{
		spi_enable(&spi_master_instance);
		spi_enabled = true;
    2260:	2001      	movs	r0, #1
    2262:	4bb5      	ldr	r3, [pc, #724]	; (2538 <S70FL01_verified_write+0x300>)
    2264:	7018      	strb	r0, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2266:	2080      	movs	r0, #128	; 0x80
    2268:	02c0      	lsls	r0, r0, #11
    226a:	4bb5      	ldr	r3, [pc, #724]	; (2540 <S70FL01_verified_write+0x308>)
    226c:	6198      	str	r0, [r3, #24]
    226e:	4bb5      	ldr	r3, [pc, #724]	; (2544 <S70FL01_verified_write+0x30c>)
    2270:	3b01      	subs	r3, #1
	}
	// Enable the chip
	port_pin_set_output_level(S70FL01_EN, true);
	for(int i = 0; i < 65535; i++);
    2272:	2b00      	cmp	r3, #0
    2274:	d1fc      	bne.n	2270 <S70FL01_verified_write+0x38>
	
	uint8_t rxBuffer[20];
	uint8_t wrBuffer[5] = {S70FL01_PP, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF, byte};
    2276:	ab01      	add	r3, sp, #4
    2278:	2002      	movs	r0, #2
    227a:	7018      	strb	r0, [r3, #0]
    227c:	0c14      	lsrs	r4, r2, #16
    227e:	b2e4      	uxtb	r4, r4
    2280:	705c      	strb	r4, [r3, #1]
    2282:	0a10      	lsrs	r0, r2, #8
    2284:	b2c0      	uxtb	r0, r0
    2286:	7098      	strb	r0, [r3, #2]
    2288:	b2d2      	uxtb	r2, r2
    228a:	70da      	strb	r2, [r3, #3]
    228c:	4645      	mov	r5, r8
    228e:	711d      	strb	r5, [r3, #4]
	uint8_t vfyBuffer[4] = {S70FL01_READ, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF};
    2290:	2303      	movs	r3, #3
    2292:	466d      	mov	r5, sp
    2294:	702b      	strb	r3, [r5, #0]
    2296:	706c      	strb	r4, [r5, #1]
    2298:	70a8      	strb	r0, [r5, #2]
    229a:	70ea      	strb	r2, [r5, #3]
    229c:	ab03      	add	r3, sp, #12
    229e:	a808      	add	r0, sp, #32
		
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
		rxBuffer[i] = 0;
    22a0:	2200      	movs	r2, #0
    22a2:	701a      	strb	r2, [r3, #0]
    22a4:	3301      	adds	r3, #1
	uint8_t rxBuffer[20];
	uint8_t wrBuffer[5] = {S70FL01_PP, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF, byte};
	uint8_t vfyBuffer[4] = {S70FL01_READ, (address>>16) & 0xFF, (address>>8) & 0xFF, (address>>0) & 0xFF};
		
	// Make sure our RXBuffer is empty
	for(int i = 0; i < 20; i++){
    22a6:	4283      	cmp	r3, r0
    22a8:	d1fb      	bne.n	22a2 <S70FL01_verified_write+0x6a>
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    22aa:	09ce      	lsrs	r6, r1, #7
	uint8_t group_index = (gpio_pin / 32);
    22ac:	094b      	lsrs	r3, r1, #5
    22ae:	4699      	mov	r9, r3

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    22b0:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22b2:	2e00      	cmp	r6, #0
    22b4:	d104      	bne.n	22c0 <S70FL01_verified_write+0x88>
		return &(ports[port_index]->Group[group_index]);
    22b6:	464b      	mov	r3, r9
    22b8:	01db      	lsls	r3, r3, #7
    22ba:	4aa1      	ldr	r2, [pc, #644]	; (2540 <S70FL01_verified_write+0x308>)
    22bc:	4694      	mov	ip, r2
    22be:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22c0:	251f      	movs	r5, #31
    22c2:	4029      	ands	r1, r5
    22c4:	3d1e      	subs	r5, #30
    22c6:	408d      	lsls	r5, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    22c8:	615d      	str	r5, [r3, #20]
    22ca:	23fa      	movs	r3, #250	; 0xfa
    22cc:	009b      	lsls	r3, r3, #2
    22ce:	3b01      	subs	r3, #1
		rxBuffer[i] = 0;
	}
	
	// Select chip
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 1000; i++);
    22d0:	2b00      	cmp	r3, #0
    22d2:	d1fc      	bne.n	22ce <S70FL01_verified_write+0x96>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22d4:	4b99      	ldr	r3, [pc, #612]	; (253c <S70FL01_verified_write+0x304>)
    22d6:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22d8:	2101      	movs	r1, #1
    22da:	7e13      	ldrb	r3, [r2, #24]
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    22dc:	420b      	tst	r3, r1
    22de:	d0fc      	beq.n	22da <S70FL01_verified_write+0xa2>
    22e0:	2101      	movs	r1, #1
    22e2:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    22e4:	420b      	tst	r3, r1
    22e6:	d0fc      	beq.n	22e2 <S70FL01_verified_write+0xaa>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    22e8:	2306      	movs	r3, #6
    22ea:	6293      	str	r3, [r2, #40]	; 0x28
    22ec:	23fa      	movs	r3, #250	; 0xfa
    22ee:	009b      	lsls	r3, r3, #2
    22f0:	3b01      	subs	r3, #1
	// Set WREN so we can write to memory
	while(spi_write(&spi_master_instance, S70FL01_WREN) != STATUS_OK);
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 1000; i++);
    22f2:	2b00      	cmp	r3, #0
    22f4:	d1fc      	bne.n	22f0 <S70FL01_verified_write+0xb8>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    22f6:	2e00      	cmp	r6, #0
    22f8:	d104      	bne.n	2304 <S70FL01_verified_write+0xcc>
		return &(ports[port_index]->Group[group_index]);
    22fa:	464b      	mov	r3, r9
    22fc:	01db      	lsls	r3, r3, #7
    22fe:	4990      	ldr	r1, [pc, #576]	; (2540 <S70FL01_verified_write+0x308>)
    2300:	468c      	mov	ip, r1
    2302:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2304:	619d      	str	r5, [r3, #24]
    2306:	2364      	movs	r3, #100	; 0x64
    2308:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    230a:	2b00      	cmp	r3, #0
    230c:	d1fc      	bne.n	2308 <S70FL01_verified_write+0xd0>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    230e:	2e00      	cmp	r6, #0
    2310:	d104      	bne.n	231c <S70FL01_verified_write+0xe4>
		return &(ports[port_index]->Group[group_index]);
    2312:	464b      	mov	r3, r9
    2314:	01db      	lsls	r3, r3, #7
    2316:	498a      	ldr	r1, [pc, #552]	; (2540 <S70FL01_verified_write+0x308>)
    2318:	468c      	mov	ip, r1
    231a:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    231c:	615d      	str	r5, [r3, #20]
    231e:	23fa      	movs	r3, #250	; 0xfa
    2320:	005b      	lsls	r3, r3, #1
    2322:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    2324:	2b00      	cmp	r3, #0
    2326:	d1fc      	bne.n	2322 <S70FL01_verified_write+0xea>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2328:	2101      	movs	r1, #1
    232a:	7e13      	ldrb	r3, [r2, #24]
	
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    232c:	420b      	tst	r3, r1
    232e:	d0fc      	beq.n	232a <S70FL01_verified_write+0xf2>
    2330:	2101      	movs	r1, #1
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDSR)) != STATUS_OK);
    2332:	2005      	movs	r0, #5
    2334:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2336:	420b      	tst	r3, r1
    2338:	d100      	bne.n	233c <S70FL01_verified_write+0x104>
    233a:	e0f4      	b.n	2526 <S70FL01_verified_write+0x2ee>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    233c:	2305      	movs	r3, #5
    233e:	6293      	str	r3, [r2, #40]	; 0x28
    2340:	2100      	movs	r1, #0
    2342:	4b81      	ldr	r3, [pc, #516]	; (2548 <S70FL01_verified_write+0x310>)
    2344:	7019      	strb	r1, [r3, #0]
    2346:	23fa      	movs	r3, #250	; 0xfa
    2348:	009b      	lsls	r3, r3, #2
    234a:	3b01      	subs	r3, #1
	for(int i = 0; i < 1000; i++);
    234c:	2b00      	cmp	r3, #0
    234e:	d1fc      	bne.n	234a <S70FL01_verified_write+0x112>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2350:	2104      	movs	r1, #4
    2352:	7e13      	ldrb	r3, [r2, #24]
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_read(&spi_master_instance));
    2354:	420b      	tst	r3, r1
    2356:	d0fc      	beq.n	2352 <S70FL01_verified_write+0x11a>
	// Read back the contents of the shift reg
	// For some reason, if the buffer length is set to 1 the readout does not occur
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
    2358:	4f7c      	ldr	r7, [pc, #496]	; (254c <S70FL01_verified_write+0x314>)
    235a:	4c7b      	ldr	r4, [pc, #492]	; (2548 <S70FL01_verified_write+0x310>)
    235c:	4877      	ldr	r0, [pc, #476]	; (253c <S70FL01_verified_write+0x304>)
    235e:	a903      	add	r1, sp, #12
    2360:	2214      	movs	r2, #20
    2362:	23ff      	movs	r3, #255	; 0xff
    2364:	47b8      	blx	r7
    2366:	7020      	strb	r0, [r4, #0]
    2368:	2800      	cmp	r0, #0
    236a:	d1f7      	bne.n	235c <S70FL01_verified_write+0x124>
	
	if(!(rxBuffer[0] & 0x02)){
    236c:	ab03      	add	r3, sp, #12
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	3002      	adds	r0, #2
    2372:	4018      	ands	r0, r3
    2374:	d10c      	bne.n	2390 <S70FL01_verified_write+0x158>
	} else {
		Assert(false);
		return NULL;
    2376:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2378:	2e00      	cmp	r6, #0
    237a:	d103      	bne.n	2384 <S70FL01_verified_write+0x14c>
		return &(ports[port_index]->Group[group_index]);
    237c:	464b      	mov	r3, r9
    237e:	01df      	lsls	r7, r3, #7
    2380:	4b6f      	ldr	r3, [pc, #444]	; (2540 <S70FL01_verified_write+0x308>)
    2382:	18fb      	adds	r3, r7, r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2384:	619d      	str	r5, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2386:	2280      	movs	r2, #128	; 0x80
    2388:	02d2      	lsls	r2, r2, #11
    238a:	4b6d      	ldr	r3, [pc, #436]	; (2540 <S70FL01_verified_write+0x308>)
    238c:	615a      	str	r2, [r3, #20]
		// WREN didn't work, so we don't need to waste time doing the rest of the operations.
	 	port_pin_set_output_level(die, true);
	 	port_pin_set_output_level(S70FL01_EN, false);
		return 0;
    238e:	e0cd      	b.n	252c <S70FL01_verified_write+0x2f4>
    2390:	23fa      	movs	r3, #250	; 0xfa
    2392:	009b      	lsls	r3, r3, #2
    2394:	3b01      	subs	r3, #1
	}
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 1000; i++);
    2396:	2b00      	cmp	r3, #0
    2398:	d1fc      	bne.n	2394 <S70FL01_verified_write+0x15c>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    239a:	2e00      	cmp	r6, #0
    239c:	d104      	bne.n	23a8 <S70FL01_verified_write+0x170>
		return &(ports[port_index]->Group[group_index]);
    239e:	464b      	mov	r3, r9
    23a0:	01db      	lsls	r3, r3, #7
    23a2:	4a67      	ldr	r2, [pc, #412]	; (2540 <S70FL01_verified_write+0x308>)
    23a4:	4694      	mov	ip, r2
    23a6:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    23a8:	619d      	str	r5, [r3, #24]
    23aa:	2364      	movs	r3, #100	; 0x64
    23ac:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    23ae:	2b00      	cmp	r3, #0
    23b0:	d1fc      	bne.n	23ac <S70FL01_verified_write+0x174>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    23b2:	2e00      	cmp	r6, #0
    23b4:	d104      	bne.n	23c0 <S70FL01_verified_write+0x188>
		return &(ports[port_index]->Group[group_index]);
    23b6:	464b      	mov	r3, r9
    23b8:	01db      	lsls	r3, r3, #7
    23ba:	4a61      	ldr	r2, [pc, #388]	; (2540 <S70FL01_verified_write+0x308>)
    23bc:	4694      	mov	ip, r2
    23be:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    23c0:	615d      	str	r5, [r3, #20]
    23c2:	23fa      	movs	r3, #250	; 0xfa
    23c4:	005b      	lsls	r3, r3, #1
    23c6:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    23c8:	2b00      	cmp	r3, #0
    23ca:	d1fc      	bne.n	23c6 <S70FL01_verified_write+0x18e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    23cc:	4b5b      	ldr	r3, [pc, #364]	; (253c <S70FL01_verified_write+0x304>)
    23ce:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    23d0:	2201      	movs	r2, #1
    23d2:	7e0b      	ldrb	r3, [r1, #24]
	
	
	// Wait for the module to be ready -- maybe not necessary here
	while(!spi_is_ready_to_write(&spi_master_instance));
    23d4:	4213      	tst	r3, r2
    23d6:	d0fc      	beq.n	23d2 <S70FL01_verified_write+0x19a>
	// Perform write operation
	while(spi_write_buffer_wait(&spi_master_instance, wrBuffer, 5) != STATUS_OK);
    23d8:	4f58      	ldr	r7, [pc, #352]	; (253c <S70FL01_verified_write+0x304>)
    23da:	4c5d      	ldr	r4, [pc, #372]	; (2550 <S70FL01_verified_write+0x318>)
    23dc:	1c38      	adds	r0, r7, #0
    23de:	a901      	add	r1, sp, #4
    23e0:	2205      	movs	r2, #5
    23e2:	47a0      	blx	r4
    23e4:	2800      	cmp	r0, #0
    23e6:	d1f9      	bne.n	23dc <S70FL01_verified_write+0x1a4>
    23e8:	23fa      	movs	r3, #250	; 0xfa
    23ea:	005b      	lsls	r3, r3, #1
    23ec:	3b01      	subs	r3, #1
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 500; i++);
    23ee:	2b00      	cmp	r3, #0
    23f0:	d1fc      	bne.n	23ec <S70FL01_verified_write+0x1b4>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    23f2:	2e00      	cmp	r6, #0
    23f4:	d104      	bne.n	2400 <S70FL01_verified_write+0x1c8>
		return &(ports[port_index]->Group[group_index]);
    23f6:	464b      	mov	r3, r9
    23f8:	01db      	lsls	r3, r3, #7
    23fa:	4a51      	ldr	r2, [pc, #324]	; (2540 <S70FL01_verified_write+0x308>)
    23fc:	4694      	mov	ip, r2
    23fe:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2400:	619d      	str	r5, [r3, #24]
    2402:	2364      	movs	r3, #100	; 0x64
    2404:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    2406:	2b00      	cmp	r3, #0
    2408:	d1fc      	bne.n	2404 <S70FL01_verified_write+0x1cc>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    240a:	2e00      	cmp	r6, #0
    240c:	d104      	bne.n	2418 <S70FL01_verified_write+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    240e:	464b      	mov	r3, r9
    2410:	01db      	lsls	r3, r3, #7
    2412:	4a4b      	ldr	r2, [pc, #300]	; (2540 <S70FL01_verified_write+0x308>)
    2414:	4694      	mov	ip, r2
    2416:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2418:	615d      	str	r5, [r3, #20]
    241a:	23fa      	movs	r3, #250	; 0xfa
    241c:	005b      	lsls	r3, r3, #1
    241e:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    2420:	2b00      	cmp	r3, #0
    2422:	d1fc      	bne.n	241e <S70FL01_verified_write+0x1e6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2424:	4b45      	ldr	r3, [pc, #276]	; (253c <S70FL01_verified_write+0x304>)
    2426:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2428:	2101      	movs	r1, #1
    242a:	7e13      	ldrb	r3, [r2, #24]
	
	// Wait until the write completes (Status Reg 0x01)
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    242c:	420b      	tst	r3, r1
    242e:	d0fc      	beq.n	242a <S70FL01_verified_write+0x1f2>
    2430:	2301      	movs	r3, #1
    2432:	7e11      	ldrb	r1, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2434:	4219      	tst	r1, r3
    2436:	d0fc      	beq.n	2432 <S70FL01_verified_write+0x1fa>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2438:	2305      	movs	r3, #5
    243a:	6293      	str	r3, [r2, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    243c:	4b3f      	ldr	r3, [pc, #252]	; (253c <S70FL01_verified_write+0x304>)
    243e:	469a      	mov	sl, r3
	while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
	do{
		// Wait for the peripheral to be ready
		while(!spi_is_ready_to_read(&spi_master_instance));
		// Read back the contents of the shift reg
		status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF);
    2440:	4c42      	ldr	r4, [pc, #264]	; (254c <S70FL01_verified_write+0x314>)
    2442:	4653      	mov	r3, sl
    2444:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2446:	2204      	movs	r2, #4
    2448:	7e0b      	ldrb	r3, [r1, #24]
	while(!spi_is_ready_to_write(&spi_master_instance));
	// Write the buffer to read back written data
	while(spi_write(&spi_master_instance, S70FL01_RDSR) != STATUS_OK);
	do{
		// Wait for the peripheral to be ready
		while(!spi_is_ready_to_read(&spi_master_instance));
    244a:	4213      	tst	r3, r2
    244c:	d0fc      	beq.n	2448 <S70FL01_verified_write+0x210>
		// Read back the contents of the shift reg
		status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF);
    244e:	af03      	add	r7, sp, #12
    2450:	483a      	ldr	r0, [pc, #232]	; (253c <S70FL01_verified_write+0x304>)
    2452:	1c39      	adds	r1, r7, #0
    2454:	2214      	movs	r2, #20
    2456:	23ff      	movs	r3, #255	; 0xff
    2458:	47a0      	blx	r4
    245a:	4b3b      	ldr	r3, [pc, #236]	; (2548 <S70FL01_verified_write+0x310>)
    245c:	7018      	strb	r0, [r3, #0]
	}while(rxBuffer[0] & 0x01);
    245e:	783b      	ldrb	r3, [r7, #0]
    2460:	07db      	lsls	r3, r3, #31
    2462:	d4ee      	bmi.n	2442 <S70FL01_verified_write+0x20a>
    2464:	4b37      	ldr	r3, [pc, #220]	; (2544 <S70FL01_verified_write+0x30c>)
    2466:	3b01      	subs	r3, #1
	
	// We need to delay because the GPIO is faster than the serial out
	// Then give it a second to stabilize
	for(int i = 0; i < 65535; i++);
    2468:	2b00      	cmp	r3, #0
    246a:	d1fc      	bne.n	2466 <S70FL01_verified_write+0x22e>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    246c:	2e00      	cmp	r6, #0
    246e:	d104      	bne.n	247a <S70FL01_verified_write+0x242>
		return &(ports[port_index]->Group[group_index]);
    2470:	464b      	mov	r3, r9
    2472:	01db      	lsls	r3, r3, #7
    2474:	4a32      	ldr	r2, [pc, #200]	; (2540 <S70FL01_verified_write+0x308>)
    2476:	4694      	mov	ip, r2
    2478:	4463      	add	r3, ip
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    247a:	619d      	str	r5, [r3, #24]
    247c:	2364      	movs	r3, #100	; 0x64
    247e:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, true);
	for(int i = 0; i < 100; i++);
    2480:	2b00      	cmp	r3, #0
    2482:	d1fc      	bne.n	247e <S70FL01_verified_write+0x246>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2484:	2e00      	cmp	r6, #0
    2486:	d104      	bne.n	2492 <S70FL01_verified_write+0x25a>
		return &(ports[port_index]->Group[group_index]);
    2488:	464b      	mov	r3, r9
    248a:	01db      	lsls	r3, r3, #7
    248c:	4a2c      	ldr	r2, [pc, #176]	; (2540 <S70FL01_verified_write+0x308>)
    248e:	4694      	mov	ip, r2
    2490:	4463      	add	r3, ip
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2492:	615d      	str	r5, [r3, #20]
    2494:	23fa      	movs	r3, #250	; 0xfa
    2496:	005b      	lsls	r3, r3, #1
    2498:	3b01      	subs	r3, #1
	port_pin_set_output_level(die, false);
	for(int i = 0; i < 500; i++);
    249a:	2b00      	cmp	r3, #0
    249c:	d1fc      	bne.n	2498 <S70FL01_verified_write+0x260>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    249e:	4b27      	ldr	r3, [pc, #156]	; (253c <S70FL01_verified_write+0x304>)
    24a0:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24a2:	2201      	movs	r2, #1
    24a4:	7e0b      	ldrb	r3, [r1, #24]
	
	
	// Wait for the module to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
    24a6:	4213      	tst	r3, r2
    24a8:	d0fc      	beq.n	24a4 <S70FL01_verified_write+0x26c>
	// Write the buffer to read back written data
	while(spi_write_buffer_wait(&spi_master_instance, vfyBuffer, 4) != STATUS_OK);
    24aa:	4f24      	ldr	r7, [pc, #144]	; (253c <S70FL01_verified_write+0x304>)
    24ac:	4c28      	ldr	r4, [pc, #160]	; (2550 <S70FL01_verified_write+0x318>)
    24ae:	1c38      	adds	r0, r7, #0
    24b0:	4669      	mov	r1, sp
    24b2:	2204      	movs	r2, #4
    24b4:	47a0      	blx	r4
    24b6:	2800      	cmp	r0, #0
    24b8:	d1f9      	bne.n	24ae <S70FL01_verified_write+0x276>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    24ba:	4b20      	ldr	r3, [pc, #128]	; (253c <S70FL01_verified_write+0x304>)
    24bc:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24be:	2204      	movs	r2, #4
    24c0:	7e0b      	ldrb	r3, [r1, #24]
	// Read back the contents of the shift reg
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_read(&spi_master_instance));
    24c2:	4213      	tst	r3, r2
    24c4:	d0fc      	beq.n	24c0 <S70FL01_verified_write+0x288>
	while((status = spi_read_buffer_wait(&spi_master_instance, rxBuffer, 20, 0xFF)) != STATUS_OK);
    24c6:	4f1d      	ldr	r7, [pc, #116]	; (253c <S70FL01_verified_write+0x304>)
    24c8:	4b20      	ldr	r3, [pc, #128]	; (254c <S70FL01_verified_write+0x314>)
    24ca:	469a      	mov	sl, r3
    24cc:	4c1e      	ldr	r4, [pc, #120]	; (2548 <S70FL01_verified_write+0x310>)
    24ce:	1c38      	adds	r0, r7, #0
    24d0:	a903      	add	r1, sp, #12
    24d2:	2214      	movs	r2, #20
    24d4:	23ff      	movs	r3, #255	; 0xff
    24d6:	47d0      	blx	sl
    24d8:	7020      	strb	r0, [r4, #0]
    24da:	2800      	cmp	r0, #0
    24dc:	d1f7      	bne.n	24ce <S70FL01_verified_write+0x296>
    24de:	23fa      	movs	r3, #250	; 0xfa
    24e0:	00db      	lsls	r3, r3, #3
    24e2:	3b01      	subs	r3, #1
	// We need to delay because the GPIO is faster than the serial out 100 is sufficient for 1 byte => 2000 should be good
	for(int i = 0; i < 2000; i++);
    24e4:	2b00      	cmp	r3, #0
    24e6:	d1fc      	bne.n	24e2 <S70FL01_verified_write+0x2aa>
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    24e8:	2e00      	cmp	r6, #0
    24ea:	d103      	bne.n	24f4 <S70FL01_verified_write+0x2bc>
		return &(ports[port_index]->Group[group_index]);
    24ec:	464b      	mov	r3, r9
    24ee:	01df      	lsls	r7, r3, #7
    24f0:	4b13      	ldr	r3, [pc, #76]	; (2540 <S70FL01_verified_write+0x308>)
    24f2:	18fb      	adds	r3, r7, r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    24f4:	619d      	str	r5, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    24f6:	2280      	movs	r2, #128	; 0x80
    24f8:	02d2      	lsls	r2, r2, #11
    24fa:	4b11      	ldr	r3, [pc, #68]	; (2540 <S70FL01_verified_write+0x308>)
    24fc:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    24fe:	4b0f      	ldr	r3, [pc, #60]	; (253c <S70FL01_verified_write+0x304>)
    2500:	681a      	ldr	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2502:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2504:	2b00      	cmp	r3, #0
    2506:	d1fc      	bne.n	2502 <S70FL01_verified_write+0x2ca>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2508:	6813      	ldr	r3, [r2, #0]
    250a:	2102      	movs	r1, #2
    250c:	438b      	bics	r3, r1
    250e:	6013      	str	r3, [r2, #0]
	port_pin_set_output_level(die, true);
	port_pin_set_output_level(S70FL01_EN, false);
	spi_disable(&spi_master_instance);
	spi_enabled = false;
    2510:	2200      	movs	r2, #0
    2512:	4b09      	ldr	r3, [pc, #36]	; (2538 <S70FL01_verified_write+0x300>)
    2514:	701a      	strb	r2, [r3, #0]
	return rxBuffer[0] == byte ? 1 : 0;
    2516:	ab03      	add	r3, sp, #12
    2518:	7818      	ldrb	r0, [r3, #0]
    251a:	4643      	mov	r3, r8
    251c:	1ac0      	subs	r0, r0, r3
    251e:	4243      	negs	r3, r0
    2520:	4158      	adcs	r0, r3
    2522:	b2c0      	uxtb	r0, r0
    2524:	e002      	b.n	252c <S70FL01_verified_write+0x2f4>
	for(int i = 0; i < 500; i++);
	
	// Wait for the peripheral to be ready
	while(!spi_is_ready_to_write(&spi_master_instance));
	// Write the register
	while((status = spi_write(&spi_master_instance, S70FL01_RDSR)) != STATUS_OK);
    2526:	4b08      	ldr	r3, [pc, #32]	; (2548 <S70FL01_verified_write+0x310>)
    2528:	7018      	strb	r0, [r3, #0]
    252a:	e703      	b.n	2334 <S70FL01_verified_write+0xfc>
	port_pin_set_output_level(die, true);
	port_pin_set_output_level(S70FL01_EN, false);
	spi_disable(&spi_master_instance);
	spi_enabled = false;
	return rxBuffer[0] == byte ? 1 : 0;
}
    252c:	b008      	add	sp, #32
    252e:	bc1c      	pop	{r2, r3, r4}
    2530:	4690      	mov	r8, r2
    2532:	4699      	mov	r9, r3
    2534:	46a2      	mov	sl, r4
    2536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2538:	200000c8 	.word	0x200000c8
    253c:	20000dbc 	.word	0x20000dbc
    2540:	40002800 	.word	0x40002800
    2544:	0000ffff 	.word	0x0000ffff
    2548:	20000ddc 	.word	0x20000ddc
    254c:	00002ce1 	.word	0x00002ce1
    2550:	00002ded 	.word	0x00002ded

00002554 <configure_SP1ML>:
/* @brief configure_SP1ML configures the sp1ml radio module including the SAM L21 USART module
/* @params none
/* @returns none
/************************************************************************/
void configure_SP1ML(void)
{
    2554:	b5f0      	push	{r4, r5, r6, r7, lr}
    2556:	4657      	mov	r7, sl
    2558:	464e      	mov	r6, r9
    255a:	4645      	mov	r5, r8
    255c:	b4e0      	push	{r5, r6, r7}
    255e:	b082      	sub	sp, #8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2560:	ad01      	add	r5, sp, #4
    2562:	2380      	movs	r3, #128	; 0x80
    2564:	702b      	strb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2566:	2400      	movs	r4, #0
    2568:	2600      	movs	r6, #0
    256a:	70ec      	strb	r4, [r5, #3]
	// Configure the extra pins needed like the enable pin, the mode pin, and the shutown pin
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    256c:	3b7f      	subs	r3, #127	; 0x7f
    256e:	4698      	mov	r8, r3
    2570:	706b      	strb	r3, [r5, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
    2572:	2702      	movs	r7, #2
    2574:	70af      	strb	r7, [r5, #2]

	// Enable
 	system_pinmux_pin_set_config(SP1ML_EN_PIN, &config_pinmux);
    2576:	201b      	movs	r0, #27
    2578:	1c29      	adds	r1, r5, #0
    257a:	4b36      	ldr	r3, [pc, #216]	; (2654 <configure_SP1ML+0x100>)
    257c:	469a      	mov	sl, r3
    257e:	4798      	blx	r3
    2580:	4b35      	ldr	r3, [pc, #212]	; (2658 <configure_SP1ML+0x104>)
    2582:	4699      	mov	r9, r3
    2584:	2380      	movs	r3, #128	; 0x80
    2586:	051b      	lsls	r3, r3, #20
    2588:	464a      	mov	r2, r9
    258a:	6153      	str	r3, [r2, #20]
 	port_pin_set_output_level(SP1ML_EN_PIN, false);
	
	// Mode 0
	system_pinmux_pin_set_config(SP1ML_MODE_PIN, &config_pinmux);
    258c:	2001      	movs	r0, #1
    258e:	1c29      	adds	r1, r5, #0
    2590:	47d0      	blx	sl
    2592:	464b      	mov	r3, r9
    2594:	615f      	str	r7, [r3, #20]
	port_pin_set_output_level(SP1ML_MODE_PIN, false);

	// SHDN
	system_pinmux_pin_set_config(SP1ML_SHDN_PIN, &config_pinmux);
    2596:	2002      	movs	r0, #2
    2598:	1c29      	adds	r1, r5, #0
    259a:	47d0      	blx	sl
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    259c:	2304      	movs	r3, #4
    259e:	464a      	mov	r2, r9
    25a0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    25a2:	4b2e      	ldr	r3, [pc, #184]	; (265c <configure_SP1ML+0x108>)
    25a4:	2280      	movs	r2, #128	; 0x80
    25a6:	05d2      	lsls	r2, r2, #23
    25a8:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    25aa:	605c      	str	r4, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    25ac:	22ff      	movs	r2, #255	; 0xff
    25ae:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    25b0:	729c      	strb	r4, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    25b2:	72dc      	strb	r4, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    25b4:	3adb      	subs	r2, #219	; 0xdb
    25b6:	4641      	mov	r1, r8
    25b8:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    25ba:	3201      	adds	r2, #1
    25bc:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    25be:	3201      	adds	r2, #1
    25c0:	549c      	strb	r4, [r3, r2]
	config->use_external_clock = false;
    25c2:	3201      	adds	r2, #1
    25c4:	549c      	strb	r4, [r3, r2]
	config->ext_clock_freq   = 0;
    25c6:	629c      	str	r4, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    25c8:	3205      	adds	r2, #5
    25ca:	549c      	strb	r4, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    25cc:	615c      	str	r4, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    25ce:	821c      	strh	r4, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    25d0:	2200      	movs	r2, #0
    25d2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    25d4:	761e      	strb	r6, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    25d6:	771e      	strb	r6, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    25d8:	765e      	strb	r6, [r3, #25]
	config->receive_pulse_length                    = 19;
    25da:	2213      	movs	r2, #19
    25dc:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    25de:	775e      	strb	r6, [r3, #29]
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	// Configure SAM L21 USART to talk to the SP1ML (no parity, 1 stop bit, lsb first, 8 bit data)
	usart_get_config_defaults(&config_usart);
	config_usart.generator_source = GCLK_GENERATOR_2;
    25e0:	321a      	adds	r2, #26
    25e2:	549f      	strb	r7, [r3, r2]
	config_usart.run_in_standby = false;
	config_usart.baudrate = 115200;
    25e4:	22e1      	movs	r2, #225	; 0xe1
    25e6:	0252      	lsls	r2, r2, #9
    25e8:	621a      	str	r2, [r3, #32]
	config_usart.parity = USART_PARITY_NONE;
	config_usart.stopbits = USART_STOPBITS_1;
	config_usart.data_order = USART_DATAORDER_LSB;
	config_usart.character_size = USART_CHARACTER_SIZE_8BIT;
	// RXPO PAD03 TXPO PAD02
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    25ea:	22c4      	movs	r2, #196	; 0xc4
    25ec:	0392      	lsls	r2, r2, #14
    25ee:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    25f0:	2201      	movs	r2, #1
    25f2:	4252      	negs	r2, r2
    25f4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    25f6:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA06D_SERCOM0_PAD2;
    25f8:	4a19      	ldr	r2, [pc, #100]	; (2660 <configure_SP1ML+0x10c>)
    25fa:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    25fc:	4a19      	ldr	r2, [pc, #100]	; (2664 <configure_SP1ML+0x110>)
    25fe:	63da      	str	r2, [r3, #60]	; 0x3c
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
    2600:	4d19      	ldr	r5, [pc, #100]	; (2668 <configure_SP1ML+0x114>)
    2602:	1c1c      	adds	r4, r3, #0
    2604:	4e19      	ldr	r6, [pc, #100]	; (266c <configure_SP1ML+0x118>)
    2606:	1c28      	adds	r0, r5, #0
    2608:	2184      	movs	r1, #132	; 0x84
    260a:	05c9      	lsls	r1, r1, #23
    260c:	1c22      	adds	r2, r4, #0
    260e:	47b0      	blx	r6
    2610:	4b17      	ldr	r3, [pc, #92]	; (2670 <configure_SP1ML+0x11c>)
    2612:	7018      	strb	r0, [r3, #0]
    2614:	2800      	cmp	r0, #0
    2616:	d1f6      	bne.n	2606 <configure_SP1ML+0xb2>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2618:	4b13      	ldr	r3, [pc, #76]	; (2668 <configure_SP1ML+0x114>)
    261a:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    261c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    261e:	2b00      	cmp	r3, #0
    2620:	d1fc      	bne.n	261c <configure_SP1ML+0xc8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2622:	6811      	ldr	r1, [r2, #0]
    2624:	3302      	adds	r3, #2
    2626:	430b      	orrs	r3, r1
    2628:	6013      	str	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    262a:	2204      	movs	r2, #4
    262c:	4b0a      	ldr	r3, [pc, #40]	; (2658 <configure_SP1ML+0x104>)
    262e:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2630:	4b0d      	ldr	r3, [pc, #52]	; (2668 <configure_SP1ML+0x114>)
    2632:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2634:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2636:	2b00      	cmp	r3, #0
    2638:	d1fc      	bne.n	2634 <configure_SP1ML+0xe0>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    263a:	6813      	ldr	r3, [r2, #0]
    263c:	2102      	movs	r1, #2
    263e:	438b      	bics	r3, r1
    2640:	6013      	str	r3, [r2, #0]
	// Set the shutdown pin low so we save power (even though the module is off)
	port_pin_set_output_level(SP1ML_SHDN_PIN, false);
	
	// Disable the USART module again to save power
	usart_disable(&usart_instance);
	usart_enabled = false;
    2642:	2200      	movs	r2, #0
    2644:	4b0b      	ldr	r3, [pc, #44]	; (2674 <configure_SP1ML+0x120>)
    2646:	701a      	strb	r2, [r3, #0]
}
    2648:	b002      	add	sp, #8
    264a:	bc1c      	pop	{r2, r3, r4}
    264c:	4690      	mov	r8, r2
    264e:	4699      	mov	r9, r3
    2650:	46a2      	mov	sl, r4
    2652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2654:	00003c71 	.word	0x00003c71
    2658:	40002800 	.word	0x40002800
    265c:	20000ce0 	.word	0x20000ce0
    2660:	00060003 	.word	0x00060003
    2664:	00070003 	.word	0x00070003
    2668:	200000bc 	.word	0x200000bc
    266c:	00002679 	.word	0x00002679
    2670:	20000ddc 	.word	0x20000ddc
    2674:	20000cdb 	.word	0x20000cdb

00002678 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2678:	b5f0      	push	{r4, r5, r6, r7, lr}
    267a:	465f      	mov	r7, fp
    267c:	4656      	mov	r6, sl
    267e:	464d      	mov	r5, r9
    2680:	4644      	mov	r4, r8
    2682:	b4f0      	push	{r4, r5, r6, r7}
    2684:	b091      	sub	sp, #68	; 0x44
    2686:	1c06      	adds	r6, r0, #0
    2688:	1c0c      	adds	r4, r1, #0
    268a:	1c15      	adds	r5, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    268c:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    268e:	1c08      	adds	r0, r1, #0
    2690:	4bb3      	ldr	r3, [pc, #716]	; (2960 <usart_init+0x2e8>)
    2692:	4798      	blx	r3
    2694:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
    2696:	2a05      	cmp	r2, #5
    2698:	d003      	beq.n	26a2 <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    269a:	1c07      	adds	r7, r0, #0
    269c:	3712      	adds	r7, #18
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    269e:	1c03      	adds	r3, r0, #0
    26a0:	e001      	b.n	26a6 <usart_init+0x2e>
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    26a2:	2718      	movs	r7, #24
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    26a4:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    26a6:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    26a8:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    26aa:	07c9      	lsls	r1, r1, #31
    26ac:	d500      	bpl.n	26b0 <usart_init+0x38>
    26ae:	e150      	b.n	2952 <usart_init+0x2da>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    26b0:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    26b2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    26b4:	0789      	lsls	r1, r1, #30
    26b6:	d500      	bpl.n	26ba <usart_init+0x42>
    26b8:	e14b      	b.n	2952 <usart_init+0x2da>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
    26ba:	2a05      	cmp	r2, #5
    26bc:	d106      	bne.n	26cc <usart_init+0x54>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    26be:	49a9      	ldr	r1, [pc, #676]	; (2964 <usart_init+0x2ec>)
    26c0:	6a0a      	ldr	r2, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    26c2:	381b      	subs	r0, #27
    26c4:	4098      	lsls	r0, r3
    26c6:	4310      	orrs	r0, r2
    26c8:	6208      	str	r0, [r1, #32]
    26ca:	e005      	b.n	26d8 <usart_init+0x60>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    26cc:	49a5      	ldr	r1, [pc, #660]	; (2964 <usart_init+0x2ec>)
    26ce:	69ca      	ldr	r2, [r1, #28]
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    26d0:	2001      	movs	r0, #1
    26d2:	4098      	lsls	r0, r3
    26d4:	4310      	orrs	r0, r2
    26d6:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    26d8:	a90f      	add	r1, sp, #60	; 0x3c
    26da:	232d      	movs	r3, #45	; 0x2d
    26dc:	4698      	mov	r8, r3
    26de:	5ceb      	ldrb	r3, [r5, r3]
    26e0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    26e2:	b2ff      	uxtb	r7, r7
    26e4:	1c38      	adds	r0, r7, #0
    26e6:	4ba0      	ldr	r3, [pc, #640]	; (2968 <usart_init+0x2f0>)
    26e8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    26ea:	1c38      	adds	r0, r7, #0
    26ec:	4b9f      	ldr	r3, [pc, #636]	; (296c <usart_init+0x2f4>)
    26ee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    26f0:	4643      	mov	r3, r8
    26f2:	5ce8      	ldrb	r0, [r5, r3]
    26f4:	2100      	movs	r1, #0
    26f6:	4b9e      	ldr	r3, [pc, #632]	; (2970 <usart_init+0x2f8>)
    26f8:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    26fa:	7aeb      	ldrb	r3, [r5, #11]
    26fc:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    26fe:	2324      	movs	r3, #36	; 0x24
    2700:	5ceb      	ldrb	r3, [r5, r3]
    2702:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2704:	2325      	movs	r3, #37	; 0x25
    2706:	5ceb      	ldrb	r3, [r5, r3]
    2708:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    270a:	7eeb      	ldrb	r3, [r5, #27]
    270c:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    270e:	7f2b      	ldrb	r3, [r5, #28]
    2710:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2712:	6833      	ldr	r3, [r6, #0]
    2714:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2716:	1c18      	adds	r0, r3, #0
    2718:	4b91      	ldr	r3, [pc, #580]	; (2960 <usart_init+0x2e8>)
    271a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    271c:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    271e:	2200      	movs	r2, #0
    2720:	230e      	movs	r3, #14
    2722:	a906      	add	r1, sp, #24
    2724:	468c      	mov	ip, r1
    2726:	4463      	add	r3, ip
    2728:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    272a:	8a2b      	ldrh	r3, [r5, #16]
    272c:	4699      	mov	r9, r3
    272e:	2380      	movs	r3, #128	; 0x80
    2730:	01db      	lsls	r3, r3, #7
    2732:	4599      	cmp	r9, r3
    2734:	d019      	beq.n	276a <usart_init+0xf2>
    2736:	d804      	bhi.n	2742 <usart_init+0xca>
    2738:	2380      	movs	r3, #128	; 0x80
    273a:	019b      	lsls	r3, r3, #6
    273c:	4599      	cmp	r9, r3
    273e:	d00a      	beq.n	2756 <usart_init+0xde>
    2740:	e0e8      	b.n	2914 <usart_init+0x29c>
    2742:	23c0      	movs	r3, #192	; 0xc0
    2744:	01db      	lsls	r3, r3, #7
    2746:	4599      	cmp	r9, r3
    2748:	d00a      	beq.n	2760 <usart_init+0xe8>
    274a:	2380      	movs	r3, #128	; 0x80
    274c:	021b      	lsls	r3, r3, #8
    274e:	4599      	cmp	r9, r3
    2750:	d100      	bne.n	2754 <usart_init+0xdc>
    2752:	e0e4      	b.n	291e <usart_init+0x2a6>
    2754:	e0de      	b.n	2914 <usart_init+0x29c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2756:	2310      	movs	r3, #16
    2758:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    275a:	3b0f      	subs	r3, #15
    275c:	9307      	str	r3, [sp, #28]
    275e:	e0e2      	b.n	2926 <usart_init+0x2ae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2760:	2308      	movs	r3, #8
    2762:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2764:	3b07      	subs	r3, #7
    2766:	9307      	str	r3, [sp, #28]
    2768:	e0dd      	b.n	2926 <usart_init+0x2ae>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    276a:	682b      	ldr	r3, [r5, #0]
    276c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    276e:	68eb      	ldr	r3, [r5, #12]
    2770:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2772:	696b      	ldr	r3, [r5, #20]
    2774:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2776:	7e2b      	ldrb	r3, [r5, #24]
    2778:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    277a:	2326      	movs	r3, #38	; 0x26
    277c:	5ceb      	ldrb	r3, [r5, r3]
    277e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2780:	686a      	ldr	r2, [r5, #4]
    2782:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2784:	2a00      	cmp	r2, #0
    2786:	d016      	beq.n	27b6 <usart_init+0x13e>
    2788:	2380      	movs	r3, #128	; 0x80
    278a:	055b      	lsls	r3, r3, #21
    278c:	429a      	cmp	r2, r3
    278e:	d139      	bne.n	2804 <usart_init+0x18c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2790:	2327      	movs	r3, #39	; 0x27
    2792:	5ceb      	ldrb	r3, [r5, r3]
    2794:	2b00      	cmp	r3, #0
    2796:	d139      	bne.n	280c <usart_init+0x194>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2798:	6a2b      	ldr	r3, [r5, #32]
    279a:	4698      	mov	r8, r3
    279c:	b2c0      	uxtb	r0, r0
    279e:	4b75      	ldr	r3, [pc, #468]	; (2974 <usart_init+0x2fc>)
    27a0:	4798      	blx	r3
    27a2:	1c01      	adds	r1, r0, #0
    27a4:	4640      	mov	r0, r8
    27a6:	220e      	movs	r2, #14
    27a8:	ab06      	add	r3, sp, #24
    27aa:	469c      	mov	ip, r3
    27ac:	4462      	add	r2, ip
    27ae:	4b72      	ldr	r3, [pc, #456]	; (2978 <usart_init+0x300>)
    27b0:	4798      	blx	r3
    27b2:	1c03      	adds	r3, r0, #0
    27b4:	e027      	b.n	2806 <usart_init+0x18e>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27b6:	2308      	movs	r3, #8
    27b8:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27ba:	2300      	movs	r3, #0
    27bc:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    27be:	2327      	movs	r3, #39	; 0x27
    27c0:	5ceb      	ldrb	r3, [r5, r3]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d00c      	beq.n	27e0 <usart_init+0x168>
				status_code =
    27c6:	4643      	mov	r3, r8
    27c8:	9300      	str	r3, [sp, #0]
    27ca:	6a28      	ldr	r0, [r5, #32]
    27cc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    27ce:	220e      	movs	r2, #14
    27d0:	ab06      	add	r3, sp, #24
    27d2:	469c      	mov	ip, r3
    27d4:	4462      	add	r2, ip
    27d6:	9b07      	ldr	r3, [sp, #28]
    27d8:	4f68      	ldr	r7, [pc, #416]	; (297c <usart_init+0x304>)
    27da:	47b8      	blx	r7
    27dc:	1c03      	adds	r3, r0, #0
    27de:	e012      	b.n	2806 <usart_init+0x18e>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    27e0:	6a2b      	ldr	r3, [r5, #32]
    27e2:	1c1f      	adds	r7, r3, #0
    27e4:	b2c0      	uxtb	r0, r0
    27e6:	4b63      	ldr	r3, [pc, #396]	; (2974 <usart_init+0x2fc>)
    27e8:	4798      	blx	r3
    27ea:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    27ec:	4643      	mov	r3, r8
    27ee:	9300      	str	r3, [sp, #0]
    27f0:	1c38      	adds	r0, r7, #0
    27f2:	220e      	movs	r2, #14
    27f4:	ab06      	add	r3, sp, #24
    27f6:	469c      	mov	ip, r3
    27f8:	4462      	add	r2, ip
    27fa:	9b07      	ldr	r3, [sp, #28]
    27fc:	4f5f      	ldr	r7, [pc, #380]	; (297c <usart_init+0x304>)
    27fe:	47b8      	blx	r7
    2800:	1c03      	adds	r3, r0, #0
    2802:	e000      	b.n	2806 <usart_init+0x18e>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2804:	2300      	movs	r3, #0
    2806:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2808:	d000      	beq.n	280c <usart_init+0x194>
    280a:	e0a2      	b.n	2952 <usart_init+0x2da>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    280c:	7e6b      	ldrb	r3, [r5, #25]
    280e:	2b00      	cmp	r3, #0
    2810:	d002      	beq.n	2818 <usart_init+0x1a0>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2812:	7eab      	ldrb	r3, [r5, #26]
    2814:	4652      	mov	r2, sl
    2816:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2818:	6832      	ldr	r2, [r6, #0]
    281a:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    281c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    281e:	2b00      	cmp	r3, #0
    2820:	d1fc      	bne.n	281c <usart_init+0x1a4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2822:	330e      	adds	r3, #14
    2824:	aa06      	add	r2, sp, #24
    2826:	4694      	mov	ip, r2
    2828:	4463      	add	r3, ip
    282a:	881b      	ldrh	r3, [r3, #0]
    282c:	4652      	mov	r2, sl
    282e:	8193      	strh	r3, [r2, #12]
    2830:	9b02      	ldr	r3, [sp, #8]
    2832:	465a      	mov	r2, fp
    2834:	4313      	orrs	r3, r2
    2836:	9a03      	ldr	r2, [sp, #12]
    2838:	4313      	orrs	r3, r2
    283a:	433b      	orrs	r3, r7
    283c:	464a      	mov	r2, r9
    283e:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2840:	9a04      	ldr	r2, [sp, #16]
    2842:	0212      	lsls	r2, r2, #8
    2844:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2846:	9a05      	ldr	r2, [sp, #20]
    2848:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    284a:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    284c:	2327      	movs	r3, #39	; 0x27
    284e:	5ceb      	ldrb	r3, [r5, r3]
    2850:	2b00      	cmp	r3, #0
    2852:	d101      	bne.n	2858 <usart_init+0x1e0>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2854:	3304      	adds	r3, #4
    2856:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2858:	7f2b      	ldrb	r3, [r5, #28]
    285a:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    285c:	7e6a      	ldrb	r2, [r5, #25]
    285e:	0293      	lsls	r3, r2, #10
    2860:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2862:	7f6a      	ldrb	r2, [r5, #29]
    2864:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2866:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2868:	2224      	movs	r2, #36	; 0x24
    286a:	5caa      	ldrb	r2, [r5, r2]
    286c:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    286e:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2870:	2225      	movs	r2, #37	; 0x25
    2872:	5caa      	ldrb	r2, [r5, r2]
    2874:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2876:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    2878:	7ae9      	ldrb	r1, [r5, #11]
    287a:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    287c:	892b      	ldrh	r3, [r5, #8]
    287e:	2bff      	cmp	r3, #255	; 0xff
    2880:	d004      	beq.n	288c <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2882:	2280      	movs	r2, #128	; 0x80
    2884:	0452      	lsls	r2, r2, #17
    2886:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2888:	4319      	orrs	r1, r3
    288a:	e005      	b.n	2898 <usart_init+0x220>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    288c:	7eeb      	ldrb	r3, [r5, #27]
    288e:	2b00      	cmp	r3, #0
    2890:	d002      	beq.n	2898 <usart_init+0x220>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2892:	2380      	movs	r3, #128	; 0x80
    2894:	04db      	lsls	r3, r3, #19
    2896:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2898:	232c      	movs	r3, #44	; 0x2c
    289a:	5ceb      	ldrb	r3, [r5, r3]
    289c:	2b00      	cmp	r3, #0
    289e:	d103      	bne.n	28a8 <usart_init+0x230>
    28a0:	4b37      	ldr	r3, [pc, #220]	; (2980 <usart_init+0x308>)
    28a2:	789b      	ldrb	r3, [r3, #2]
    28a4:	079b      	lsls	r3, r3, #30
    28a6:	d501      	bpl.n	28ac <usart_init+0x234>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    28a8:	2380      	movs	r3, #128	; 0x80
    28aa:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    28ac:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    28ae:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    28b0:	2b00      	cmp	r3, #0
    28b2:	d1fc      	bne.n	28ae <usart_init+0x236>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    28b4:	4653      	mov	r3, sl
    28b6:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    28b8:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    28ba:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    28bc:	2b00      	cmp	r3, #0
    28be:	d1fc      	bne.n	28ba <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    28c0:	4653      	mov	r3, sl
    28c2:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    28c4:	ab0e      	add	r3, sp, #56	; 0x38
    28c6:	2280      	movs	r2, #128	; 0x80
    28c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    28ca:	2200      	movs	r2, #0
    28cc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    28ce:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    28d0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    28d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    28d4:	930a      	str	r3, [sp, #40]	; 0x28
    28d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    28d8:	930b      	str	r3, [sp, #44]	; 0x2c
    28da:	6bab      	ldr	r3, [r5, #56]	; 0x38
    28dc:	930c      	str	r3, [sp, #48]	; 0x30
    28de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    28e0:	9302      	str	r3, [sp, #8]
    28e2:	930d      	str	r3, [sp, #52]	; 0x34
    28e4:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    28e6:	ad0e      	add	r5, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    28e8:	4e26      	ldr	r6, [pc, #152]	; (2984 <usart_init+0x30c>)
    28ea:	b2f9      	uxtb	r1, r7
    28ec:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    28ee:	aa0a      	add	r2, sp, #40	; 0x28
    28f0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    28f2:	2800      	cmp	r0, #0
    28f4:	d102      	bne.n	28fc <usart_init+0x284>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    28f6:	1c20      	adds	r0, r4, #0
    28f8:	4b23      	ldr	r3, [pc, #140]	; (2988 <usart_init+0x310>)
    28fa:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    28fc:	1c43      	adds	r3, r0, #1
    28fe:	d004      	beq.n	290a <usart_init+0x292>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2900:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2902:	0c00      	lsrs	r0, r0, #16
    2904:	b2c0      	uxtb	r0, r0
    2906:	1c29      	adds	r1, r5, #0
    2908:	47b0      	blx	r6
    290a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    290c:	2f04      	cmp	r7, #4
    290e:	d1ec      	bne.n	28ea <usart_init+0x272>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    2910:	2000      	movs	r0, #0
    2912:	e01e      	b.n	2952 <usart_init+0x2da>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2914:	2310      	movs	r3, #16
    2916:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2918:	2300      	movs	r3, #0
    291a:	9307      	str	r3, [sp, #28]
    291c:	e003      	b.n	2926 <usart_init+0x2ae>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    291e:	2303      	movs	r3, #3
    2920:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2922:	2300      	movs	r3, #0
    2924:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2926:	682b      	ldr	r3, [r5, #0]
    2928:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    292a:	68eb      	ldr	r3, [r5, #12]
    292c:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    292e:	696b      	ldr	r3, [r5, #20]
    2930:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2932:	7e2b      	ldrb	r3, [r5, #24]
    2934:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2936:	2326      	movs	r3, #38	; 0x26
    2938:	5ceb      	ldrb	r3, [r5, r3]
    293a:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    293c:	686a      	ldr	r2, [r5, #4]
    293e:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2940:	2a00      	cmp	r2, #0
    2942:	d100      	bne.n	2946 <usart_init+0x2ce>
    2944:	e73b      	b.n	27be <usart_init+0x146>
    2946:	2380      	movs	r3, #128	; 0x80
    2948:	055b      	lsls	r3, r3, #21
    294a:	429a      	cmp	r2, r3
    294c:	d100      	bne.n	2950 <usart_init+0x2d8>
    294e:	e71f      	b.n	2790 <usart_init+0x118>
    2950:	e75c      	b.n	280c <usart_init+0x194>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2952:	b011      	add	sp, #68	; 0x44
    2954:	bc3c      	pop	{r2, r3, r4, r5}
    2956:	4690      	mov	r8, r2
    2958:	4699      	mov	r9, r3
    295a:	46a2      	mov	sl, r4
    295c:	46ab      	mov	fp, r5
    295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2960:	000033a1 	.word	0x000033a1
    2964:	40000400 	.word	0x40000400
    2968:	00003b75 	.word	0x00003b75
    296c:	00003b0d 	.word	0x00003b0d
    2970:	000031e9 	.word	0x000031e9
    2974:	00003b99 	.word	0x00003b99
    2978:	00002ff9 	.word	0x00002ff9
    297c:	00003021 	.word	0x00003021
    2980:	41002000 	.word	0x41002000
    2984:	00003c71 	.word	0x00003c71
    2988:	00003235 	.word	0x00003235

0000298c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    298c:	b5f0      	push	{r4, r5, r6, r7, lr}
    298e:	465f      	mov	r7, fp
    2990:	4656      	mov	r6, sl
    2992:	464d      	mov	r5, r9
    2994:	4644      	mov	r4, r8
    2996:	b4f0      	push	{r4, r5, r6, r7}
    2998:	b08b      	sub	sp, #44	; 0x2c
    299a:	1c06      	adds	r6, r0, #0
    299c:	1c0d      	adds	r5, r1, #0
    299e:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    29a0:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    29a2:	680b      	ldr	r3, [r1, #0]
    29a4:	079b      	lsls	r3, r3, #30
    29a6:	d400      	bmi.n	29aa <spi_init+0x1e>
    29a8:	e0ab      	b.n	2b02 <spi_init+0x176>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    29aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    29ac:	9305      	str	r3, [sp, #20]
    29ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    29b0:	9306      	str	r3, [sp, #24]
    29b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    29b4:	9307      	str	r3, [sp, #28]
    29b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    29b8:	9308      	str	r3, [sp, #32]
    29ba:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    29bc:	231f      	movs	r3, #31
    29be:	4699      	mov	r9, r3
    29c0:	b2f9      	uxtb	r1, r7
    29c2:	00bb      	lsls	r3, r7, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    29c4:	aa05      	add	r2, sp, #20
    29c6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    29c8:	2800      	cmp	r0, #0
    29ca:	d102      	bne.n	29d2 <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    29cc:	1c28      	adds	r0, r5, #0
    29ce:	4bb9      	ldr	r3, [pc, #740]	; (2cb4 <spi_init+0x328>)
    29d0:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    29d2:	1c43      	adds	r3, r0, #1
    29d4:	d02b      	beq.n	2a2e <spi_init+0xa2>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    29d6:	0401      	lsls	r1, r0, #16
    29d8:	0c0b      	lsrs	r3, r1, #16
    29da:	469b      	mov	fp, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    29dc:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29de:	b2c3      	uxtb	r3, r0
    29e0:	469c      	mov	ip, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    29e2:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29e4:	0602      	lsls	r2, r0, #24
    29e6:	d405      	bmi.n	29f4 <spi_init+0x68>
		return &(ports[port_index]->Group[group_index]);
    29e8:	4663      	mov	r3, ip
    29ea:	095b      	lsrs	r3, r3, #5
    29ec:	01db      	lsls	r3, r3, #7
    29ee:	4ab2      	ldr	r2, [pc, #712]	; (2cb8 <spi_init+0x32c>)
    29f0:	4690      	mov	r8, r2
    29f2:	4443      	add	r3, r8
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    29f4:	464a      	mov	r2, r9
    29f6:	4660      	mov	r0, ip
    29f8:	4002      	ands	r2, r0

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    29fa:	1898      	adds	r0, r3, r2
    29fc:	3040      	adds	r0, #64	; 0x40
    29fe:	7800      	ldrb	r0, [r0, #0]
    2a00:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    2a02:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    2a04:	4651      	mov	r1, sl
    2a06:	07c9      	lsls	r1, r1, #31
    2a08:	d50b      	bpl.n	2a22 <spi_init+0x96>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    2a0a:	0852      	lsrs	r2, r2, #1
    2a0c:	189b      	adds	r3, r3, r2
    2a0e:	3330      	adds	r3, #48	; 0x30
    2a10:	7818      	ldrb	r0, [r3, #0]
    2a12:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    2a14:	4663      	mov	r3, ip
    2a16:	07db      	lsls	r3, r3, #31
    2a18:	d501      	bpl.n	2a1e <spi_init+0x92>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    2a1a:	0900      	lsrs	r0, r0, #4
    2a1c:	e001      	b.n	2a22 <spi_init+0x96>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    2a1e:	230f      	movs	r3, #15
    2a20:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    2a22:	4583      	cmp	fp, r0
    2a24:	d003      	beq.n	2a2e <spi_init+0xa2>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    2a26:	2300      	movs	r3, #0
    2a28:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    2a2a:	201c      	movs	r0, #28
    2a2c:	e13b      	b.n	2ca6 <spi_init+0x31a>
    2a2e:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2a30:	2f04      	cmp	r7, #4
    2a32:	d1c5      	bne.n	29c0 <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2a34:	2011      	movs	r0, #17
    2a36:	4ba1      	ldr	r3, [pc, #644]	; (2cbc <spi_init+0x330>)
    2a38:	4798      	blx	r3
    2a3a:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    2a3c:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    2a3e:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    2a40:	2b01      	cmp	r3, #1
    2a42:	d111      	bne.n	2a68 <spi_init+0xdc>
		enum status_code error_code = _sercom_get_sync_baud_val(
    2a44:	69a0      	ldr	r0, [r4, #24]
    2a46:	aa04      	add	r2, sp, #16
    2a48:	4b9d      	ldr	r3, [pc, #628]	; (2cc0 <spi_init+0x334>)
    2a4a:	4798      	blx	r3
    2a4c:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2a4e:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    2a50:	2b00      	cmp	r3, #0
    2a52:	d000      	beq.n	2a56 <spi_init+0xca>
    2a54:	e127      	b.n	2ca6 <spi_init+0x31a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2a56:	7b2b      	ldrb	r3, [r5, #12]
    2a58:	b2db      	uxtb	r3, r3
    2a5a:	aa04      	add	r2, sp, #16
    2a5c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    2a5e:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2a60:	429a      	cmp	r2, r3
    2a62:	d000      	beq.n	2a66 <spi_init+0xda>
    2a64:	e11f      	b.n	2ca6 <spi_init+0x31a>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    2a66:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2a68:	7823      	ldrb	r3, [r4, #0]
    2a6a:	4698      	mov	r8, r3
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d116      	bne.n	2a9e <spi_init+0x112>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    2a70:	69a3      	ldr	r3, [r4, #24]
    2a72:	469c      	mov	ip, r3

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    2a74:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    2a76:	682a      	ldr	r2, [r5, #0]
		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2a78:	7fe1      	ldrb	r1, [r4, #31]
    2a7a:	0409      	lsls	r1, r1, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2a7c:	7fa0      	ldrb	r0, [r4, #30]
    2a7e:	4301      	orrs	r1, r0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
    2a80:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    2a82:	4291      	cmp	r1, r2
    2a84:	d000      	beq.n	2a88 <spi_init+0xfc>
    2a86:	e10e      	b.n	2ca6 <spi_init+0x31a>
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
    2a88:	2220      	movs	r2, #32
    2a8a:	5ca2      	ldrb	r2, [r4, r2]
    2a8c:	2a00      	cmp	r2, #0
    2a8e:	d001      	beq.n	2a94 <spi_init+0x108>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2a90:	2240      	movs	r2, #64	; 0x40
    2a92:	4313      	orrs	r3, r2
    2a94:	2208      	movs	r2, #8
    2a96:	4661      	mov	r1, ip
    2a98:	4311      	orrs	r1, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    2a9a:	430f      	orrs	r7, r1
    2a9c:	e000      	b.n	2aa0 <spi_init+0x114>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
    2a9e:	2300      	movs	r3, #0
    2aa0:	68a2      	ldr	r2, [r4, #8]
    2aa2:	6861      	ldr	r1, [r4, #4]
    2aa4:	430a      	orrs	r2, r1
    2aa6:	68e1      	ldr	r1, [r4, #12]
    2aa8:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2aaa:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2aac:	7c21      	ldrb	r1, [r4, #16]
    2aae:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
    2ab0:	7c61      	ldrb	r1, [r4, #17]
    2ab2:	2900      	cmp	r1, #0
    2ab4:	d001      	beq.n	2aba <spi_init+0x12e>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2ab6:	2180      	movs	r1, #128	; 0x80
    2ab8:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    2aba:	7ca1      	ldrb	r1, [r4, #18]
    2abc:	2900      	cmp	r1, #0
    2abe:	d002      	beq.n	2ac6 <spi_init+0x13a>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2ac0:	2180      	movs	r1, #128	; 0x80
    2ac2:	0289      	lsls	r1, r1, #10
    2ac4:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2ac6:	7ce1      	ldrb	r1, [r4, #19]
    2ac8:	2900      	cmp	r1, #0
    2aca:	d002      	beq.n	2ad2 <spi_init+0x146>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2acc:	2180      	movs	r1, #128	; 0x80
    2ace:	0089      	lsls	r1, r1, #2
    2ad0:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2ad2:	7d21      	ldrb	r1, [r4, #20]
    2ad4:	2900      	cmp	r1, #0
    2ad6:	d002      	beq.n	2ade <spi_init+0x152>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2ad8:	2180      	movs	r1, #128	; 0x80
    2ada:	0189      	lsls	r1, r1, #6
    2adc:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2ade:	6828      	ldr	r0, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    2ae0:	2102      	movs	r1, #2
    2ae2:	430a      	orrs	r2, r1

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2ae4:	4282      	cmp	r2, r0
    2ae6:	d108      	bne.n	2afa <spi_init+0x16e>
			spi_module->CTRLB.reg == ctrlb) {
    2ae8:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    2aea:	429a      	cmp	r2, r3
    2aec:	d105      	bne.n	2afa <spi_init+0x16e>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    2aee:	4643      	mov	r3, r8
    2af0:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    2af2:	7c23      	ldrb	r3, [r4, #16]
    2af4:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    2af6:	2000      	movs	r0, #0
    2af8:	e0d5      	b.n	2ca6 <spi_init+0x31a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    2afa:	2300      	movs	r3, #0
    2afc:	6033      	str	r3, [r6, #0]

	return STATUS_ERR_DENIED;
    2afe:	201c      	movs	r0, #28
    2b00:	e0d1      	b.n	2ca6 <spi_init+0x31a>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2b02:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    2b04:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2b06:	07db      	lsls	r3, r3, #31
    2b08:	d500      	bpl.n	2b0c <spi_init+0x180>
    2b0a:	e0cc      	b.n	2ca6 <spi_init+0x31a>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2b0c:	1c08      	adds	r0, r1, #0
    2b0e:	4b6d      	ldr	r3, [pc, #436]	; (2cc4 <spi_init+0x338>)
    2b10:	4798      	blx	r3
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
    2b12:	2805      	cmp	r0, #5
    2b14:	d100      	bne.n	2b18 <spi_init+0x18c>
    2b16:	e0be      	b.n	2c96 <spi_init+0x30a>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2b18:	2312      	movs	r3, #18
    2b1a:	469c      	mov	ip, r3
    2b1c:	4484      	add	ip, r0
    2b1e:	496a      	ldr	r1, [pc, #424]	; (2cc8 <spi_init+0x33c>)
    2b20:	69cb      	ldr	r3, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2b22:	2201      	movs	r2, #1
    2b24:	4082      	lsls	r2, r0
    2b26:	1c10      	adds	r0, r2, #0
    2b28:	4318      	orrs	r0, r3
    2b2a:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2b2c:	a909      	add	r1, sp, #36	; 0x24
    2b2e:	2724      	movs	r7, #36	; 0x24
    2b30:	5de3      	ldrb	r3, [r4, r7]
    2b32:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2b34:	4663      	mov	r3, ip
    2b36:	466a      	mov	r2, sp
    2b38:	7113      	strb	r3, [r2, #4]
    2b3a:	7913      	ldrb	r3, [r2, #4]
    2b3c:	9301      	str	r3, [sp, #4]
    2b3e:	1c18      	adds	r0, r3, #0
    2b40:	4b62      	ldr	r3, [pc, #392]	; (2ccc <spi_init+0x340>)
    2b42:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2b44:	9801      	ldr	r0, [sp, #4]
    2b46:	4b62      	ldr	r3, [pc, #392]	; (2cd0 <spi_init+0x344>)
    2b48:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2b4a:	5de0      	ldrb	r0, [r4, r7]
    2b4c:	2100      	movs	r1, #0
    2b4e:	4b61      	ldr	r3, [pc, #388]	; (2cd4 <spi_init+0x348>)
    2b50:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    2b52:	7823      	ldrb	r3, [r4, #0]
    2b54:	2b01      	cmp	r3, #1
    2b56:	d103      	bne.n	2b60 <spi_init+0x1d4>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2b58:	682a      	ldr	r2, [r5, #0]
    2b5a:	330b      	adds	r3, #11
    2b5c:	4313      	orrs	r3, r2
    2b5e:	602b      	str	r3, [r5, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2b60:	7823      	ldrb	r3, [r4, #0]
    2b62:	2b00      	cmp	r3, #0
    2b64:	d103      	bne.n	2b6e <spi_init+0x1e2>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    2b66:	682a      	ldr	r2, [r5, #0]
    2b68:	3308      	adds	r3, #8
    2b6a:	4313      	orrs	r3, r2
    2b6c:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b6e:	6833      	ldr	r3, [r6, #0]
    2b70:	4699      	mov	r9, r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2b72:	ab04      	add	r3, sp, #16
    2b74:	2280      	movs	r2, #128	; 0x80
    2b76:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b78:	2200      	movs	r2, #0
    2b7a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2b7c:	2101      	movs	r1, #1
    2b7e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    2b80:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    2b82:	7823      	ldrb	r3, [r4, #0]
    2b84:	2b00      	cmp	r3, #0
    2b86:	d101      	bne.n	2b8c <spi_init+0x200>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2b88:	ab04      	add	r3, sp, #16
    2b8a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    2b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b8e:	9305      	str	r3, [sp, #20]
    2b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2b92:	9306      	str	r3, [sp, #24]
    2b94:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2b96:	9307      	str	r3, [sp, #28]
    2b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2b9a:	9308      	str	r3, [sp, #32]
    2b9c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2b9e:	ad04      	add	r5, sp, #16
    2ba0:	b2f9      	uxtb	r1, r7
    2ba2:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ba4:	aa05      	add	r2, sp, #20
    2ba6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2ba8:	2800      	cmp	r0, #0
    2baa:	d102      	bne.n	2bb2 <spi_init+0x226>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2bac:	4648      	mov	r0, r9
    2bae:	4b41      	ldr	r3, [pc, #260]	; (2cb4 <spi_init+0x328>)
    2bb0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2bb2:	1c43      	adds	r3, r0, #1
    2bb4:	d005      	beq.n	2bc2 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2bb6:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2bb8:	0c00      	lsrs	r0, r0, #16
    2bba:	b2c0      	uxtb	r0, r0
    2bbc:	1c29      	adds	r1, r5, #0
    2bbe:	4b46      	ldr	r3, [pc, #280]	; (2cd8 <spi_init+0x34c>)
    2bc0:	4798      	blx	r3
    2bc2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2bc4:	2f04      	cmp	r7, #4
    2bc6:	d1eb      	bne.n	2ba0 <spi_init+0x214>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    2bc8:	7823      	ldrb	r3, [r4, #0]
    2bca:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    2bcc:	7c23      	ldrb	r3, [r4, #16]
    2bce:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    2bd0:	7ca3      	ldrb	r3, [r4, #18]
    2bd2:	71f3      	strb	r3, [r6, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    2bd4:	7d23      	ldrb	r3, [r4, #20]
    2bd6:	7233      	strb	r3, [r6, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2bd8:	2200      	movs	r2, #0
    2bda:	ab02      	add	r3, sp, #8
    2bdc:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    2bde:	7823      	ldrb	r3, [r4, #0]
    2be0:	2b01      	cmp	r3, #1
    2be2:	d115      	bne.n	2c10 <spi_init+0x284>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2be4:	6830      	ldr	r0, [r6, #0]
    2be6:	4b37      	ldr	r3, [pc, #220]	; (2cc4 <spi_init+0x338>)
    2be8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2bea:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2bec:	b2c0      	uxtb	r0, r0
    2bee:	4b33      	ldr	r3, [pc, #204]	; (2cbc <spi_init+0x330>)
    2bf0:	4798      	blx	r3
    2bf2:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    2bf4:	69a0      	ldr	r0, [r4, #24]
    2bf6:	ab02      	add	r3, sp, #8
    2bf8:	1d9a      	adds	r2, r3, #6
    2bfa:	4b31      	ldr	r3, [pc, #196]	; (2cc0 <spi_init+0x334>)
    2bfc:	4798      	blx	r3
    2bfe:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2c00:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2c02:	2b00      	cmp	r3, #0
    2c04:	d14f      	bne.n	2ca6 <spi_init+0x31a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2c06:	ab02      	add	r3, sp, #8
    2c08:	3306      	adds	r3, #6
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	464a      	mov	r2, r9
    2c0e:	7313      	strb	r3, [r2, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2c10:	7823      	ldrb	r3, [r4, #0]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d110      	bne.n	2c38 <spi_init+0x2ac>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    2c16:	69a6      	ldr	r6, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    2c18:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2c1a:	464a      	mov	r2, r9
    2c1c:	6a50      	ldr	r0, [r2, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2c1e:	7fe1      	ldrb	r1, [r4, #31]
    2c20:	0409      	lsls	r1, r1, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2c22:	7fa5      	ldrb	r5, [r4, #30]
    2c24:	4329      	orrs	r1, r5

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2c26:	4301      	orrs	r1, r0
    2c28:	6251      	str	r1, [r2, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    2c2a:	2220      	movs	r2, #32
    2c2c:	5ca2      	ldrb	r2, [r4, r2]
    2c2e:	2a00      	cmp	r2, #0
    2c30:	d004      	beq.n	2c3c <spi_init+0x2b0>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2c32:	2140      	movs	r1, #64	; 0x40
    2c34:	430b      	orrs	r3, r1
    2c36:	e001      	b.n	2c3c <spi_init+0x2b0>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    2c38:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    2c3a:	2600      	movs	r6, #0
    2c3c:	68a2      	ldr	r2, [r4, #8]
    2c3e:	6861      	ldr	r1, [r4, #4]
    2c40:	430a      	orrs	r2, r1
    2c42:	68e1      	ldr	r1, [r4, #12]
    2c44:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2c46:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2c48:	7c21      	ldrb	r1, [r4, #16]
    2c4a:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2c4c:	7c61      	ldrb	r1, [r4, #17]
    2c4e:	2900      	cmp	r1, #0
    2c50:	d103      	bne.n	2c5a <spi_init+0x2ce>
    2c52:	4922      	ldr	r1, [pc, #136]	; (2cdc <spi_init+0x350>)
    2c54:	7889      	ldrb	r1, [r1, #2]
    2c56:	0789      	lsls	r1, r1, #30
    2c58:	d501      	bpl.n	2c5e <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2c5a:	2180      	movs	r1, #128	; 0x80
    2c5c:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    2c5e:	7ca1      	ldrb	r1, [r4, #18]
    2c60:	2900      	cmp	r1, #0
    2c62:	d002      	beq.n	2c6a <spi_init+0x2de>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2c64:	2180      	movs	r1, #128	; 0x80
    2c66:	0289      	lsls	r1, r1, #10
    2c68:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2c6a:	7ce1      	ldrb	r1, [r4, #19]
    2c6c:	2900      	cmp	r1, #0
    2c6e:	d002      	beq.n	2c76 <spi_init+0x2ea>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2c70:	2180      	movs	r1, #128	; 0x80
    2c72:	0089      	lsls	r1, r1, #2
    2c74:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2c76:	7d21      	ldrb	r1, [r4, #20]
    2c78:	2900      	cmp	r1, #0
    2c7a:	d002      	beq.n	2c82 <spi_init+0x2f6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2c7c:	2180      	movs	r1, #128	; 0x80
    2c7e:	0189      	lsls	r1, r1, #6
    2c80:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    2c82:	4649      	mov	r1, r9
    2c84:	6809      	ldr	r1, [r1, #0]
    2c86:	430a      	orrs	r2, r1
    2c88:	4649      	mov	r1, r9
    2c8a:	600a      	str	r2, [r1, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2c8c:	684a      	ldr	r2, [r1, #4]
    2c8e:	4313      	orrs	r3, r2
    2c90:	604b      	str	r3, [r1, #4]

	return STATUS_OK;
    2c92:	2000      	movs	r0, #0
    2c94:	e007      	b.n	2ca6 <spi_init+0x31a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    2c96:	4a0c      	ldr	r2, [pc, #48]	; (2cc8 <spi_init+0x33c>)
    2c98:	6a11      	ldr	r1, [r2, #32]
    2c9a:	2302      	movs	r3, #2
    2c9c:	430b      	orrs	r3, r1
    2c9e:	6213      	str	r3, [r2, #32]
	uint32_t pm_index, gclk_index;
#if (SAML21)
	if (sercom_index == 5) {
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    2ca0:	2318      	movs	r3, #24
    2ca2:	469c      	mov	ip, r3
    2ca4:	e742      	b.n	2b2c <spi_init+0x1a0>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2ca6:	b00b      	add	sp, #44	; 0x2c
    2ca8:	bc3c      	pop	{r2, r3, r4, r5}
    2caa:	4690      	mov	r8, r2
    2cac:	4699      	mov	r9, r3
    2cae:	46a2      	mov	sl, r4
    2cb0:	46ab      	mov	fp, r5
    2cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cb4:	00003235 	.word	0x00003235
    2cb8:	40002800 	.word	0x40002800
    2cbc:	00003b99 	.word	0x00003b99
    2cc0:	00002ff9 	.word	0x00002ff9
    2cc4:	000033a1 	.word	0x000033a1
    2cc8:	40000400 	.word	0x40000400
    2ccc:	00003b75 	.word	0x00003b75
    2cd0:	00003b0d 	.word	0x00003b0d
    2cd4:	000031e9 	.word	0x000031e9
    2cd8:	00003c71 	.word	0x00003c71
    2cdc:	41002000 	.word	0x41002000

00002ce0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce2:	4657      	mov	r7, sl
    2ce4:	464e      	mov	r6, r9
    2ce6:	4645      	mov	r5, r8
    2ce8:	b4e0      	push	{r5, r6, r7}
    2cea:	468c      	mov	ip, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2cec:	2117      	movs	r1, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    2cee:	2a00      	cmp	r2, #0
    2cf0:	d074      	beq.n	2ddc <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    2cf2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2cf4:	3105      	adds	r1, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    2cf6:	2c00      	cmp	r4, #0
    2cf8:	d070      	beq.n	2ddc <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_DENIED;
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2cfa:	7941      	ldrb	r1, [r0, #5]
    2cfc:	2900      	cmp	r1, #0
    2cfe:	d105      	bne.n	2d0c <spi_read_buffer_wait+0x2c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2d00:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d02:	7e0c      	ldrb	r4, [r1, #24]
    2d04:	07a4      	lsls	r4, r4, #30
    2d06:	d501      	bpl.n	2d0c <spi_read_buffer_wait+0x2c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2d08:	2402      	movs	r4, #2
    2d0a:	760c      	strb	r4, [r1, #24]
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2d0c:	2700      	movs	r7, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d0e:	2504      	movs	r5, #4

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    2d10:	4935      	ldr	r1, [pc, #212]	; (2de8 <spi_read_buffer_wait+0x108>)
    2d12:	4689      	mov	r9, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d14:	2102      	movs	r1, #2
    2d16:	4688      	mov	r8, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2d18:	3901      	subs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2d1a:	05db      	lsls	r3, r3, #23
    2d1c:	0ddb      	lsrs	r3, r3, #23
    2d1e:	469a      	mov	sl, r3
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    2d20:	7944      	ldrb	r4, [r0, #5]
    2d22:	2c01      	cmp	r4, #1
    2d24:	d156      	bne.n	2dd4 <spi_read_buffer_wait+0xf4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2d26:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2d28:	7e34      	ldrb	r4, [r6, #24]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    2d2a:	420c      	tst	r4, r1
    2d2c:	d0fc      	beq.n	2d28 <spi_read_buffer_wait+0x48>
    2d2e:	7e34      	ldrb	r4, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2d30:	420c      	tst	r4, r1
    2d32:	d014      	beq.n	2d5e <spi_read_buffer_wait+0x7e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2d34:	4653      	mov	r3, sl
    2d36:	62b3      	str	r3, [r6, #40]	; 0x28
    2d38:	e04c      	b.n	2dd4 <spi_read_buffer_wait+0xf4>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d3a:	7e1e      	ldrb	r6, [r3, #24]

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    2d3c:	422e      	tst	r6, r5
    2d3e:	d102      	bne.n	2d46 <spi_read_buffer_wait+0x66>
    2d40:	3c01      	subs	r4, #1
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2d42:	2c00      	cmp	r4, #0
    2d44:	d1f9      	bne.n	2d3a <spi_read_buffer_wait+0x5a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2d46:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2d48:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_read(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2d4a:	4643      	mov	r3, r8
    2d4c:	421e      	tst	r6, r3
    2d4e:	d003      	beq.n	2d58 <spi_read_buffer_wait+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2d50:	2302      	movs	r3, #2
    2d52:	7623      	strb	r3, [r4, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    2d54:	2104      	movs	r1, #4
    2d56:	e041      	b.n	2ddc <spi_read_buffer_wait+0xfc>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d58:	7e24      	ldrb	r4, [r4, #24]
			}

			if (!spi_is_ready_to_read(module)) {
    2d5a:	422c      	tst	r4, r5
    2d5c:	d032      	beq.n	2dc4 <spi_read_buffer_wait+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2d5e:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2d60:	7e34      	ldrb	r4, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    2d62:	422c      	tst	r4, r5
    2d64:	d0fc      	beq.n	2d60 <spi_read_buffer_wait+0x80>
    2d66:	7e34      	ldrb	r4, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2d68:	422c      	tst	r4, r5
    2d6a:	d014      	beq.n	2d96 <spi_read_buffer_wait+0xb6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2d6c:	8b73      	ldrh	r3, [r6, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2d6e:	2400      	movs	r4, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2d70:	422b      	tst	r3, r5
    2d72:	d004      	beq.n	2d7e <spi_read_buffer_wait+0x9e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2d74:	8b73      	ldrh	r3, [r6, #26]
    2d76:	3404      	adds	r4, #4
    2d78:	431c      	orrs	r4, r3
    2d7a:	8374      	strh	r4, [r6, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    2d7c:	241e      	movs	r4, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2d7e:	7983      	ldrb	r3, [r0, #6]
    2d80:	2b01      	cmp	r3, #1
    2d82:	d103      	bne.n	2d8c <spi_read_buffer_wait+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2d84:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    2d86:	05f6      	lsls	r6, r6, #23
    2d88:	0df6      	lsrs	r6, r6, #23
    2d8a:	e001      	b.n	2d90 <spi_read_buffer_wait+0xb0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2d8c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    2d8e:	b2f6      	uxtb	r6, r6
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    2d90:	2c00      	cmp	r4, #0
    2d92:	d003      	beq.n	2d9c <spi_read_buffer_wait+0xbc>
    2d94:	e000      	b.n	2d98 <spi_read_buffer_wait+0xb8>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2d96:	2410      	movs	r4, #16
			/* Overflow, abort */
			return retval;
    2d98:	1c21      	adds	r1, r4, #0
    2d9a:	e01f      	b.n	2ddc <spi_read_buffer_wait+0xfc>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2d9c:	1c7c      	adds	r4, r7, #1
    2d9e:	b2a4      	uxth	r4, r4
    2da0:	4663      	mov	r3, ip
    2da2:	55de      	strb	r6, [r3, r7]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2da4:	7983      	ldrb	r3, [r0, #6]
    2da6:	2b01      	cmp	r3, #1
    2da8:	d105      	bne.n	2db6 <spi_read_buffer_wait+0xd6>
			rx_data[rx_pos++] = (received_data >> 8);
    2daa:	3702      	adds	r7, #2
    2dac:	b2bf      	uxth	r7, r7
    2dae:	0a36      	lsrs	r6, r6, #8
    2db0:	4663      	mov	r3, ip
    2db2:	551e      	strb	r6, [r3, r4]
    2db4:	e000      	b.n	2db8 <spi_read_buffer_wait+0xd8>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2db6:	1c27      	adds	r7, r4, #0
    2db8:	3a01      	subs	r2, #1
    2dba:	b292      	uxth	r2, r2
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    2dbc:	2a00      	cmp	r2, #0
    2dbe:	d1af      	bne.n	2d20 <spi_read_buffer_wait+0x40>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    2dc0:	2100      	movs	r1, #0
    2dc2:	e00b      	b.n	2ddc <spi_read_buffer_wait+0xfc>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2dc4:	2112      	movs	r1, #18
    2dc6:	e009      	b.n	2ddc <spi_read_buffer_wait+0xfc>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2dc8:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2dca:	7e1c      	ldrb	r4, [r3, #24]

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    2dcc:	422c      	tst	r4, r5
    2dce:	d1ba      	bne.n	2d46 <spi_read_buffer_wait+0x66>
    2dd0:	464c      	mov	r4, r9
    2dd2:	e7b2      	b.n	2d3a <spi_read_buffer_wait+0x5a>
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2dd4:	7944      	ldrb	r4, [r0, #5]
    2dd6:	2c00      	cmp	r4, #0
    2dd8:	d0f6      	beq.n	2dc8 <spi_read_buffer_wait+0xe8>
    2dda:	e7c0      	b.n	2d5e <spi_read_buffer_wait+0x7e>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2ddc:	1c08      	adds	r0, r1, #0
    2dde:	bc1c      	pop	{r2, r3, r4}
    2de0:	4690      	mov	r8, r2
    2de2:	4699      	mov	r9, r3
    2de4:	46a2      	mov	sl, r4
    2de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de8:	00002710 	.word	0x00002710

00002dec <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dee:	465f      	mov	r7, fp
    2df0:	4656      	mov	r6, sl
    2df2:	464d      	mov	r5, r9
    2df4:	4644      	mov	r4, r8
    2df6:	b4f0      	push	{r4, r5, r6, r7}
    2df8:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2dfa:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    2dfc:	2a00      	cmp	r2, #0
    2dfe:	d100      	bne.n	2e02 <spi_write_buffer_wait+0x16>
    2e00:	e0ec      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2e02:	7943      	ldrb	r3, [r0, #5]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d105      	bne.n	2e14 <spi_write_buffer_wait+0x28>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e08:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2e0a:	7e1c      	ldrb	r4, [r3, #24]
    2e0c:	07a4      	lsls	r4, r4, #30
    2e0e:	d501      	bpl.n	2e14 <spi_write_buffer_wait+0x28>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2e10:	2402      	movs	r4, #2
    2e12:	761c      	strb	r4, [r3, #24]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    2e14:	4693      	mov	fp, r2
    2e16:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e18:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2e1a:	2502      	movs	r5, #2
    2e1c:	46ac      	mov	ip, r5
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2e1e:	3502      	adds	r5, #2
    2e20:	46a9      	mov	r9, r5
    2e22:	e08e      	b.n	2f42 <spi_write_buffer_wait+0x156>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2e24:	7945      	ldrb	r5, [r0, #5]
    2e26:	2d00      	cmp	r5, #0
    2e28:	d117      	bne.n	2e5a <spi_write_buffer_wait+0x6e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e2a:	6807      	ldr	r7, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e2c:	7e3d      	ldrb	r5, [r7, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
    2e2e:	421d      	tst	r5, r3
    2e30:	d106      	bne.n	2e40 <spi_write_buffer_wait+0x54>
    2e32:	4d6e      	ldr	r5, [pc, #440]	; (2fec <spi_write_buffer_wait+0x200>)
    2e34:	7e3e      	ldrb	r6, [r7, #24]
    2e36:	421e      	tst	r6, r3
    2e38:	d102      	bne.n	2e40 <spi_write_buffer_wait+0x54>
    2e3a:	3d01      	subs	r5, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2e3c:	2d00      	cmp	r5, #0
    2e3e:	d1f9      	bne.n	2e34 <spi_write_buffer_wait+0x48>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e40:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2e42:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2e44:	4667      	mov	r7, ip
    2e46:	423d      	tst	r5, r7
    2e48:	d003      	beq.n	2e52 <spi_write_buffer_wait+0x66>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2e4a:	2302      	movs	r3, #2
    2e4c:	7633      	strb	r3, [r6, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    2e4e:	3302      	adds	r3, #2
    2e50:	e0c4      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e52:	7e35      	ldrb	r5, [r6, #24]
			}

			if (!spi_is_ready_to_write(module)) {
    2e54:	421d      	tst	r5, r3
    2e56:	d100      	bne.n	2e5a <spi_write_buffer_wait+0x6e>
    2e58:	e0b7      	b.n	2fca <spi_write_buffer_wait+0x1de>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2e5a:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2e5c:	7e35      	ldrb	r5, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    2e5e:	421d      	tst	r5, r3
    2e60:	d0fc      	beq.n	2e5c <spi_write_buffer_wait+0x70>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2e62:	1c65      	adds	r5, r4, #1
    2e64:	b2ad      	uxth	r5, r5
    2e66:	46a8      	mov	r8, r5
    2e68:	5d0d      	ldrb	r5, [r1, r4]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2e6a:	7987      	ldrb	r7, [r0, #6]
    2e6c:	2f01      	cmp	r7, #1
    2e6e:	d002      	beq.n	2e76 <spi_write_buffer_wait+0x8a>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2e70:	b2ad      	uxth	r5, r5
    2e72:	4644      	mov	r4, r8
    2e74:	e005      	b.n	2e82 <spi_write_buffer_wait+0x96>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    2e76:	3402      	adds	r4, #2
    2e78:	b2a4      	uxth	r4, r4
    2e7a:	4647      	mov	r7, r8
    2e7c:	5dcf      	ldrb	r7, [r1, r7]
    2e7e:	023f      	lsls	r7, r7, #8
    2e80:	433d      	orrs	r5, r7
    2e82:	7e37      	ldrb	r7, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2e84:	421f      	tst	r7, r3
    2e86:	d002      	beq.n	2e8e <spi_write_buffer_wait+0xa2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2e88:	05ed      	lsls	r5, r5, #23
    2e8a:	0ded      	lsrs	r5, r5, #23
    2e8c:	62b5      	str	r5, [r6, #40]	; 0x28
    2e8e:	1e55      	subs	r5, r2, #1
    2e90:	b2ad      	uxth	r5, r5
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    2e92:	79c6      	ldrb	r6, [r0, #7]
    2e94:	2e00      	cmp	r6, #0
    2e96:	d057      	beq.n	2f48 <spi_write_buffer_wait+0x15c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    2e98:	7945      	ldrb	r5, [r0, #5]
    2e9a:	2d00      	cmp	r5, #0
    2e9c:	d137      	bne.n	2f0e <spi_write_buffer_wait+0x122>
    2e9e:	4f54      	ldr	r7, [pc, #336]	; (2ff0 <spi_write_buffer_wait+0x204>)
    2ea0:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ea2:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2ea4:	7e2e      	ldrb	r6, [r5, #24]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
    2ea6:	421e      	tst	r6, r3
    2ea8:	d01c      	beq.n	2ee4 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    2eaa:	1c66      	adds	r6, r4, #1
    2eac:	b2b1      	uxth	r1, r6
    2eae:	4688      	mov	r8, r1
    2eb0:	9901      	ldr	r1, [sp, #4]
    2eb2:	5d09      	ldrb	r1, [r1, r4]
    2eb4:	9100      	str	r1, [sp, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2eb6:	7981      	ldrb	r1, [r0, #6]
    2eb8:	2901      	cmp	r1, #1
    2eba:	d003      	beq.n	2ec4 <spi_write_buffer_wait+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    2ebc:	4669      	mov	r1, sp
    2ebe:	880e      	ldrh	r6, [r1, #0]
    2ec0:	4644      	mov	r4, r8
    2ec2:	e007      	b.n	2ed4 <spi_write_buffer_wait+0xe8>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
    2ec4:	3402      	adds	r4, #2
    2ec6:	b2a4      	uxth	r4, r4
    2ec8:	4641      	mov	r1, r8
    2eca:	9e01      	ldr	r6, [sp, #4]
    2ecc:	5c71      	ldrb	r1, [r6, r1]
    2ece:	0209      	lsls	r1, r1, #8
    2ed0:	9e00      	ldr	r6, [sp, #0]
    2ed2:	430e      	orrs	r6, r1
    2ed4:	7e29      	ldrb	r1, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2ed6:	4219      	tst	r1, r3
    2ed8:	d002      	beq.n	2ee0 <spi_write_buffer_wait+0xf4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2eda:	05f6      	lsls	r6, r6, #23
    2edc:	0df6      	lsrs	r6, r6, #23
    2ede:	62ae      	str	r6, [r5, #40]	; 0x28
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
    2ee0:	3a01      	subs	r2, #1
    2ee2:	b292      	uxth	r2, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ee4:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2ee6:	7e35      	ldrb	r5, [r6, #24]
					}
					if (spi_is_ready_to_read(module)) {
    2ee8:	4649      	mov	r1, r9
    2eea:	420d      	tst	r5, r1
    2eec:	d102      	bne.n	2ef4 <spi_write_buffer_wait+0x108>
    2eee:	3f01      	subs	r7, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2ef0:	2f00      	cmp	r7, #0
    2ef2:	d1d6      	bne.n	2ea2 <spi_write_buffer_wait+0xb6>
    2ef4:	9901      	ldr	r1, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2ef6:	7e35      	ldrb	r5, [r6, #24]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    2ef8:	4667      	mov	r7, ip
    2efa:	423d      	tst	r5, r7
    2efc:	d003      	beq.n	2f06 <spi_write_buffer_wait+0x11a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2efe:	2302      	movs	r3, #2
    2f00:	7633      	strb	r3, [r6, #24]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
    2f02:	3302      	adds	r3, #2
    2f04:	e06a      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f06:	7e35      	ldrb	r5, [r6, #24]
				}

				if (!spi_is_ready_to_read(module)) {
    2f08:	464e      	mov	r6, r9
    2f0a:	4235      	tst	r5, r6
    2f0c:	d05f      	beq.n	2fce <spi_write_buffer_wait+0x1e2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f0e:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f10:	7e35      	ldrb	r5, [r6, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    2f12:	464f      	mov	r7, r9
    2f14:	423d      	tst	r5, r7
    2f16:	d0fb      	beq.n	2f10 <spi_write_buffer_wait+0x124>
    2f18:	7e35      	ldrb	r5, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2f1a:	423d      	tst	r5, r7
    2f1c:	d00d      	beq.n	2f3a <spi_write_buffer_wait+0x14e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2f1e:	8b75      	ldrh	r5, [r6, #26]
    2f20:	423d      	tst	r5, r7
    2f22:	d004      	beq.n	2f2e <spi_write_buffer_wait+0x142>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2f24:	8b75      	ldrh	r5, [r6, #26]
    2f26:	2704      	movs	r7, #4
    2f28:	433d      	orrs	r5, r7
    2f2a:	b2ad      	uxth	r5, r5
    2f2c:	8375      	strh	r5, [r6, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2f2e:	7985      	ldrb	r5, [r0, #6]
    2f30:	2d01      	cmp	r5, #1
    2f32:	d101      	bne.n	2f38 <spi_write_buffer_wait+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2f34:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    2f36:	e000      	b.n	2f3a <spi_write_buffer_wait+0x14e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2f38:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    2f3a:	465d      	mov	r5, fp
    2f3c:	3d01      	subs	r5, #1
    2f3e:	b2ad      	uxth	r5, r5
    2f40:	46ab      	mov	fp, r5
    2f42:	3a01      	subs	r2, #1
    2f44:	b292      	uxth	r2, r2
    2f46:	e000      	b.n	2f4a <spi_write_buffer_wait+0x15e>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    2f48:	1c2a      	adds	r2, r5, #0

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    2f4a:	4d2a      	ldr	r5, [pc, #168]	; (2ff4 <spi_write_buffer_wait+0x208>)
    2f4c:	42aa      	cmp	r2, r5
    2f4e:	d000      	beq.n	2f52 <spi_write_buffer_wait+0x166>
    2f50:	e768      	b.n	2e24 <spi_write_buffer_wait+0x38>
    2f52:	465a      	mov	r2, fp
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2f54:	7943      	ldrb	r3, [r0, #5]
    2f56:	2b01      	cmp	r3, #1
    2f58:	d106      	bne.n	2f68 <spi_write_buffer_wait+0x17c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f5a:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2f5c:	2202      	movs	r2, #2
    2f5e:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    2f60:	4213      	tst	r3, r2
    2f62:	d0fc      	beq.n	2f5e <spi_write_buffer_wait+0x172>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    2f64:	2300      	movs	r3, #0
    2f66:	e039      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d132      	bne.n	2fd2 <spi_write_buffer_wait+0x1e6>
		if (module->receiver_enabled) {
    2f6c:	79c1      	ldrb	r1, [r0, #7]
    2f6e:	2900      	cmp	r1, #0
    2f70:	d034      	beq.n	2fdc <spi_write_buffer_wait+0x1f0>
			while (flush_length) {
    2f72:	2a00      	cmp	r2, #0
    2f74:	d11f      	bne.n	2fb6 <spi_write_buffer_wait+0x1ca>
    2f76:	e031      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f78:	7e22      	ldrb	r2, [r4, #24]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    2f7a:	420a      	tst	r2, r1
    2f7c:	d102      	bne.n	2f84 <spi_write_buffer_wait+0x198>
    2f7e:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1f9      	bne.n	2f78 <spi_write_buffer_wait+0x18c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f84:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f86:	7e1a      	ldrb	r2, [r3, #24]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
    2f88:	420a      	tst	r2, r1
    2f8a:	d024      	beq.n	2fd6 <spi_write_buffer_wait+0x1ea>
    2f8c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2f8e:	420a      	tst	r2, r1
    2f90:	d00c      	beq.n	2fac <spi_write_buffer_wait+0x1c0>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2f92:	8b5a      	ldrh	r2, [r3, #26]
    2f94:	420a      	tst	r2, r1
    2f96:	d003      	beq.n	2fa0 <spi_write_buffer_wait+0x1b4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2f98:	8b5a      	ldrh	r2, [r3, #26]
    2f9a:	4332      	orrs	r2, r6
    2f9c:	b292      	uxth	r2, r2
    2f9e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2fa0:	7982      	ldrb	r2, [r0, #6]
    2fa2:	2a01      	cmp	r2, #1
    2fa4:	d101      	bne.n	2faa <spi_write_buffer_wait+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fa8:	e000      	b.n	2fac <spi_write_buffer_wait+0x1c0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
    2fac:	3f01      	subs	r7, #1
    2fae:	b2bf      	uxth	r7, r7
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
    2fb0:	2f00      	cmp	r7, #0
    2fb2:	d104      	bne.n	2fbe <spi_write_buffer_wait+0x1d2>
    2fb4:	e011      	b.n	2fda <spi_write_buffer_wait+0x1ee>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fb6:	2104      	movs	r1, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    2fb8:	4d0c      	ldr	r5, [pc, #48]	; (2fec <spi_write_buffer_wait+0x200>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    2fba:	2604      	movs	r6, #4
    2fbc:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2fbe:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fc0:	7e23      	ldrb	r3, [r4, #24]
    2fc2:	420b      	tst	r3, r1
    2fc4:	d1de      	bne.n	2f84 <spi_write_buffer_wait+0x198>
    2fc6:	1c2b      	adds	r3, r5, #0
    2fc8:	e7d6      	b.n	2f78 <spi_write_buffer_wait+0x18c>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2fca:	2312      	movs	r3, #18
    2fcc:	e006      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2fce:	2312      	movs	r3, #18
    2fd0:	e004      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    2fd2:	2300      	movs	r3, #0
    2fd4:	e002      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2fd6:	2312      	movs	r3, #18
    2fd8:	e000      	b.n	2fdc <spi_write_buffer_wait+0x1f0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    2fda:	2300      	movs	r3, #0
}
    2fdc:	1c18      	adds	r0, r3, #0
    2fde:	b003      	add	sp, #12
    2fe0:	bc3c      	pop	{r2, r3, r4, r5}
    2fe2:	4690      	mov	r8, r2
    2fe4:	4699      	mov	r9, r3
    2fe6:	46a2      	mov	sl, r4
    2fe8:	46ab      	mov	fp, r5
    2fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fec:	00002710 	.word	0x00002710
    2ff0:	00002711 	.word	0x00002711
    2ff4:	0000ffff 	.word	0x0000ffff

00002ff8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2ff8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2ffa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ffc:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2ffe:	4281      	cmp	r1, r0
    3000:	d30c      	bcc.n	301c <_sercom_get_sync_baud_val+0x24>
    3002:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    3004:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    3006:	3301      	adds	r3, #1
    3008:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    300a:	4288      	cmp	r0, r1
    300c:	d9fa      	bls.n	3004 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    300e:	3b01      	subs	r3, #1
    3010:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3012:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3014:	2bff      	cmp	r3, #255	; 0xff
    3016:	d801      	bhi.n	301c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    3018:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    301a:	2400      	movs	r4, #0
	}
}
    301c:	1c20      	adds	r0, r4, #0
    301e:	bd10      	pop	{r4, pc}

00003020 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3020:	b5f0      	push	{r4, r5, r6, r7, lr}
    3022:	465f      	mov	r7, fp
    3024:	4656      	mov	r6, sl
    3026:	464d      	mov	r5, r9
    3028:	4644      	mov	r4, r8
    302a:	b4f0      	push	{r4, r5, r6, r7}
    302c:	b089      	sub	sp, #36	; 0x24
    302e:	1c1c      	adds	r4, r3, #0
    3030:	ab12      	add	r3, sp, #72	; 0x48
    3032:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3034:	1c06      	adds	r6, r0, #0
    3036:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3038:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    303a:	428e      	cmp	r6, r1
    303c:	d900      	bls.n	3040 <_sercom_get_async_baud_val+0x20>
    303e:	e0c7      	b.n	31d0 <_sercom_get_async_baud_val+0x1b0>
    3040:	1c25      	adds	r5, r4, #0
    3042:	9207      	str	r2, [sp, #28]
    3044:	1c0c      	adds	r4, r1, #0
    3046:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3048:	2d00      	cmp	r5, #0
    304a:	d151      	bne.n	30f0 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    304c:	1c18      	adds	r0, r3, #0
    304e:	2100      	movs	r1, #0
    3050:	2300      	movs	r3, #0
    3052:	4d63      	ldr	r5, [pc, #396]	; (31e0 <_sercom_get_async_baud_val+0x1c0>)
    3054:	47a8      	blx	r5
    3056:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3058:	1c26      	adds	r6, r4, #0
    305a:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    305c:	2300      	movs	r3, #0
    305e:	2400      	movs	r4, #0
    3060:	9302      	str	r3, [sp, #8]
    3062:	9403      	str	r4, [sp, #12]
    3064:	2200      	movs	r2, #0
    3066:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3068:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    306a:	2120      	movs	r1, #32
    306c:	468c      	mov	ip, r1
    306e:	391f      	subs	r1, #31
    3070:	9600      	str	r6, [sp, #0]
    3072:	9701      	str	r7, [sp, #4]
    3074:	2420      	movs	r4, #32
    3076:	4264      	negs	r4, r4
    3078:	1904      	adds	r4, r0, r4
    307a:	d403      	bmi.n	3084 <_sercom_get_async_baud_val+0x64>
    307c:	1c0d      	adds	r5, r1, #0
    307e:	40a5      	lsls	r5, r4
    3080:	46a8      	mov	r8, r5
    3082:	e004      	b.n	308e <_sercom_get_async_baud_val+0x6e>
    3084:	4664      	mov	r4, ip
    3086:	1a24      	subs	r4, r4, r0
    3088:	1c0d      	adds	r5, r1, #0
    308a:	40e5      	lsrs	r5, r4
    308c:	46a8      	mov	r8, r5
    308e:	1c0c      	adds	r4, r1, #0
    3090:	4084      	lsls	r4, r0
    3092:	46a1      	mov	r9, r4

		r = r << 1;
    3094:	1c14      	adds	r4, r2, #0
    3096:	1c1d      	adds	r5, r3, #0
    3098:	18a4      	adds	r4, r4, r2
    309a:	415d      	adcs	r5, r3
    309c:	1c22      	adds	r2, r4, #0
    309e:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    30a0:	465e      	mov	r6, fp
    30a2:	4647      	mov	r7, r8
    30a4:	423e      	tst	r6, r7
    30a6:	d003      	beq.n	30b0 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    30a8:	1c0e      	adds	r6, r1, #0
    30aa:	4326      	orrs	r6, r4
    30ac:	1c32      	adds	r2, r6, #0
    30ae:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    30b0:	9c01      	ldr	r4, [sp, #4]
    30b2:	429c      	cmp	r4, r3
    30b4:	d810      	bhi.n	30d8 <_sercom_get_async_baud_val+0xb8>
    30b6:	d102      	bne.n	30be <_sercom_get_async_baud_val+0x9e>
    30b8:	9c00      	ldr	r4, [sp, #0]
    30ba:	4294      	cmp	r4, r2
    30bc:	d80c      	bhi.n	30d8 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    30be:	9c00      	ldr	r4, [sp, #0]
    30c0:	9d01      	ldr	r5, [sp, #4]
    30c2:	1b12      	subs	r2, r2, r4
    30c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    30c6:	464d      	mov	r5, r9
    30c8:	9e02      	ldr	r6, [sp, #8]
    30ca:	9f03      	ldr	r7, [sp, #12]
    30cc:	4335      	orrs	r5, r6
    30ce:	1c3c      	adds	r4, r7, #0
    30d0:	4646      	mov	r6, r8
    30d2:	4334      	orrs	r4, r6
    30d4:	9502      	str	r5, [sp, #8]
    30d6:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    30d8:	3801      	subs	r0, #1
    30da:	d2cb      	bcs.n	3074 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    30dc:	2200      	movs	r2, #0
    30de:	2301      	movs	r3, #1
    30e0:	9802      	ldr	r0, [sp, #8]
    30e2:	9903      	ldr	r1, [sp, #12]
    30e4:	1a12      	subs	r2, r2, r0
    30e6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    30e8:	0c11      	lsrs	r1, r2, #16
    30ea:	041b      	lsls	r3, r3, #16
    30ec:	4319      	orrs	r1, r3
    30ee:	e06c      	b.n	31ca <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    30f0:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    30f2:	2d01      	cmp	r5, #1
    30f4:	d169      	bne.n	31ca <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    30f6:	0f61      	lsrs	r1, r4, #29
    30f8:	1c0f      	adds	r7, r1, #0
    30fa:	00e1      	lsls	r1, r4, #3
    30fc:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    30fe:	1c18      	adds	r0, r3, #0
    3100:	2100      	movs	r1, #0
    3102:	2300      	movs	r3, #0
    3104:	4c36      	ldr	r4, [pc, #216]	; (31e0 <_sercom_get_async_baud_val+0x1c0>)
    3106:	47a0      	blx	r4
    3108:	1c04      	adds	r4, r0, #0
    310a:	1c0d      	adds	r5, r1, #0
    310c:	2300      	movs	r3, #0
    310e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    3110:	3320      	adds	r3, #32
    3112:	469b      	mov	fp, r3
    3114:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    3116:	4663      	mov	r3, ip
    3118:	9305      	str	r3, [sp, #20]
    311a:	46b9      	mov	r9, r7
    311c:	466b      	mov	r3, sp
    311e:	7d1b      	ldrb	r3, [r3, #20]
    3120:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3122:	2300      	movs	r3, #0
    3124:	469c      	mov	ip, r3
    3126:	2000      	movs	r0, #0
    3128:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    312a:	223f      	movs	r2, #63	; 0x3f
    312c:	9400      	str	r4, [sp, #0]
    312e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    3130:	2320      	movs	r3, #32
    3132:	425b      	negs	r3, r3
    3134:	18d3      	adds	r3, r2, r3
    3136:	d403      	bmi.n	3140 <_sercom_get_async_baud_val+0x120>
    3138:	1c34      	adds	r4, r6, #0
    313a:	409c      	lsls	r4, r3
    313c:	1c23      	adds	r3, r4, #0
    313e:	e004      	b.n	314a <_sercom_get_async_baud_val+0x12a>
    3140:	465b      	mov	r3, fp
    3142:	1a9b      	subs	r3, r3, r2
    3144:	1c34      	adds	r4, r6, #0
    3146:	40dc      	lsrs	r4, r3
    3148:	1c23      	adds	r3, r4, #0
    314a:	1c37      	adds	r7, r6, #0
    314c:	4097      	lsls	r7, r2

		r = r << 1;
    314e:	1c04      	adds	r4, r0, #0
    3150:	1c0d      	adds	r5, r1, #0
    3152:	1824      	adds	r4, r4, r0
    3154:	414d      	adcs	r5, r1
    3156:	1c20      	adds	r0, r4, #0
    3158:	1c29      	adds	r1, r5, #0
    315a:	9002      	str	r0, [sp, #8]
    315c:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    315e:	4644      	mov	r4, r8
    3160:	403c      	ands	r4, r7
    3162:	46a2      	mov	sl, r4
    3164:	464c      	mov	r4, r9
    3166:	4023      	ands	r3, r4
    3168:	4654      	mov	r4, sl
    316a:	4323      	orrs	r3, r4
    316c:	d005      	beq.n	317a <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    316e:	9b02      	ldr	r3, [sp, #8]
    3170:	9c03      	ldr	r4, [sp, #12]
    3172:	1c1d      	adds	r5, r3, #0
    3174:	4335      	orrs	r5, r6
    3176:	1c28      	adds	r0, r5, #0
    3178:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    317a:	9b01      	ldr	r3, [sp, #4]
    317c:	428b      	cmp	r3, r1
    317e:	d80a      	bhi.n	3196 <_sercom_get_async_baud_val+0x176>
    3180:	d102      	bne.n	3188 <_sercom_get_async_baud_val+0x168>
    3182:	9b00      	ldr	r3, [sp, #0]
    3184:	4283      	cmp	r3, r0
    3186:	d806      	bhi.n	3196 <_sercom_get_async_baud_val+0x176>
			r = r - d;
    3188:	9b00      	ldr	r3, [sp, #0]
    318a:	9c01      	ldr	r4, [sp, #4]
    318c:	1ac0      	subs	r0, r0, r3
    318e:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    3190:	4663      	mov	r3, ip
    3192:	433b      	orrs	r3, r7
    3194:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3196:	3a01      	subs	r2, #1
    3198:	d2ca      	bcs.n	3130 <_sercom_get_async_baud_val+0x110>
    319a:	9c00      	ldr	r4, [sp, #0]
    319c:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    319e:	4662      	mov	r2, ip
    31a0:	9905      	ldr	r1, [sp, #20]
    31a2:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    31a4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    31a6:	4a0f      	ldr	r2, [pc, #60]	; (31e4 <_sercom_get_async_baud_val+0x1c4>)
    31a8:	4293      	cmp	r3, r2
    31aa:	d908      	bls.n	31be <_sercom_get_async_baud_val+0x19e>
    31ac:	9a06      	ldr	r2, [sp, #24]
    31ae:	3201      	adds	r2, #1
    31b0:	b2d2      	uxtb	r2, r2
    31b2:	9206      	str	r2, [sp, #24]
    31b4:	1c0a      	adds	r2, r1, #0
    31b6:	3201      	adds	r2, #1
    31b8:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    31ba:	2a08      	cmp	r2, #8
    31bc:	d1ae      	bne.n	311c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    31be:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    31c0:	9a06      	ldr	r2, [sp, #24]
    31c2:	2a08      	cmp	r2, #8
    31c4:	d004      	beq.n	31d0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    31c6:	0351      	lsls	r1, r2, #13
    31c8:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    31ca:	9b07      	ldr	r3, [sp, #28]
    31cc:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    31ce:	2500      	movs	r5, #0
}
    31d0:	1c28      	adds	r0, r5, #0
    31d2:	b009      	add	sp, #36	; 0x24
    31d4:	bc3c      	pop	{r2, r3, r4, r5}
    31d6:	4690      	mov	r8, r2
    31d8:	4699      	mov	r9, r3
    31da:	46a2      	mov	sl, r4
    31dc:	46ab      	mov	fp, r5
    31de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e0:	000041a5 	.word	0x000041a5
    31e4:	00001fff 	.word	0x00001fff

000031e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    31e8:	b510      	push	{r4, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    31ee:	4b0e      	ldr	r3, [pc, #56]	; (3228 <sercom_set_gclk_generator+0x40>)
    31f0:	781b      	ldrb	r3, [r3, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d001      	beq.n	31fa <sercom_set_gclk_generator+0x12>
    31f6:	2900      	cmp	r1, #0
    31f8:	d00d      	beq.n	3216 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    31fa:	a901      	add	r1, sp, #4
    31fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    31fe:	2011      	movs	r0, #17
    3200:	4b0a      	ldr	r3, [pc, #40]	; (322c <sercom_set_gclk_generator+0x44>)
    3202:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3204:	2011      	movs	r0, #17
    3206:	4b0a      	ldr	r3, [pc, #40]	; (3230 <sercom_set_gclk_generator+0x48>)
    3208:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    320a:	4b07      	ldr	r3, [pc, #28]	; (3228 <sercom_set_gclk_generator+0x40>)
    320c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    320e:	2201      	movs	r2, #1
    3210:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3212:	2000      	movs	r0, #0
    3214:	e006      	b.n	3224 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    3216:	4b04      	ldr	r3, [pc, #16]	; (3228 <sercom_set_gclk_generator+0x40>)
    3218:	785b      	ldrb	r3, [r3, #1]
    321a:	4283      	cmp	r3, r0
    321c:	d001      	beq.n	3222 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    321e:	201d      	movs	r0, #29
    3220:	e000      	b.n	3224 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    3222:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3224:	b002      	add	sp, #8
    3226:	bd10      	pop	{r4, pc}
    3228:	20000064 	.word	0x20000064
    322c:	00003b75 	.word	0x00003b75
    3230:	00003b0d 	.word	0x00003b0d

00003234 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3234:	4b40      	ldr	r3, [pc, #256]	; (3338 <_sercom_get_default_pad+0x104>)
    3236:	4298      	cmp	r0, r3
    3238:	d034      	beq.n	32a4 <_sercom_get_default_pad+0x70>
    323a:	d807      	bhi.n	324c <_sercom_get_default_pad+0x18>
    323c:	2384      	movs	r3, #132	; 0x84
    323e:	05db      	lsls	r3, r3, #23
    3240:	4298      	cmp	r0, r3
    3242:	d00d      	beq.n	3260 <_sercom_get_default_pad+0x2c>
    3244:	4b3d      	ldr	r3, [pc, #244]	; (333c <_sercom_get_default_pad+0x108>)
    3246:	4298      	cmp	r0, r3
    3248:	d01b      	beq.n	3282 <_sercom_get_default_pad+0x4e>
    324a:	e067      	b.n	331c <_sercom_get_default_pad+0xe8>
    324c:	4b3c      	ldr	r3, [pc, #240]	; (3340 <_sercom_get_default_pad+0x10c>)
    324e:	4298      	cmp	r0, r3
    3250:	d04a      	beq.n	32e8 <_sercom_get_default_pad+0xb4>
    3252:	4b3c      	ldr	r3, [pc, #240]	; (3344 <_sercom_get_default_pad+0x110>)
    3254:	4298      	cmp	r0, r3
    3256:	d050      	beq.n	32fa <_sercom_get_default_pad+0xc6>
    3258:	4b3b      	ldr	r3, [pc, #236]	; (3348 <_sercom_get_default_pad+0x114>)
    325a:	4298      	cmp	r0, r3
    325c:	d15e      	bne.n	331c <_sercom_get_default_pad+0xe8>
    325e:	e032      	b.n	32c6 <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3260:	2901      	cmp	r1, #1
    3262:	d006      	beq.n	3272 <_sercom_get_default_pad+0x3e>
    3264:	2900      	cmp	r1, #0
    3266:	d05b      	beq.n	3320 <_sercom_get_default_pad+0xec>
    3268:	2902      	cmp	r1, #2
    326a:	d006      	beq.n	327a <_sercom_get_default_pad+0x46>
    326c:	2903      	cmp	r1, #3
    326e:	d006      	beq.n	327e <_sercom_get_default_pad+0x4a>
    3270:	e001      	b.n	3276 <_sercom_get_default_pad+0x42>
    3272:	4836      	ldr	r0, [pc, #216]	; (334c <_sercom_get_default_pad+0x118>)
    3274:	e05f      	b.n	3336 <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3276:	2000      	movs	r0, #0
    3278:	e05d      	b.n	3336 <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    327a:	4835      	ldr	r0, [pc, #212]	; (3350 <_sercom_get_default_pad+0x11c>)
    327c:	e05b      	b.n	3336 <_sercom_get_default_pad+0x102>
    327e:	4835      	ldr	r0, [pc, #212]	; (3354 <_sercom_get_default_pad+0x120>)
    3280:	e059      	b.n	3336 <_sercom_get_default_pad+0x102>
    3282:	2901      	cmp	r1, #1
    3284:	d006      	beq.n	3294 <_sercom_get_default_pad+0x60>
    3286:	2900      	cmp	r1, #0
    3288:	d04c      	beq.n	3324 <_sercom_get_default_pad+0xf0>
    328a:	2902      	cmp	r1, #2
    328c:	d006      	beq.n	329c <_sercom_get_default_pad+0x68>
    328e:	2903      	cmp	r1, #3
    3290:	d006      	beq.n	32a0 <_sercom_get_default_pad+0x6c>
    3292:	e001      	b.n	3298 <_sercom_get_default_pad+0x64>
    3294:	4830      	ldr	r0, [pc, #192]	; (3358 <_sercom_get_default_pad+0x124>)
    3296:	e04e      	b.n	3336 <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3298:	2000      	movs	r0, #0
    329a:	e04c      	b.n	3336 <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    329c:	482f      	ldr	r0, [pc, #188]	; (335c <_sercom_get_default_pad+0x128>)
    329e:	e04a      	b.n	3336 <_sercom_get_default_pad+0x102>
    32a0:	482f      	ldr	r0, [pc, #188]	; (3360 <_sercom_get_default_pad+0x12c>)
    32a2:	e048      	b.n	3336 <_sercom_get_default_pad+0x102>
    32a4:	2901      	cmp	r1, #1
    32a6:	d006      	beq.n	32b6 <_sercom_get_default_pad+0x82>
    32a8:	2900      	cmp	r1, #0
    32aa:	d03d      	beq.n	3328 <_sercom_get_default_pad+0xf4>
    32ac:	2902      	cmp	r1, #2
    32ae:	d006      	beq.n	32be <_sercom_get_default_pad+0x8a>
    32b0:	2903      	cmp	r1, #3
    32b2:	d006      	beq.n	32c2 <_sercom_get_default_pad+0x8e>
    32b4:	e001      	b.n	32ba <_sercom_get_default_pad+0x86>
    32b6:	482b      	ldr	r0, [pc, #172]	; (3364 <_sercom_get_default_pad+0x130>)
    32b8:	e03d      	b.n	3336 <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    32ba:	2000      	movs	r0, #0
    32bc:	e03b      	b.n	3336 <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    32be:	482a      	ldr	r0, [pc, #168]	; (3368 <_sercom_get_default_pad+0x134>)
    32c0:	e039      	b.n	3336 <_sercom_get_default_pad+0x102>
    32c2:	482a      	ldr	r0, [pc, #168]	; (336c <_sercom_get_default_pad+0x138>)
    32c4:	e037      	b.n	3336 <_sercom_get_default_pad+0x102>
    32c6:	2901      	cmp	r1, #1
    32c8:	d006      	beq.n	32d8 <_sercom_get_default_pad+0xa4>
    32ca:	2900      	cmp	r1, #0
    32cc:	d02e      	beq.n	332c <_sercom_get_default_pad+0xf8>
    32ce:	2902      	cmp	r1, #2
    32d0:	d006      	beq.n	32e0 <_sercom_get_default_pad+0xac>
    32d2:	2903      	cmp	r1, #3
    32d4:	d006      	beq.n	32e4 <_sercom_get_default_pad+0xb0>
    32d6:	e001      	b.n	32dc <_sercom_get_default_pad+0xa8>
    32d8:	4825      	ldr	r0, [pc, #148]	; (3370 <_sercom_get_default_pad+0x13c>)
    32da:	e02c      	b.n	3336 <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    32dc:	2000      	movs	r0, #0
    32de:	e02a      	b.n	3336 <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    32e0:	4824      	ldr	r0, [pc, #144]	; (3374 <_sercom_get_default_pad+0x140>)
    32e2:	e028      	b.n	3336 <_sercom_get_default_pad+0x102>
    32e4:	4824      	ldr	r0, [pc, #144]	; (3378 <_sercom_get_default_pad+0x144>)
    32e6:	e026      	b.n	3336 <_sercom_get_default_pad+0x102>
    32e8:	2902      	cmp	r1, #2
    32ea:	d002      	beq.n	32f2 <_sercom_get_default_pad+0xbe>
    32ec:	2903      	cmp	r1, #3
    32ee:	d002      	beq.n	32f6 <_sercom_get_default_pad+0xc2>
    32f0:	e01e      	b.n	3330 <_sercom_get_default_pad+0xfc>
    32f2:	4822      	ldr	r0, [pc, #136]	; (337c <_sercom_get_default_pad+0x148>)
    32f4:	e01f      	b.n	3336 <_sercom_get_default_pad+0x102>
    32f6:	4822      	ldr	r0, [pc, #136]	; (3380 <_sercom_get_default_pad+0x14c>)
    32f8:	e01d      	b.n	3336 <_sercom_get_default_pad+0x102>
    32fa:	2901      	cmp	r1, #1
    32fc:	d006      	beq.n	330c <_sercom_get_default_pad+0xd8>
    32fe:	2900      	cmp	r1, #0
    3300:	d018      	beq.n	3334 <_sercom_get_default_pad+0x100>
    3302:	2902      	cmp	r1, #2
    3304:	d006      	beq.n	3314 <_sercom_get_default_pad+0xe0>
    3306:	2903      	cmp	r1, #3
    3308:	d006      	beq.n	3318 <_sercom_get_default_pad+0xe4>
    330a:	e001      	b.n	3310 <_sercom_get_default_pad+0xdc>
    330c:	481d      	ldr	r0, [pc, #116]	; (3384 <_sercom_get_default_pad+0x150>)
    330e:	e012      	b.n	3336 <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    3310:	2000      	movs	r0, #0
    3312:	e010      	b.n	3336 <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3314:	481c      	ldr	r0, [pc, #112]	; (3388 <_sercom_get_default_pad+0x154>)
    3316:	e00e      	b.n	3336 <_sercom_get_default_pad+0x102>
    3318:	481c      	ldr	r0, [pc, #112]	; (338c <_sercom_get_default_pad+0x158>)
    331a:	e00c      	b.n	3336 <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
    331c:	2000      	movs	r0, #0
    331e:	e00a      	b.n	3336 <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3320:	481b      	ldr	r0, [pc, #108]	; (3390 <_sercom_get_default_pad+0x15c>)
    3322:	e008      	b.n	3336 <_sercom_get_default_pad+0x102>
    3324:	2003      	movs	r0, #3
    3326:	e006      	b.n	3336 <_sercom_get_default_pad+0x102>
    3328:	481a      	ldr	r0, [pc, #104]	; (3394 <_sercom_get_default_pad+0x160>)
    332a:	e004      	b.n	3336 <_sercom_get_default_pad+0x102>
    332c:	481a      	ldr	r0, [pc, #104]	; (3398 <_sercom_get_default_pad+0x164>)
    332e:	e002      	b.n	3336 <_sercom_get_default_pad+0x102>
    3330:	2000      	movs	r0, #0
    3332:	e000      	b.n	3336 <_sercom_get_default_pad+0x102>
    3334:	4819      	ldr	r0, [pc, #100]	; (339c <_sercom_get_default_pad+0x168>)
	}

	Assert(false);
	return 0;
}
    3336:	4770      	bx	lr
    3338:	42000800 	.word	0x42000800
    333c:	42000400 	.word	0x42000400
    3340:	42001000 	.word	0x42001000
    3344:	43000400 	.word	0x43000400
    3348:	42000c00 	.word	0x42000c00
    334c:	00050003 	.word	0x00050003
    3350:	00060003 	.word	0x00060003
    3354:	00070003 	.word	0x00070003
    3358:	00010003 	.word	0x00010003
    335c:	001e0003 	.word	0x001e0003
    3360:	001f0003 	.word	0x001f0003
    3364:	00090003 	.word	0x00090003
    3368:	000a0003 	.word	0x000a0003
    336c:	000b0003 	.word	0x000b0003
    3370:	00110003 	.word	0x00110003
    3374:	00120003 	.word	0x00120003
    3378:	00130003 	.word	0x00130003
    337c:	000e0003 	.word	0x000e0003
    3380:	000f0003 	.word	0x000f0003
    3384:	00170003 	.word	0x00170003
    3388:	00180003 	.word	0x00180003
    338c:	00190003 	.word	0x00190003
    3390:	00040003 	.word	0x00040003
    3394:	00080003 	.word	0x00080003
    3398:	00100003 	.word	0x00100003
    339c:	00160003 	.word	0x00160003

000033a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    33a0:	b530      	push	{r4, r5, lr}
    33a2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    33a4:	4b0c      	ldr	r3, [pc, #48]	; (33d8 <_sercom_get_sercom_inst_index+0x38>)
    33a6:	466a      	mov	r2, sp
    33a8:	cb32      	ldmia	r3!, {r1, r4, r5}
    33aa:	c232      	stmia	r2!, {r1, r4, r5}
    33ac:	cb32      	ldmia	r3!, {r1, r4, r5}
    33ae:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    33b0:	9b00      	ldr	r3, [sp, #0]
    33b2:	4283      	cmp	r3, r0
    33b4:	d006      	beq.n	33c4 <_sercom_get_sercom_inst_index+0x24>
    33b6:	2301      	movs	r3, #1
    33b8:	009a      	lsls	r2, r3, #2
    33ba:	4669      	mov	r1, sp
    33bc:	5852      	ldr	r2, [r2, r1]
    33be:	4282      	cmp	r2, r0
    33c0:	d103      	bne.n	33ca <_sercom_get_sercom_inst_index+0x2a>
    33c2:	e000      	b.n	33c6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    33c4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    33c6:	b2d8      	uxtb	r0, r3
    33c8:	e003      	b.n	33d2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    33ca:	3301      	adds	r3, #1
    33cc:	2b06      	cmp	r3, #6
    33ce:	d1f3      	bne.n	33b8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    33d0:	2000      	movs	r0, #0
}
    33d2:	b007      	add	sp, #28
    33d4:	bd30      	pop	{r4, r5, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	00004294 	.word	0x00004294

000033dc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33dc:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    33de:	2a00      	cmp	r2, #0
    33e0:	d10d      	bne.n	33fe <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    33e2:	008b      	lsls	r3, r1, #2
    33e4:	4a07      	ldr	r2, [pc, #28]	; (3404 <extint_register_callback+0x28>)
    33e6:	589b      	ldr	r3, [r3, r2]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d103      	bne.n	33f4 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    33ec:	0089      	lsls	r1, r1, #2
    33ee:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    33f0:	2300      	movs	r3, #0
    33f2:	e004      	b.n	33fe <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    33f4:	4283      	cmp	r3, r0
    33f6:	d001      	beq.n	33fc <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    33f8:	231d      	movs	r3, #29
    33fa:	e000      	b.n	33fe <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    33fc:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    33fe:	1c18      	adds	r0, r3, #0
    3400:	4770      	bx	lr
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	20000e70 	.word	0x20000e70

00003408 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3408:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    340a:	2200      	movs	r2, #0
    340c:	4b15      	ldr	r3, [pc, #84]	; (3464 <EIC_Handler+0x5c>)
    340e:	701a      	strb	r2, [r3, #0]
    3410:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3412:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3414:	4e14      	ldr	r6, [pc, #80]	; (3468 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3416:	4c13      	ldr	r4, [pc, #76]	; (3464 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3418:	2b1f      	cmp	r3, #31
    341a:	d919      	bls.n	3450 <EIC_Handler+0x48>
    341c:	e00f      	b.n	343e <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    341e:	2100      	movs	r1, #0
    3420:	e000      	b.n	3424 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3422:	4912      	ldr	r1, [pc, #72]	; (346c <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3424:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3426:	009b      	lsls	r3, r3, #2
    3428:	599b      	ldr	r3, [r3, r6]
    342a:	2b00      	cmp	r3, #0
    342c:	d000      	beq.n	3430 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    342e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3430:	7823      	ldrb	r3, [r4, #0]
    3432:	3301      	adds	r3, #1
    3434:	b2db      	uxtb	r3, r3
    3436:	7023      	strb	r3, [r4, #0]
    3438:	2b0f      	cmp	r3, #15
    343a:	d9ed      	bls.n	3418 <EIC_Handler+0x10>
    343c:	e011      	b.n	3462 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    343e:	1c29      	adds	r1, r5, #0
    3440:	4019      	ands	r1, r3
    3442:	2201      	movs	r2, #1
    3444:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3446:	2100      	movs	r1, #0
    3448:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    344a:	4211      	tst	r1, r2
    344c:	d1e7      	bne.n	341e <EIC_Handler+0x16>
    344e:	e7ef      	b.n	3430 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3450:	1c29      	adds	r1, r5, #0
    3452:	4019      	ands	r1, r3
    3454:	2201      	movs	r2, #1
    3456:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3458:	4904      	ldr	r1, [pc, #16]	; (346c <EIC_Handler+0x64>)
    345a:	6949      	ldr	r1, [r1, #20]
    345c:	4211      	tst	r1, r2
    345e:	d1e0      	bne.n	3422 <EIC_Handler+0x1a>
    3460:	e7e6      	b.n	3430 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3462:	bd70      	pop	{r4, r5, r6, pc}
    3464:	20000fc0 	.word	0x20000fc0
    3468:	20000e70 	.word	0x20000e70
    346c:	40002400 	.word	0x40002400

00003470 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3470:	b500      	push	{lr}
    3472:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3474:	ab01      	add	r3, sp, #4
    3476:	2280      	movs	r2, #128	; 0x80
    3478:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    347a:	780a      	ldrb	r2, [r1, #0]
    347c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    347e:	784a      	ldrb	r2, [r1, #1]
    3480:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3482:	788a      	ldrb	r2, [r1, #2]
    3484:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3486:	1c19      	adds	r1, r3, #0
    3488:	4b01      	ldr	r3, [pc, #4]	; (3490 <port_pin_set_config+0x20>)
    348a:	4798      	blx	r3
}
    348c:	b003      	add	sp, #12
    348e:	bd00      	pop	{pc}
    3490:	00003c71 	.word	0x00003c71

00003494 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3494:	4770      	bx	lr
    3496:	46c0      	nop			; (mov r8, r8)

00003498 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3498:	4b0c      	ldr	r3, [pc, #48]	; (34cc <cpu_irq_enter_critical+0x34>)
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	2b00      	cmp	r3, #0
    349e:	d110      	bne.n	34c2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34a0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    34a4:	2b00      	cmp	r3, #0
    34a6:	d109      	bne.n	34bc <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    34a8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    34aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    34ae:	2200      	movs	r2, #0
    34b0:	4b07      	ldr	r3, [pc, #28]	; (34d0 <cpu_irq_enter_critical+0x38>)
    34b2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    34b4:	3201      	adds	r2, #1
    34b6:	4b07      	ldr	r3, [pc, #28]	; (34d4 <cpu_irq_enter_critical+0x3c>)
    34b8:	701a      	strb	r2, [r3, #0]
    34ba:	e002      	b.n	34c2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    34bc:	2200      	movs	r2, #0
    34be:	4b05      	ldr	r3, [pc, #20]	; (34d4 <cpu_irq_enter_critical+0x3c>)
    34c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    34c2:	4a02      	ldr	r2, [pc, #8]	; (34cc <cpu_irq_enter_critical+0x34>)
    34c4:	6813      	ldr	r3, [r2, #0]
    34c6:	3301      	adds	r3, #1
    34c8:	6013      	str	r3, [r2, #0]
}
    34ca:	4770      	bx	lr
    34cc:	20000068 	.word	0x20000068
    34d0:	20000014 	.word	0x20000014
    34d4:	2000006c 	.word	0x2000006c

000034d8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    34d8:	4b08      	ldr	r3, [pc, #32]	; (34fc <cpu_irq_leave_critical+0x24>)
    34da:	681a      	ldr	r2, [r3, #0]
    34dc:	3a01      	subs	r2, #1
    34de:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d109      	bne.n	34fa <cpu_irq_leave_critical+0x22>
    34e6:	4b06      	ldr	r3, [pc, #24]	; (3500 <cpu_irq_leave_critical+0x28>)
    34e8:	781b      	ldrb	r3, [r3, #0]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d005      	beq.n	34fa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    34ee:	2201      	movs	r2, #1
    34f0:	4b04      	ldr	r3, [pc, #16]	; (3504 <cpu_irq_leave_critical+0x2c>)
    34f2:	701a      	strb	r2, [r3, #0]
    34f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    34f8:	b662      	cpsie	i
	}
}
    34fa:	4770      	bx	lr
    34fc:	20000068 	.word	0x20000068
    3500:	2000006c 	.word	0x2000006c
    3504:	20000014 	.word	0x20000014

00003508 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3508:	b508      	push	{r3, lr}
	switch (clock_source) {
    350a:	2808      	cmp	r0, #8
    350c:	d803      	bhi.n	3516 <system_clock_source_get_hz+0xe>
    350e:	0080      	lsls	r0, r0, #2
    3510:	4b1c      	ldr	r3, [pc, #112]	; (3584 <system_clock_source_get_hz+0x7c>)
    3512:	581b      	ldr	r3, [r3, r0]
    3514:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    3516:	2000      	movs	r0, #0
    3518:	e032      	b.n	3580 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    351a:	4b1b      	ldr	r3, [pc, #108]	; (3588 <system_clock_source_get_hz+0x80>)
    351c:	6918      	ldr	r0, [r3, #16]
    351e:	e02f      	b.n	3580 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    3520:	4b1a      	ldr	r3, [pc, #104]	; (358c <system_clock_source_get_hz+0x84>)
    3522:	7d18      	ldrb	r0, [r3, #20]
    3524:	0700      	lsls	r0, r0, #28
    3526:	0f80      	lsrs	r0, r0, #30
    3528:	3001      	adds	r0, #1
    352a:	4b19      	ldr	r3, [pc, #100]	; (3590 <system_clock_source_get_hz+0x88>)
    352c:	4358      	muls	r0, r3
    352e:	e027      	b.n	3580 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3530:	4b15      	ldr	r3, [pc, #84]	; (3588 <system_clock_source_get_hz+0x80>)
    3532:	6958      	ldr	r0, [r3, #20]
    3534:	e024      	b.n	3580 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    3536:	4b14      	ldr	r3, [pc, #80]	; (3588 <system_clock_source_get_hz+0x80>)
    3538:	681b      	ldr	r3, [r3, #0]
    353a:	2002      	movs	r0, #2
    353c:	4018      	ands	r0, r3
    353e:	d01f      	beq.n	3580 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3540:	4912      	ldr	r1, [pc, #72]	; (358c <system_clock_source_get_hz+0x84>)
    3542:	2280      	movs	r2, #128	; 0x80
    3544:	0052      	lsls	r2, r2, #1
    3546:	68cb      	ldr	r3, [r1, #12]
    3548:	4213      	tst	r3, r2
    354a:	d0fc      	beq.n	3546 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    354c:	4b0e      	ldr	r3, [pc, #56]	; (3588 <system_clock_source_get_hz+0x80>)
    354e:	681b      	ldr	r3, [r3, #0]
    3550:	075b      	lsls	r3, r3, #29
    3552:	d514      	bpl.n	357e <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3554:	2000      	movs	r0, #0
    3556:	4b0f      	ldr	r3, [pc, #60]	; (3594 <system_clock_source_get_hz+0x8c>)
    3558:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    355a:	4b0b      	ldr	r3, [pc, #44]	; (3588 <system_clock_source_get_hz+0x80>)
    355c:	689b      	ldr	r3, [r3, #8]
    355e:	041b      	lsls	r3, r3, #16
    3560:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    3562:	4358      	muls	r0, r3
    3564:	e00c      	b.n	3580 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3566:	2328      	movs	r3, #40	; 0x28
    3568:	4a08      	ldr	r2, [pc, #32]	; (358c <system_clock_source_get_hz+0x84>)
    356a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    356c:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    356e:	079b      	lsls	r3, r3, #30
    3570:	d506      	bpl.n	3580 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3572:	4b05      	ldr	r3, [pc, #20]	; (3588 <system_clock_source_get_hz+0x80>)
    3574:	68d8      	ldr	r0, [r3, #12]
    3576:	e003      	b.n	3580 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3578:	2080      	movs	r0, #128	; 0x80
    357a:	0200      	lsls	r0, r0, #8
    357c:	e000      	b.n	3580 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    357e:	4806      	ldr	r0, [pc, #24]	; (3598 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    3580:	bd08      	pop	{r3, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	000042ac 	.word	0x000042ac
    3588:	20000070 	.word	0x20000070
    358c:	40000c00 	.word	0x40000c00
    3590:	003d0900 	.word	0x003d0900
    3594:	00003b99 	.word	0x00003b99
    3598:	02dc6c00 	.word	0x02dc6c00

0000359c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    359c:	b5f0      	push	{r4, r5, r6, r7, lr}
    359e:	4657      	mov	r7, sl
    35a0:	464e      	mov	r6, r9
    35a2:	4645      	mov	r5, r8
    35a4:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    35a6:	4e1c      	ldr	r6, [pc, #112]	; (3618 <system_clock_source_osc32k_set_config+0x7c>)
    35a8:	69b3      	ldr	r3, [r6, #24]
    35aa:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    35ac:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    35ae:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    35b0:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    35b2:	78c3      	ldrb	r3, [r0, #3]
    35b4:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    35b6:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    35b8:	7883      	ldrb	r3, [r0, #2]
    35ba:	2001      	movs	r0, #1
    35bc:	4003      	ands	r3, r0
    35be:	009b      	lsls	r3, r3, #2
    35c0:	469a      	mov	sl, r3
    35c2:	2204      	movs	r2, #4
    35c4:	4690      	mov	r8, r2
    35c6:	4662      	mov	r2, ip
    35c8:	4643      	mov	r3, r8
    35ca:	439a      	bics	r2, r3
    35cc:	1c13      	adds	r3, r2, #0
    35ce:	4652      	mov	r2, sl
    35d0:	431a      	orrs	r2, r3
    35d2:	1c13      	adds	r3, r2, #0
    35d4:	4001      	ands	r1, r0
    35d6:	00c9      	lsls	r1, r1, #3
    35d8:	2208      	movs	r2, #8
    35da:	4393      	bics	r3, r2
    35dc:	430b      	orrs	r3, r1
    35de:	464a      	mov	r2, r9
    35e0:	4002      	ands	r2, r0
    35e2:	0192      	lsls	r2, r2, #6
    35e4:	2140      	movs	r1, #64	; 0x40
    35e6:	438b      	bics	r3, r1
    35e8:	4313      	orrs	r3, r2
    35ea:	4007      	ands	r7, r0
    35ec:	01ff      	lsls	r7, r7, #7
    35ee:	2280      	movs	r2, #128	; 0x80
    35f0:	4393      	bics	r3, r2
    35f2:	433b      	orrs	r3, r7
    35f4:	3a79      	subs	r2, #121	; 0x79
    35f6:	4015      	ands	r5, r2
    35f8:	022d      	lsls	r5, r5, #8
    35fa:	4f08      	ldr	r7, [pc, #32]	; (361c <system_clock_source_osc32k_set_config+0x80>)
    35fc:	403b      	ands	r3, r7
    35fe:	432b      	orrs	r3, r5
    3600:	4004      	ands	r4, r0
    3602:	0320      	lsls	r0, r4, #12
    3604:	4c06      	ldr	r4, [pc, #24]	; (3620 <system_clock_source_osc32k_set_config+0x84>)
    3606:	401c      	ands	r4, r3
    3608:	4304      	orrs	r4, r0
    360a:	61b4      	str	r4, [r6, #24]
}
    360c:	bc1c      	pop	{r2, r3, r4}
    360e:	4690      	mov	r8, r2
    3610:	4699      	mov	r9, r3
    3612:	46a2      	mov	sl, r4
    3614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	40001000 	.word	0x40001000
    361c:	fffff8ff 	.word	0xfffff8ff
    3620:	ffffefff 	.word	0xffffefff

00003624 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3624:	b5f0      	push	{r4, r5, r6, r7, lr}
    3626:	465f      	mov	r7, fp
    3628:	4656      	mov	r6, sl
    362a:	464d      	mov	r5, r9
    362c:	4644      	mov	r4, r8
    362e:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    3630:	4e25      	ldr	r6, [pc, #148]	; (36c8 <system_clock_source_xosc32k_set_config+0xa4>)
    3632:	6973      	ldr	r3, [r6, #20]
    3634:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    3636:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    3638:	7803      	ldrb	r3, [r0, #0]
    363a:	425a      	negs	r2, r3
    363c:	415a      	adcs	r2, r3
    363e:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    3640:	7883      	ldrb	r3, [r0, #2]
    3642:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
    3644:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    3646:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3648:	7a02      	ldrb	r2, [r0, #8]
    364a:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
    364c:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    364e:	6842      	ldr	r2, [r0, #4]
    3650:	481e      	ldr	r0, [pc, #120]	; (36cc <system_clock_source_xosc32k_set_config+0xa8>)
    3652:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
    3654:	2001      	movs	r0, #1
    3656:	4642      	mov	r2, r8
    3658:	0092      	lsls	r2, r2, #2
    365a:	4690      	mov	r8, r2
    365c:	2204      	movs	r2, #4
    365e:	4691      	mov	r9, r2
    3660:	4662      	mov	r2, ip
    3662:	4649      	mov	r1, r9
    3664:	438a      	bics	r2, r1
    3666:	4694      	mov	ip, r2
    3668:	4642      	mov	r2, r8
    366a:	4661      	mov	r1, ip
    366c:	430a      	orrs	r2, r1
    366e:	4694      	mov	ip, r2
    3670:	4003      	ands	r3, r0
    3672:	00db      	lsls	r3, r3, #3
    3674:	2208      	movs	r2, #8
    3676:	4690      	mov	r8, r2
    3678:	4662      	mov	r2, ip
    367a:	4641      	mov	r1, r8
    367c:	438a      	bics	r2, r1
    367e:	4313      	orrs	r3, r2
    3680:	4651      	mov	r1, sl
    3682:	4001      	ands	r1, r0
    3684:	0109      	lsls	r1, r1, #4
    3686:	2210      	movs	r2, #16
    3688:	4393      	bics	r3, r2
    368a:	430b      	orrs	r3, r1
    368c:	465a      	mov	r2, fp
    368e:	4002      	ands	r2, r0
    3690:	0192      	lsls	r2, r2, #6
    3692:	2140      	movs	r1, #64	; 0x40
    3694:	438b      	bics	r3, r1
    3696:	4313      	orrs	r3, r2
    3698:	4007      	ands	r7, r0
    369a:	01ff      	lsls	r7, r7, #7
    369c:	2280      	movs	r2, #128	; 0x80
    369e:	4393      	bics	r3, r2
    36a0:	433b      	orrs	r3, r7
    36a2:	3a79      	subs	r2, #121	; 0x79
    36a4:	4015      	ands	r5, r2
    36a6:	022d      	lsls	r5, r5, #8
    36a8:	4f09      	ldr	r7, [pc, #36]	; (36d0 <system_clock_source_xosc32k_set_config+0xac>)
    36aa:	403b      	ands	r3, r7
    36ac:	432b      	orrs	r3, r5
    36ae:	4004      	ands	r4, r0
    36b0:	0320      	lsls	r0, r4, #12
    36b2:	4c08      	ldr	r4, [pc, #32]	; (36d4 <system_clock_source_xosc32k_set_config+0xb0>)
    36b4:	401c      	ands	r4, r3
    36b6:	4304      	orrs	r4, r0
    36b8:	6174      	str	r4, [r6, #20]
}
    36ba:	bc3c      	pop	{r2, r3, r4, r5}
    36bc:	4690      	mov	r8, r2
    36be:	4699      	mov	r9, r3
    36c0:	46a2      	mov	sl, r4
    36c2:	46ab      	mov	fp, r5
    36c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	40001000 	.word	0x40001000
    36cc:	20000070 	.word	0x20000070
    36d0:	fffff8ff 	.word	0xfffff8ff
    36d4:	ffffefff 	.word	0xffffefff

000036d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    36d8:	2808      	cmp	r0, #8
    36da:	d803      	bhi.n	36e4 <system_clock_source_enable+0xc>
    36dc:	0080      	lsls	r0, r0, #2
    36de:	4b29      	ldr	r3, [pc, #164]	; (3784 <system_clock_source_enable+0xac>)
    36e0:	581b      	ldr	r3, [r3, r0]
    36e2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    36e4:	2017      	movs	r0, #23
    36e6:	e04b      	b.n	3780 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    36e8:	4a27      	ldr	r2, [pc, #156]	; (3788 <system_clock_source_enable+0xb0>)
    36ea:	7d11      	ldrb	r1, [r2, #20]
    36ec:	2302      	movs	r3, #2
    36ee:	430b      	orrs	r3, r1
    36f0:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    36f2:	2000      	movs	r0, #0
    36f4:	e044      	b.n	3780 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    36f6:	4a25      	ldr	r2, [pc, #148]	; (378c <system_clock_source_enable+0xb4>)
    36f8:	6991      	ldr	r1, [r2, #24]
    36fa:	2302      	movs	r3, #2
    36fc:	430b      	orrs	r3, r1
    36fe:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3700:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    3702:	e03d      	b.n	3780 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3704:	4a20      	ldr	r2, [pc, #128]	; (3788 <system_clock_source_enable+0xb0>)
    3706:	8a11      	ldrh	r1, [r2, #16]
    3708:	2302      	movs	r3, #2
    370a:	430b      	orrs	r3, r1
    370c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    370e:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3710:	e036      	b.n	3780 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    3712:	4a1e      	ldr	r2, [pc, #120]	; (378c <system_clock_source_enable+0xb4>)
    3714:	6951      	ldr	r1, [r2, #20]
    3716:	2302      	movs	r3, #2
    3718:	430b      	orrs	r3, r1
    371a:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    371c:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    371e:	e02f      	b.n	3780 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    3720:	491b      	ldr	r1, [pc, #108]	; (3790 <system_clock_source_enable+0xb8>)
    3722:	680b      	ldr	r3, [r1, #0]
    3724:	2202      	movs	r2, #2
    3726:	4313      	orrs	r3, r2
    3728:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    372a:	4b17      	ldr	r3, [pc, #92]	; (3788 <system_clock_source_enable+0xb0>)
    372c:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    372e:	1c19      	adds	r1, r3, #0
    3730:	32fe      	adds	r2, #254	; 0xfe
    3732:	68cb      	ldr	r3, [r1, #12]
    3734:	4213      	tst	r3, r2
    3736:	d0fc      	beq.n	3732 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3738:	4a15      	ldr	r2, [pc, #84]	; (3790 <system_clock_source_enable+0xb8>)
    373a:	6891      	ldr	r1, [r2, #8]
    373c:	4b12      	ldr	r3, [pc, #72]	; (3788 <system_clock_source_enable+0xb0>)
    373e:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3740:	6852      	ldr	r2, [r2, #4]
    3742:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    3744:	2200      	movs	r2, #0
    3746:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3748:	1c19      	adds	r1, r3, #0
    374a:	3201      	adds	r2, #1
    374c:	32ff      	adds	r2, #255	; 0xff
    374e:	68cb      	ldr	r3, [r1, #12]
    3750:	4213      	tst	r3, r2
    3752:	d0fc      	beq.n	374e <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3754:	4b0e      	ldr	r3, [pc, #56]	; (3790 <system_clock_source_enable+0xb8>)
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	b29b      	uxth	r3, r3
    375a:	4a0b      	ldr	r2, [pc, #44]	; (3788 <system_clock_source_enable+0xb0>)
    375c:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    375e:	2000      	movs	r0, #0
    3760:	e00e      	b.n	3780 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    3762:	4909      	ldr	r1, [pc, #36]	; (3788 <system_clock_source_enable+0xb0>)
    3764:	2228      	movs	r2, #40	; 0x28
    3766:	5c88      	ldrb	r0, [r1, r2]
    3768:	2302      	movs	r3, #2
    376a:	4303      	orrs	r3, r0
    376c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    376e:	1c08      	adds	r0, r1, #0
    3770:	2138      	movs	r1, #56	; 0x38
    3772:	3a26      	subs	r2, #38	; 0x26
    3774:	5c43      	ldrb	r3, [r0, r1]
    3776:	4213      	tst	r3, r2
    3778:	d1fc      	bne.n	3774 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    377a:	2000      	movs	r0, #0
    377c:	e000      	b.n	3780 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    377e:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    3780:	4770      	bx	lr
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	000042d0 	.word	0x000042d0
    3788:	40000c00 	.word	0x40000c00
    378c:	40001000 	.word	0x40001000
    3790:	20000070 	.word	0x20000070

00003794 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3794:	2808      	cmp	r0, #8
    3796:	d832      	bhi.n	37fe <system_clock_source_disable+0x6a>
    3798:	0080      	lsls	r0, r0, #2
    379a:	4b1a      	ldr	r3, [pc, #104]	; (3804 <system_clock_source_disable+0x70>)
    379c:	581b      	ldr	r3, [r3, r0]
    379e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    37a0:	4a19      	ldr	r2, [pc, #100]	; (3808 <system_clock_source_disable+0x74>)
    37a2:	7d13      	ldrb	r3, [r2, #20]
    37a4:	2102      	movs	r1, #2
    37a6:	438b      	bics	r3, r1
    37a8:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    37aa:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    37ac:	e028      	b.n	3800 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    37ae:	4a17      	ldr	r2, [pc, #92]	; (380c <system_clock_source_disable+0x78>)
    37b0:	6993      	ldr	r3, [r2, #24]
    37b2:	2102      	movs	r1, #2
    37b4:	438b      	bics	r3, r1
    37b6:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    37b8:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    37ba:	e021      	b.n	3800 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    37bc:	4a12      	ldr	r2, [pc, #72]	; (3808 <system_clock_source_disable+0x74>)
    37be:	8a13      	ldrh	r3, [r2, #16]
    37c0:	2102      	movs	r1, #2
    37c2:	438b      	bics	r3, r1
    37c4:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    37c6:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    37c8:	e01a      	b.n	3800 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    37ca:	4a10      	ldr	r2, [pc, #64]	; (380c <system_clock_source_disable+0x78>)
    37cc:	6953      	ldr	r3, [r2, #20]
    37ce:	2102      	movs	r1, #2
    37d0:	438b      	bics	r3, r1
    37d2:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    37d4:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    37d6:	e013      	b.n	3800 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    37d8:	4b0d      	ldr	r3, [pc, #52]	; (3810 <system_clock_source_disable+0x7c>)
    37da:	681a      	ldr	r2, [r3, #0]
    37dc:	2102      	movs	r1, #2
    37de:	438a      	bics	r2, r1
    37e0:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	b29b      	uxth	r3, r3
    37e6:	4a08      	ldr	r2, [pc, #32]	; (3808 <system_clock_source_disable+0x74>)
    37e8:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    37ea:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    37ec:	e008      	b.n	3800 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    37ee:	4906      	ldr	r1, [pc, #24]	; (3808 <system_clock_source_disable+0x74>)
    37f0:	2228      	movs	r2, #40	; 0x28
    37f2:	5c8b      	ldrb	r3, [r1, r2]
    37f4:	2002      	movs	r0, #2
    37f6:	4383      	bics	r3, r0
    37f8:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    37fa:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    37fc:	e000      	b.n	3800 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    37fe:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    3800:	4770      	bx	lr
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	000042f4 	.word	0x000042f4
    3808:	40000c00 	.word	0x40000c00
    380c:	40001000 	.word	0x40001000
    3810:	20000070 	.word	0x20000070

00003814 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3814:	b5f0      	push	{r4, r5, r6, r7, lr}
    3816:	464f      	mov	r7, r9
    3818:	4646      	mov	r6, r8
    381a:	b4c0      	push	{r6, r7}
    381c:	b089      	sub	sp, #36	; 0x24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    381e:	2280      	movs	r2, #128	; 0x80
    3820:	0052      	lsls	r2, r2, #1
    3822:	4b4e      	ldr	r3, [pc, #312]	; (395c <system_clock_init+0x148>)
    3824:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    3826:	3afd      	subs	r2, #253	; 0xfd
    3828:	4b4d      	ldr	r3, [pc, #308]	; (3960 <system_clock_init+0x14c>)
    382a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    382c:	4a4d      	ldr	r2, [pc, #308]	; (3964 <system_clock_init+0x150>)
    382e:	6853      	ldr	r3, [r2, #4]
    3830:	211e      	movs	r1, #30
    3832:	438b      	bics	r3, r1
    3834:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3836:	2380      	movs	r3, #128	; 0x80
    3838:	05db      	lsls	r3, r3, #23
    383a:	789b      	ldrb	r3, [r3, #2]
    383c:	2b02      	cmp	r3, #2
    383e:	d009      	beq.n	3854 <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3840:	2380      	movs	r3, #128	; 0x80
    3842:	05db      	lsls	r3, r3, #23
    3844:	2201      	movs	r2, #1
    3846:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    3848:	3201      	adds	r2, #1
    384a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    384c:	1c1a      	adds	r2, r3, #0
    384e:	7993      	ldrb	r3, [r2, #6]
    3850:	2b00      	cmp	r3, #0
    3852:	d0fc      	beq.n	384e <system_clock_init+0x3a>
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    3854:	a805      	add	r0, sp, #20
    3856:	2380      	movs	r3, #128	; 0x80
    3858:	021b      	lsls	r3, r3, #8
    385a:	6043      	str	r3, [r0, #4]
	config->enable_1khz_output  = false;
	config->enable_32khz_output = true;
    385c:	2301      	movs	r3, #1
    385e:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    3860:	2200      	movs	r2, #0
    3862:	7282      	strb	r2, [r0, #10]
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    3864:	7003      	strb	r3, [r0, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3866:	2104      	movs	r1, #4
    3868:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    386a:	7083      	strb	r3, [r0, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    386c:	7242      	strb	r2, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    386e:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3870:	4b3d      	ldr	r3, [pc, #244]	; (3968 <system_clock_init+0x154>)
    3872:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3874:	2005      	movs	r0, #5
    3876:	4b3d      	ldr	r3, [pc, #244]	; (396c <system_clock_init+0x158>)
    3878:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    387a:	493d      	ldr	r1, [pc, #244]	; (3970 <system_clock_init+0x15c>)
    387c:	2201      	movs	r2, #1
    387e:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3880:	421a      	tst	r2, r3
    3882:	d0fc      	beq.n	387e <system_clock_init+0x6a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    3884:	4a3a      	ldr	r2, [pc, #232]	; (3970 <system_clock_init+0x15c>)
    3886:	6951      	ldr	r1, [r2, #20]
    3888:	2380      	movs	r3, #128	; 0x80
    388a:	430b      	orrs	r3, r1
    388c:	6153      	str	r3, [r2, #20]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    388e:	a803      	add	r0, sp, #12
    3890:	2501      	movs	r5, #1
    3892:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    3894:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    3896:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3898:	2307      	movs	r3, #7
    389a:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    389c:	2400      	movs	r4, #0
    389e:	7144      	strb	r4, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    38a0:	70c5      	strb	r5, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    38a2:	4b34      	ldr	r3, [pc, #208]	; (3974 <system_clock_init+0x160>)
    38a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    38a6:	2004      	movs	r0, #4
    38a8:	4b30      	ldr	r3, [pc, #192]	; (396c <system_clock_init+0x158>)
    38aa:	4798      	blx	r3
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    38ac:	4b2b      	ldr	r3, [pc, #172]	; (395c <system_clock_init+0x148>)
    38ae:	7d1a      	ldrb	r2, [r3, #20]
    38b0:	2180      	movs	r1, #128	; 0x80
    38b2:	4249      	negs	r1, r1
    38b4:	430a      	orrs	r2, r1
    38b6:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    38b8:	7d19      	ldrb	r1, [r3, #20]
    38ba:	2240      	movs	r2, #64	; 0x40
    38bc:	430a      	orrs	r2, r1
    38be:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    38c0:	4b2d      	ldr	r3, [pc, #180]	; (3978 <system_clock_init+0x164>)
    38c2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    38c4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    38c6:	466b      	mov	r3, sp
    38c8:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    38ca:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    38cc:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    38ce:	2305      	movs	r3, #5
    38d0:	466a      	mov	r2, sp
    38d2:	7013      	strb	r3, [r2, #0]
    38d4:	2001      	movs	r0, #1
    38d6:	4669      	mov	r1, sp
    38d8:	4b28      	ldr	r3, [pc, #160]	; (397c <system_clock_init+0x168>)
    38da:	4698      	mov	r8, r3
    38dc:	4798      	blx	r3
    38de:	2001      	movs	r0, #1
    38e0:	4f27      	ldr	r7, [pc, #156]	; (3980 <system_clock_init+0x16c>)
    38e2:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    38e4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    38e6:	466b      	mov	r3, sp
    38e8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    38ea:	2306      	movs	r3, #6
    38ec:	4699      	mov	r9, r3
    38ee:	466b      	mov	r3, sp
    38f0:	464a      	mov	r2, r9
    38f2:	701a      	strb	r2, [r3, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    38f4:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    38f6:	725c      	strb	r4, [r3, #9]
    38f8:	2002      	movs	r0, #2
    38fa:	4669      	mov	r1, sp
    38fc:	47c0      	blx	r8
    38fe:	2002      	movs	r0, #2
    3900:	47b8      	blx	r7
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_CPUDIV_CPUDIV_Msk) == divider);
	MCLK->CPUDIV.reg = (uint32_t)divider;
    3902:	4e20      	ldr	r6, [pc, #128]	; (3984 <system_clock_init+0x170>)
    3904:	7134      	strb	r4, [r6, #4]
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_LPDIV_LPDIV_Msk) == divider);
	MCLK->LPDIV.reg = (uint32_t)divider;
    3906:	7174      	strb	r4, [r6, #5]
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_BUPDIV_BUPDIV_Msk) == divider);
	MCLK->BUPDIV.reg = (uint32_t)divider;
    3908:	71b4      	strb	r4, [r6, #6]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    390a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    390c:	466b      	mov	r3, sp
    390e:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3910:	464a      	mov	r2, r9
    3912:	701a      	strb	r2, [r3, #0]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    3914:	725c      	strb	r4, [r3, #9]
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3916:	721d      	strb	r5, [r3, #8]
    3918:	2000      	movs	r0, #0
    391a:	4669      	mov	r1, sp
    391c:	47c0      	blx	r8
    391e:	2000      	movs	r0, #0
    3920:	47b8      	blx	r7
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> (MCLK->CPUDIV.reg - 1));
    3922:	2000      	movs	r0, #0
    3924:	4b18      	ldr	r3, [pc, #96]	; (3988 <system_clock_init+0x174>)
    3926:	4798      	blx	r3
    3928:	7933      	ldrb	r3, [r6, #4]
    392a:	3b01      	subs	r3, #1
    392c:	40d8      	lsrs	r0, r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    392e:	4b17      	ldr	r3, [pc, #92]	; (398c <system_clock_init+0x178>)
    3930:	4298      	cmp	r0, r3
    3932:	d80e      	bhi.n	3952 <system_clock_init+0x13e>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3934:	2380      	movs	r3, #128	; 0x80
    3936:	05db      	lsls	r3, r3, #23
    3938:	789b      	ldrb	r3, [r3, #2]
    393a:	2b00      	cmp	r3, #0
    393c:	d009      	beq.n	3952 <system_clock_init+0x13e>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    393e:	2380      	movs	r3, #128	; 0x80
    3940:	05db      	lsls	r3, r3, #23
    3942:	2201      	movs	r2, #1
    3944:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    3946:	2200      	movs	r2, #0
    3948:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    394a:	1c1a      	adds	r2, r3, #0
    394c:	7993      	ldrb	r3, [r2, #6]
    394e:	2b00      	cmp	r3, #0
    3950:	d0fc      	beq.n	394c <system_clock_init+0x138>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3952:	b009      	add	sp, #36	; 0x24
    3954:	bc0c      	pop	{r2, r3}
    3956:	4690      	mov	r8, r2
    3958:	4699      	mov	r9, r3
    395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395c:	40000c00 	.word	0x40000c00
    3960:	40001400 	.word	0x40001400
    3964:	41004000 	.word	0x41004000
    3968:	00003625 	.word	0x00003625
    396c:	000036d9 	.word	0x000036d9
    3970:	40001000 	.word	0x40001000
    3974:	0000359d 	.word	0x0000359d
    3978:	00003991 	.word	0x00003991
    397c:	000039b5 	.word	0x000039b5
    3980:	00003a61 	.word	0x00003a61
    3984:	40000400 	.word	0x40000400
    3988:	00003aa1 	.word	0x00003aa1
    398c:	00b71b00 	.word	0x00b71b00

00003990 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3990:	4a06      	ldr	r2, [pc, #24]	; (39ac <system_gclk_init+0x1c>)
    3992:	6951      	ldr	r1, [r2, #20]
    3994:	2340      	movs	r3, #64	; 0x40
    3996:	430b      	orrs	r3, r1
    3998:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    399a:	2201      	movs	r2, #1
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <system_gclk_init+0x20>)
    399e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    39a0:	1c19      	adds	r1, r3, #0
    39a2:	780b      	ldrb	r3, [r1, #0]
    39a4:	4213      	tst	r3, r2
    39a6:	d1fc      	bne.n	39a2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    39a8:	4770      	bx	lr
    39aa:	46c0      	nop			; (mov r8, r8)
    39ac:	40000400 	.word	0x40000400
    39b0:	40001800 	.word	0x40001800

000039b4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    39b4:	b570      	push	{r4, r5, r6, lr}
    39b6:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    39b8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    39ba:	784b      	ldrb	r3, [r1, #1]
    39bc:	2b00      	cmp	r3, #0
    39be:	d002      	beq.n	39c6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    39c0:	2380      	movs	r3, #128	; 0x80
    39c2:	00db      	lsls	r3, r3, #3
    39c4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    39c6:	7a4b      	ldrb	r3, [r1, #9]
    39c8:	2b00      	cmp	r3, #0
    39ca:	d002      	beq.n	39d2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    39cc:	2380      	movs	r3, #128	; 0x80
    39ce:	011b      	lsls	r3, r3, #4
    39d0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    39d2:	684a      	ldr	r2, [r1, #4]
    39d4:	2a01      	cmp	r2, #1
    39d6:	d917      	bls.n	3a08 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    39d8:	1e53      	subs	r3, r2, #1
    39da:	421a      	tst	r2, r3
    39dc:	d10f      	bne.n	39fe <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    39de:	2a02      	cmp	r2, #2
    39e0:	d906      	bls.n	39f0 <system_gclk_gen_set_config+0x3c>
    39e2:	2302      	movs	r3, #2
    39e4:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    39e6:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    39e8:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    39ea:	429a      	cmp	r2, r3
    39ec:	d8fb      	bhi.n	39e6 <system_gclk_gen_set_config+0x32>
    39ee:	e000      	b.n	39f2 <system_gclk_gen_set_config+0x3e>
    39f0:	2000      	movs	r0, #0
    39f2:	2380      	movs	r3, #128	; 0x80
    39f4:	015b      	lsls	r3, r3, #5
    39f6:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    39f8:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    39fa:	4305      	orrs	r5, r0
    39fc:	e004      	b.n	3a08 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    39fe:	0412      	lsls	r2, r2, #16
    3a00:	2380      	movs	r3, #128	; 0x80
    3a02:	009b      	lsls	r3, r3, #2
    3a04:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3a06:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3a08:	7a0b      	ldrb	r3, [r1, #8]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d002      	beq.n	3a14 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3a0e:	2380      	movs	r3, #128	; 0x80
    3a10:	019b      	lsls	r3, r3, #6
    3a12:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3a14:	2604      	movs	r6, #4
    3a16:	40a6      	lsls	r6, r4
    3a18:	490d      	ldr	r1, [pc, #52]	; (3a50 <system_gclk_gen_set_config+0x9c>)
    3a1a:	4a0e      	ldr	r2, [pc, #56]	; (3a54 <system_gclk_gen_set_config+0xa0>)
    3a1c:	684b      	ldr	r3, [r1, #4]
    3a1e:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    3a20:	421e      	tst	r6, r3
    3a22:	d1fb      	bne.n	3a1c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3a24:	4b0c      	ldr	r3, [pc, #48]	; (3a58 <system_gclk_gen_set_config+0xa4>)
    3a26:	4798      	blx	r3
    3a28:	00a4      	lsls	r4, r4, #2
    3a2a:	4b09      	ldr	r3, [pc, #36]	; (3a50 <system_gclk_gen_set_config+0x9c>)
    3a2c:	469c      	mov	ip, r3
    3a2e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3a30:	6a20      	ldr	r0, [r4, #32]
    3a32:	2380      	movs	r3, #128	; 0x80
    3a34:	005b      	lsls	r3, r3, #1
    3a36:	4018      	ands	r0, r3
    3a38:	4328      	orrs	r0, r5
    3a3a:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3a3c:	4661      	mov	r1, ip
    3a3e:	4a05      	ldr	r2, [pc, #20]	; (3a54 <system_gclk_gen_set_config+0xa0>)
    3a40:	684b      	ldr	r3, [r1, #4]
    3a42:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    3a44:	421e      	tst	r6, r3
    3a46:	d1fb      	bne.n	3a40 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3a48:	4b04      	ldr	r3, [pc, #16]	; (3a5c <system_gclk_gen_set_config+0xa8>)
    3a4a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3a4c:	bd70      	pop	{r4, r5, r6, pc}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	40001800 	.word	0x40001800
    3a54:	000007fc 	.word	0x000007fc
    3a58:	00003499 	.word	0x00003499
    3a5c:	000034d9 	.word	0x000034d9

00003a60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3a60:	b510      	push	{r4, lr}
    3a62:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3a64:	2204      	movs	r2, #4
    3a66:	4082      	lsls	r2, r0
    3a68:	4809      	ldr	r0, [pc, #36]	; (3a90 <system_gclk_gen_enable+0x30>)
    3a6a:	490a      	ldr	r1, [pc, #40]	; (3a94 <system_gclk_gen_enable+0x34>)
    3a6c:	6843      	ldr	r3, [r0, #4]
    3a6e:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3a70:	421a      	tst	r2, r3
    3a72:	d1fb      	bne.n	3a6c <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3a74:	4b08      	ldr	r3, [pc, #32]	; (3a98 <system_gclk_gen_enable+0x38>)
    3a76:	4798      	blx	r3
    3a78:	00a4      	lsls	r4, r4, #2
    3a7a:	4b05      	ldr	r3, [pc, #20]	; (3a90 <system_gclk_gen_enable+0x30>)
    3a7c:	469c      	mov	ip, r3
    3a7e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3a80:	6a23      	ldr	r3, [r4, #32]
    3a82:	2280      	movs	r2, #128	; 0x80
    3a84:	0052      	lsls	r2, r2, #1
    3a86:	4313      	orrs	r3, r2
    3a88:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3a8a:	4b04      	ldr	r3, [pc, #16]	; (3a9c <system_gclk_gen_enable+0x3c>)
    3a8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3a8e:	bd10      	pop	{r4, pc}
    3a90:	40001800 	.word	0x40001800
    3a94:	000007fc 	.word	0x000007fc
    3a98:	00003499 	.word	0x00003499
    3a9c:	000034d9 	.word	0x000034d9

00003aa0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aa2:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3aa4:	2204      	movs	r2, #4
    3aa6:	4082      	lsls	r2, r0
    3aa8:	4812      	ldr	r0, [pc, #72]	; (3af4 <system_gclk_gen_get_hz+0x54>)
    3aaa:	4913      	ldr	r1, [pc, #76]	; (3af8 <system_gclk_gen_get_hz+0x58>)
    3aac:	6843      	ldr	r3, [r0, #4]
    3aae:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3ab0:	421a      	tst	r2, r3
    3ab2:	d1fb      	bne.n	3aac <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3ab4:	4b11      	ldr	r3, [pc, #68]	; (3afc <system_gclk_gen_get_hz+0x5c>)
    3ab6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3ab8:	4f0e      	ldr	r7, [pc, #56]	; (3af4 <system_gclk_gen_get_hz+0x54>)
    3aba:	3408      	adds	r4, #8
    3abc:	00a4      	lsls	r4, r4, #2
    3abe:	59e3      	ldr	r3, [r4, r7]
    3ac0:	200f      	movs	r0, #15
    3ac2:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3ac4:	4b0e      	ldr	r3, [pc, #56]	; (3b00 <system_gclk_gen_get_hz+0x60>)
    3ac6:	4798      	blx	r3
    3ac8:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3aca:	59e5      	ldr	r5, [r4, r7]
    3acc:	04ed      	lsls	r5, r5, #19
    3ace:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3ad0:	59e4      	ldr	r4, [r4, r7]
    3ad2:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3ad4:	4b0b      	ldr	r3, [pc, #44]	; (3b04 <system_gclk_gen_get_hz+0x64>)
    3ad6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3ad8:	2d00      	cmp	r5, #0
    3ada:	d107      	bne.n	3aec <system_gclk_gen_get_hz+0x4c>
    3adc:	2c01      	cmp	r4, #1
    3ade:	d907      	bls.n	3af0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3ae0:	1c30      	adds	r0, r6, #0
    3ae2:	1c21      	adds	r1, r4, #0
    3ae4:	4b08      	ldr	r3, [pc, #32]	; (3b08 <system_gclk_gen_get_hz+0x68>)
    3ae6:	4798      	blx	r3
    3ae8:	1c06      	adds	r6, r0, #0
    3aea:	e001      	b.n	3af0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3aec:	3401      	adds	r4, #1
    3aee:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3af0:	1c30      	adds	r0, r6, #0
    3af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3af4:	40001800 	.word	0x40001800
    3af8:	000007fc 	.word	0x000007fc
    3afc:	00003499 	.word	0x00003499
    3b00:	00003509 	.word	0x00003509
    3b04:	000034d9 	.word	0x000034d9
    3b08:	00003e61 	.word	0x00003e61

00003b0c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3b0c:	b510      	push	{r4, lr}
    3b0e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3b10:	4b08      	ldr	r3, [pc, #32]	; (3b34 <system_gclk_chan_enable+0x28>)
    3b12:	4798      	blx	r3
    3b14:	00a4      	lsls	r4, r4, #2
    3b16:	4b08      	ldr	r3, [pc, #32]	; (3b38 <system_gclk_chan_enable+0x2c>)
    3b18:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3b1a:	2280      	movs	r2, #128	; 0x80
    3b1c:	5881      	ldr	r1, [r0, r2]
    3b1e:	2340      	movs	r3, #64	; 0x40
    3b20:	430b      	orrs	r3, r1
    3b22:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3b24:	2180      	movs	r1, #128	; 0x80
    3b26:	3a40      	subs	r2, #64	; 0x40
    3b28:	5843      	ldr	r3, [r0, r1]
    3b2a:	421a      	tst	r2, r3
    3b2c:	d0fc      	beq.n	3b28 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3b2e:	4b03      	ldr	r3, [pc, #12]	; (3b3c <system_gclk_chan_enable+0x30>)
    3b30:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3b32:	bd10      	pop	{r4, pc}
    3b34:	00003499 	.word	0x00003499
    3b38:	40001800 	.word	0x40001800
    3b3c:	000034d9 	.word	0x000034d9

00003b40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3b40:	b510      	push	{r4, lr}
    3b42:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3b44:	4b08      	ldr	r3, [pc, #32]	; (3b68 <system_gclk_chan_disable+0x28>)
    3b46:	4798      	blx	r3
    3b48:	00a4      	lsls	r4, r4, #2
    3b4a:	4b08      	ldr	r3, [pc, #32]	; (3b6c <system_gclk_chan_disable+0x2c>)
    3b4c:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3b4e:	2280      	movs	r2, #128	; 0x80
    3b50:	5883      	ldr	r3, [r0, r2]
    3b52:	2140      	movs	r1, #64	; 0x40
    3b54:	438b      	bics	r3, r1
    3b56:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3b58:	3140      	adds	r1, #64	; 0x40
    3b5a:	3a40      	subs	r2, #64	; 0x40
    3b5c:	5843      	ldr	r3, [r0, r1]
    3b5e:	421a      	tst	r2, r3
    3b60:	d1fc      	bne.n	3b5c <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3b62:	4b03      	ldr	r3, [pc, #12]	; (3b70 <system_gclk_chan_disable+0x30>)
    3b64:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3b66:	bd10      	pop	{r4, pc}
    3b68:	00003499 	.word	0x00003499
    3b6c:	40001800 	.word	0x40001800
    3b70:	000034d9 	.word	0x000034d9

00003b74 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3b74:	b538      	push	{r3, r4, r5, lr}
    3b76:	1c04      	adds	r4, r0, #0
    3b78:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3b7a:	4b05      	ldr	r3, [pc, #20]	; (3b90 <system_gclk_chan_set_config+0x1c>)
    3b7c:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3b7e:	782b      	ldrb	r3, [r5, #0]
    3b80:	220f      	movs	r2, #15
    3b82:	4013      	ands	r3, r2
    3b84:	3420      	adds	r4, #32
    3b86:	00a4      	lsls	r4, r4, #2
    3b88:	4a02      	ldr	r2, [pc, #8]	; (3b94 <system_gclk_chan_set_config+0x20>)
    3b8a:	50a3      	str	r3, [r4, r2]


}
    3b8c:	bd38      	pop	{r3, r4, r5, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	00003b41 	.word	0x00003b41
    3b94:	40001800 	.word	0x40001800

00003b98 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3b98:	b510      	push	{r4, lr}
    3b9a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3b9c:	4b06      	ldr	r3, [pc, #24]	; (3bb8 <system_gclk_chan_get_hz+0x20>)
    3b9e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3ba0:	3420      	adds	r4, #32
    3ba2:	00a4      	lsls	r4, r4, #2
    3ba4:	4b05      	ldr	r3, [pc, #20]	; (3bbc <system_gclk_chan_get_hz+0x24>)
    3ba6:	58e3      	ldr	r3, [r4, r3]
    3ba8:	240f      	movs	r4, #15
    3baa:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3bac:	4b04      	ldr	r3, [pc, #16]	; (3bc0 <system_gclk_chan_get_hz+0x28>)
    3bae:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3bb0:	1c20      	adds	r0, r4, #0
    3bb2:	4b04      	ldr	r3, [pc, #16]	; (3bc4 <system_gclk_chan_get_hz+0x2c>)
    3bb4:	4798      	blx	r3
}
    3bb6:	bd10      	pop	{r4, pc}
    3bb8:	00003499 	.word	0x00003499
    3bbc:	40001800 	.word	0x40001800
    3bc0:	000034d9 	.word	0x000034d9
    3bc4:	00003aa1 	.word	0x00003aa1

00003bc8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3bc8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3bca:	78d3      	ldrb	r3, [r2, #3]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d11e      	bne.n	3c0e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3bd0:	7814      	ldrb	r4, [r2, #0]
    3bd2:	2c80      	cmp	r4, #128	; 0x80
    3bd4:	d004      	beq.n	3be0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3bd6:	0624      	lsls	r4, r4, #24
    3bd8:	2380      	movs	r3, #128	; 0x80
    3bda:	025b      	lsls	r3, r3, #9
    3bdc:	431c      	orrs	r4, r3
    3bde:	e000      	b.n	3be2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3be0:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3be2:	7853      	ldrb	r3, [r2, #1]
    3be4:	2502      	movs	r5, #2
    3be6:	43ab      	bics	r3, r5
    3be8:	d10a      	bne.n	3c00 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3bea:	7893      	ldrb	r3, [r2, #2]
    3bec:	2b00      	cmp	r3, #0
    3bee:	d103      	bne.n	3bf8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3bf0:	2380      	movs	r3, #128	; 0x80
    3bf2:	029b      	lsls	r3, r3, #10
    3bf4:	431c      	orrs	r4, r3
    3bf6:	e002      	b.n	3bfe <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3bf8:	23c0      	movs	r3, #192	; 0xc0
    3bfa:	02db      	lsls	r3, r3, #11
    3bfc:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3bfe:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3c00:	7853      	ldrb	r3, [r2, #1]
    3c02:	3b01      	subs	r3, #1
    3c04:	2b01      	cmp	r3, #1
    3c06:	d812      	bhi.n	3c2e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3c08:	4b18      	ldr	r3, [pc, #96]	; (3c6c <_system_pinmux_config+0xa4>)
    3c0a:	401c      	ands	r4, r3
    3c0c:	e00f      	b.n	3c2e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3c0e:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3c10:	040b      	lsls	r3, r1, #16
    3c12:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3c14:	24a0      	movs	r4, #160	; 0xa0
    3c16:	05e4      	lsls	r4, r4, #23
    3c18:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3c1a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3c1c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3c1e:	24d0      	movs	r4, #208	; 0xd0
    3c20:	0624      	lsls	r4, r4, #24
    3c22:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3c24:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3c26:	78d3      	ldrb	r3, [r2, #3]
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d018      	beq.n	3c5e <_system_pinmux_config+0x96>
    3c2c:	e01c      	b.n	3c68 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3c2e:	040b      	lsls	r3, r1, #16
    3c30:	0c1b      	lsrs	r3, r3, #16
    3c32:	25a0      	movs	r5, #160	; 0xa0
    3c34:	05ed      	lsls	r5, r5, #23
    3c36:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3c38:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3c3a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3c3c:	0c0b      	lsrs	r3, r1, #16
    3c3e:	25d0      	movs	r5, #208	; 0xd0
    3c40:	062d      	lsls	r5, r5, #24
    3c42:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3c44:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3c46:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3c48:	78d3      	ldrb	r3, [r2, #3]
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d10c      	bne.n	3c68 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3c4e:	0363      	lsls	r3, r4, #13
    3c50:	d505      	bpl.n	3c5e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3c52:	7893      	ldrb	r3, [r2, #2]
    3c54:	2b01      	cmp	r3, #1
    3c56:	d101      	bne.n	3c5c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    3c58:	6181      	str	r1, [r0, #24]
    3c5a:	e000      	b.n	3c5e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    3c5c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3c5e:	7853      	ldrb	r3, [r2, #1]
    3c60:	3b01      	subs	r3, #1
    3c62:	2b01      	cmp	r3, #1
    3c64:	d800      	bhi.n	3c68 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3c66:	6081      	str	r1, [r0, #8]
		}
	}
}
    3c68:	bd30      	pop	{r4, r5, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	fffbffff 	.word	0xfffbffff

00003c70 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3c70:	b508      	push	{r3, lr}
    3c72:	1c03      	adds	r3, r0, #0
    3c74:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c76:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c78:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c7a:	2900      	cmp	r1, #0
    3c7c:	d104      	bne.n	3c88 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    3c7e:	0958      	lsrs	r0, r3, #5
    3c80:	01c0      	lsls	r0, r0, #7
    3c82:	4905      	ldr	r1, [pc, #20]	; (3c98 <system_pinmux_pin_set_config+0x28>)
    3c84:	468c      	mov	ip, r1
    3c86:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3c88:	211f      	movs	r1, #31
    3c8a:	400b      	ands	r3, r1
    3c8c:	391e      	subs	r1, #30
    3c8e:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    3c90:	4b02      	ldr	r3, [pc, #8]	; (3c9c <system_pinmux_pin_set_config+0x2c>)
    3c92:	4798      	blx	r3
}
    3c94:	bd08      	pop	{r3, pc}
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	40002800 	.word	0x40002800
    3c9c:	00003bc9 	.word	0x00003bc9

00003ca0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3ca0:	4770      	bx	lr
    3ca2:	46c0      	nop			; (mov r8, r8)

00003ca4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3ca4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3ca6:	4b05      	ldr	r3, [pc, #20]	; (3cbc <system_init+0x18>)
    3ca8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3caa:	4b05      	ldr	r3, [pc, #20]	; (3cc0 <system_init+0x1c>)
    3cac:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3cae:	4b05      	ldr	r3, [pc, #20]	; (3cc4 <system_init+0x20>)
    3cb0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3cb2:	4b05      	ldr	r3, [pc, #20]	; (3cc8 <system_init+0x24>)
    3cb4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3cb6:	4b05      	ldr	r3, [pc, #20]	; (3ccc <system_init+0x28>)
    3cb8:	4798      	blx	r3
}
    3cba:	bd08      	pop	{r3, pc}
    3cbc:	00003815 	.word	0x00003815
    3cc0:	00003495 	.word	0x00003495
    3cc4:	00000c1d 	.word	0x00000c1d
    3cc8:	00000c5d 	.word	0x00000c5d
    3ccc:	00003ca1 	.word	0x00003ca1

00003cd0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    3cd0:	e7fe      	b.n	3cd0 <Dummy_Handler>
    3cd2:	46c0      	nop			; (mov r8, r8)

00003cd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3cd4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3cd6:	4b1d      	ldr	r3, [pc, #116]	; (3d4c <Reset_Handler+0x78>)
    3cd8:	4a1d      	ldr	r2, [pc, #116]	; (3d50 <Reset_Handler+0x7c>)
    3cda:	429a      	cmp	r2, r3
    3cdc:	d003      	beq.n	3ce6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    3cde:	4b1d      	ldr	r3, [pc, #116]	; (3d54 <Reset_Handler+0x80>)
    3ce0:	4a1a      	ldr	r2, [pc, #104]	; (3d4c <Reset_Handler+0x78>)
    3ce2:	429a      	cmp	r2, r3
    3ce4:	d304      	bcc.n	3cf0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3ce6:	4b1c      	ldr	r3, [pc, #112]	; (3d58 <Reset_Handler+0x84>)
    3ce8:	4a1c      	ldr	r2, [pc, #112]	; (3d5c <Reset_Handler+0x88>)
    3cea:	429a      	cmp	r2, r3
    3cec:	d310      	bcc.n	3d10 <Reset_Handler+0x3c>
    3cee:	e01e      	b.n	3d2e <Reset_Handler+0x5a>
    3cf0:	4a1b      	ldr	r2, [pc, #108]	; (3d60 <Reset_Handler+0x8c>)
    3cf2:	4b18      	ldr	r3, [pc, #96]	; (3d54 <Reset_Handler+0x80>)
    3cf4:	3303      	adds	r3, #3
    3cf6:	1a9b      	subs	r3, r3, r2
    3cf8:	089b      	lsrs	r3, r3, #2
    3cfa:	3301      	adds	r3, #1
    3cfc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3cfe:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3d00:	4812      	ldr	r0, [pc, #72]	; (3d4c <Reset_Handler+0x78>)
    3d02:	4913      	ldr	r1, [pc, #76]	; (3d50 <Reset_Handler+0x7c>)
    3d04:	588c      	ldr	r4, [r1, r2]
    3d06:	5084      	str	r4, [r0, r2]
    3d08:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3d0a:	429a      	cmp	r2, r3
    3d0c:	d1fa      	bne.n	3d04 <Reset_Handler+0x30>
    3d0e:	e7ea      	b.n	3ce6 <Reset_Handler+0x12>
    3d10:	4a14      	ldr	r2, [pc, #80]	; (3d64 <Reset_Handler+0x90>)
    3d12:	4b11      	ldr	r3, [pc, #68]	; (3d58 <Reset_Handler+0x84>)
    3d14:	3303      	adds	r3, #3
    3d16:	1a9b      	subs	r3, r3, r2
    3d18:	089b      	lsrs	r3, r3, #2
    3d1a:	3301      	adds	r3, #1
    3d1c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3d1e:	2200      	movs	r2, #0
                *pDest++ = 0;
    3d20:	480e      	ldr	r0, [pc, #56]	; (3d5c <Reset_Handler+0x88>)
    3d22:	2100      	movs	r1, #0
    3d24:	1814      	adds	r4, r2, r0
    3d26:	6021      	str	r1, [r4, #0]
    3d28:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3d2a:	429a      	cmp	r2, r3
    3d2c:	d1fa      	bne.n	3d24 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3d2e:	4a0e      	ldr	r2, [pc, #56]	; (3d68 <Reset_Handler+0x94>)
    3d30:	21ff      	movs	r1, #255	; 0xff
    3d32:	4b0e      	ldr	r3, [pc, #56]	; (3d6c <Reset_Handler+0x98>)
    3d34:	438b      	bics	r3, r1
    3d36:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3d38:	4a0d      	ldr	r2, [pc, #52]	; (3d70 <Reset_Handler+0x9c>)
    3d3a:	6851      	ldr	r1, [r2, #4]
    3d3c:	2380      	movs	r3, #128	; 0x80
    3d3e:	430b      	orrs	r3, r1
    3d40:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3d42:	4b0c      	ldr	r3, [pc, #48]	; (3d74 <Reset_Handler+0xa0>)
    3d44:	4798      	blx	r3

        /* Branch to main function */
        main();
    3d46:	4b0c      	ldr	r3, [pc, #48]	; (3d78 <Reset_Handler+0xa4>)
    3d48:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3d4a:	e7fe      	b.n	3d4a <Reset_Handler+0x76>
    3d4c:	20000000 	.word	0x20000000
    3d50:	00004338 	.word	0x00004338
    3d54:	20000018 	.word	0x20000018
    3d58:	20000fc4 	.word	0x20000fc4
    3d5c:	20000018 	.word	0x20000018
    3d60:	20000004 	.word	0x20000004
    3d64:	2000001c 	.word	0x2000001c
    3d68:	e000ed00 	.word	0xe000ed00
    3d6c:	00000000 	.word	0x00000000
    3d70:	41004000 	.word	0x41004000
    3d74:	000041f9 	.word	0x000041f9
    3d78:	00003d81 	.word	0x00003d81

00003d7c <extint_callback>:
void extint_callback(void)
{
	while(true)
	{
		// do some stuff
	}
    3d7c:	e7fe      	b.n	3d7c <extint_callback>
    3d7e:	46c0      	nop			; (mov r8, r8)

00003d80 <main>:
 */
#include <asf.h>
#include "HAL.h"

int main (void)
{
    3d80:	b570      	push	{r4, r5, r6, lr}
	system_init();
    3d82:	4b23      	ldr	r3, [pc, #140]	; (3e10 <main+0x90>)
    3d84:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    3d86:	2201      	movs	r2, #1
    3d88:	4b22      	ldr	r3, [pc, #136]	; (3e14 <main+0x94>)
    3d8a:	701a      	strb	r2, [r3, #0]
    3d8c:	f3bf 8f5f 	dmb	sy
    3d90:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	
	/* Configure various sensors and their associated peripherals */
  	configure_i2c();
    3d92:	4b21      	ldr	r3, [pc, #132]	; (3e18 <main+0x98>)
    3d94:	4798      	blx	r3
  	
 	configure_mag_sw_int(extint_callback);
    3d96:	4821      	ldr	r0, [pc, #132]	; (3e1c <main+0x9c>)
    3d98:	4b21      	ldr	r3, [pc, #132]	; (3e20 <main+0xa0>)
    3d9a:	4798      	blx	r3
  	configure_S70FL01(S70FL01_CS1, false);
    3d9c:	2005      	movs	r0, #5
    3d9e:	2100      	movs	r1, #0
    3da0:	4b20      	ldr	r3, [pc, #128]	; (3e24 <main+0xa4>)
    3da2:	4798      	blx	r3
  	configure_SP1ML();
    3da4:	4b20      	ldr	r3, [pc, #128]	; (3e28 <main+0xa8>)
    3da6:	4798      	blx	r3
  	configure_ADXL375(); 	
    3da8:	4b20      	ldr	r3, [pc, #128]	; (3e2c <main+0xac>)
    3daa:	4798      	blx	r3
 	configure_sleepmode();
    3dac:	4b20      	ldr	r3, [pc, #128]	; (3e30 <main+0xb0>)
    3dae:	4798      	blx	r3
  	configure_rtc();
    3db0:	4b20      	ldr	r3, [pc, #128]	; (3e34 <main+0xb4>)
    3db2:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3db4:	2280      	movs	r2, #128	; 0x80
    3db6:	0512      	lsls	r2, r2, #20
    3db8:	4b1f      	ldr	r3, [pc, #124]	; (3e38 <main+0xb8>)
    3dba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SP1ML_EN_PIN,true);
	configure_ADT7420();
    3dbc:	4b1f      	ldr	r3, [pc, #124]	; (3e3c <main+0xbc>)
    3dbe:	4798      	blx	r3
	
	ucCurrent_Mode = SUMMER_MODE;
    3dc0:	2200      	movs	r2, #0
    3dc2:	4b1f      	ldr	r3, [pc, #124]	; (3e40 <main+0xc0>)
    3dc4:	701a      	strb	r2, [r3, #0]
	
	while(true)
	{	
		/* TODO change this to offload both buffers if Flikkema is okay with it */
		if((uiAccelerometerMatrixPtr > (1024 - 32)) || (ucTemperatureArrayPtr > 71)){
    3dc6:	4c1f      	ldr	r4, [pc, #124]	; (3e44 <main+0xc4>)
			// Accelerometer total buffer size minus the ADXL375 internal FIFO size
			// If either buffer is full enough that another set of samples cannot be stored, trigger an offload
			offload_data();
    3dc8:	4e1f      	ldr	r6, [pc, #124]	; (3e48 <main+0xc8>)
			uiAccelerometerMatrixPtr = 0;
    3dca:	1c25      	adds	r5, r4, #0
	ucCurrent_Mode = SUMMER_MODE;
	
	while(true)
	{	
		/* TODO change this to offload both buffers if Flikkema is okay with it */
		if((uiAccelerometerMatrixPtr > (1024 - 32)) || (ucTemperatureArrayPtr > 71)){
    3dcc:	2300      	movs	r3, #0
    3dce:	5ee2      	ldrsh	r2, [r4, r3]
    3dd0:	23f8      	movs	r3, #248	; 0xf8
    3dd2:	009b      	lsls	r3, r3, #2
    3dd4:	429a      	cmp	r2, r3
    3dd6:	dc03      	bgt.n	3de0 <main+0x60>
    3dd8:	4b1c      	ldr	r3, [pc, #112]	; (3e4c <main+0xcc>)
    3dda:	781b      	ldrb	r3, [r3, #0]
    3ddc:	2b47      	cmp	r3, #71	; 0x47
    3dde:	d905      	bls.n	3dec <main+0x6c>
			// Accelerometer total buffer size minus the ADXL375 internal FIFO size
			// If either buffer is full enough that another set of samples cannot be stored, trigger an offload
			offload_data();
    3de0:	47b0      	blx	r6
			uiAccelerometerMatrixPtr = 0;
    3de2:	2300      	movs	r3, #0
    3de4:	802b      	strh	r3, [r5, #0]
			ucTemperatureArrayPtr = 0;
    3de6:	4b19      	ldr	r3, [pc, #100]	; (3e4c <main+0xcc>)
    3de8:	2200      	movs	r2, #0
    3dea:	701a      	strb	r2, [r3, #0]
		}
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die (ring buffer)
		if(S70FL01_address >= S70FL01_MAX_ADDR){
    3dec:	4b18      	ldr	r3, [pc, #96]	; (3e50 <main+0xd0>)
    3dee:	681a      	ldr	r2, [r3, #0]
    3df0:	4b18      	ldr	r3, [pc, #96]	; (3e54 <main+0xd4>)
    3df2:	429a      	cmp	r2, r3
    3df4:	d908      	bls.n	3e08 <main+0x88>
			S70FL01_active_die++;
			S70FL01_active_die %= 2;
    3df6:	4a18      	ldr	r2, [pc, #96]	; (3e58 <main+0xd8>)
			ucTemperatureArrayPtr = 0;
		}
		// If we are at the end of the die, then switch die and reset the address pointer
		// If we hit the end of the second die, then we restart at the beginning of the first die (ring buffer)
		if(S70FL01_address >= S70FL01_MAX_ADDR){
			S70FL01_active_die++;
    3df8:	7813      	ldrb	r3, [r2, #0]
    3dfa:	3301      	adds	r3, #1
			S70FL01_active_die %= 2;
    3dfc:	2101      	movs	r1, #1
    3dfe:	400b      	ands	r3, r1
    3e00:	7013      	strb	r3, [r2, #0]
			S70FL01_address = 0;
    3e02:	2200      	movs	r2, #0
    3e04:	4b12      	ldr	r3, [pc, #72]	; (3e50 <main+0xd0>)
    3e06:	601a      	str	r2, [r3, #0]
		}
		
		// Housekeeping done -- go back to sleep
		sleep();
    3e08:	4b14      	ldr	r3, [pc, #80]	; (3e5c <main+0xdc>)
    3e0a:	4798      	blx	r3
	}
    3e0c:	e7de      	b.n	3dcc <main+0x4c>
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	00003ca5 	.word	0x00003ca5
    3e14:	20000014 	.word	0x20000014
    3e18:	00001c8d 	.word	0x00001c8d
    3e1c:	00003d7d 	.word	0x00003d7d
    3e20:	00001d25 	.word	0x00001d25
    3e24:	00001f3d 	.word	0x00001f3d
    3e28:	00002555 	.word	0x00002555
    3e2c:	00000805 	.word	0x00000805
    3e30:	00001b69 	.word	0x00001b69
    3e34:	00001bbd 	.word	0x00001bbd
    3e38:	40002800 	.word	0x40002800
    3e3c:	00000115 	.word	0x00000115
    3e40:	20000db8 	.word	0x20000db8
    3e44:	20000ccc 	.word	0x20000ccc
    3e48:	00001ddd 	.word	0x00001ddd
    3e4c:	20000cda 	.word	0x20000cda
    3e50:	20000dcc 	.word	0x20000dcc
    3e54:	1fffffff 	.word	0x1fffffff
    3e58:	20000cdc 	.word	0x20000cdc
    3e5c:	00001b25 	.word	0x00001b25

00003e60 <__aeabi_uidiv>:
    3e60:	2200      	movs	r2, #0
    3e62:	0843      	lsrs	r3, r0, #1
    3e64:	428b      	cmp	r3, r1
    3e66:	d374      	bcc.n	3f52 <__aeabi_uidiv+0xf2>
    3e68:	0903      	lsrs	r3, r0, #4
    3e6a:	428b      	cmp	r3, r1
    3e6c:	d35f      	bcc.n	3f2e <__aeabi_uidiv+0xce>
    3e6e:	0a03      	lsrs	r3, r0, #8
    3e70:	428b      	cmp	r3, r1
    3e72:	d344      	bcc.n	3efe <__aeabi_uidiv+0x9e>
    3e74:	0b03      	lsrs	r3, r0, #12
    3e76:	428b      	cmp	r3, r1
    3e78:	d328      	bcc.n	3ecc <__aeabi_uidiv+0x6c>
    3e7a:	0c03      	lsrs	r3, r0, #16
    3e7c:	428b      	cmp	r3, r1
    3e7e:	d30d      	bcc.n	3e9c <__aeabi_uidiv+0x3c>
    3e80:	22ff      	movs	r2, #255	; 0xff
    3e82:	0209      	lsls	r1, r1, #8
    3e84:	ba12      	rev	r2, r2
    3e86:	0c03      	lsrs	r3, r0, #16
    3e88:	428b      	cmp	r3, r1
    3e8a:	d302      	bcc.n	3e92 <__aeabi_uidiv+0x32>
    3e8c:	1212      	asrs	r2, r2, #8
    3e8e:	0209      	lsls	r1, r1, #8
    3e90:	d065      	beq.n	3f5e <__aeabi_uidiv+0xfe>
    3e92:	0b03      	lsrs	r3, r0, #12
    3e94:	428b      	cmp	r3, r1
    3e96:	d319      	bcc.n	3ecc <__aeabi_uidiv+0x6c>
    3e98:	e000      	b.n	3e9c <__aeabi_uidiv+0x3c>
    3e9a:	0a09      	lsrs	r1, r1, #8
    3e9c:	0bc3      	lsrs	r3, r0, #15
    3e9e:	428b      	cmp	r3, r1
    3ea0:	d301      	bcc.n	3ea6 <__aeabi_uidiv+0x46>
    3ea2:	03cb      	lsls	r3, r1, #15
    3ea4:	1ac0      	subs	r0, r0, r3
    3ea6:	4152      	adcs	r2, r2
    3ea8:	0b83      	lsrs	r3, r0, #14
    3eaa:	428b      	cmp	r3, r1
    3eac:	d301      	bcc.n	3eb2 <__aeabi_uidiv+0x52>
    3eae:	038b      	lsls	r3, r1, #14
    3eb0:	1ac0      	subs	r0, r0, r3
    3eb2:	4152      	adcs	r2, r2
    3eb4:	0b43      	lsrs	r3, r0, #13
    3eb6:	428b      	cmp	r3, r1
    3eb8:	d301      	bcc.n	3ebe <__aeabi_uidiv+0x5e>
    3eba:	034b      	lsls	r3, r1, #13
    3ebc:	1ac0      	subs	r0, r0, r3
    3ebe:	4152      	adcs	r2, r2
    3ec0:	0b03      	lsrs	r3, r0, #12
    3ec2:	428b      	cmp	r3, r1
    3ec4:	d301      	bcc.n	3eca <__aeabi_uidiv+0x6a>
    3ec6:	030b      	lsls	r3, r1, #12
    3ec8:	1ac0      	subs	r0, r0, r3
    3eca:	4152      	adcs	r2, r2
    3ecc:	0ac3      	lsrs	r3, r0, #11
    3ece:	428b      	cmp	r3, r1
    3ed0:	d301      	bcc.n	3ed6 <__aeabi_uidiv+0x76>
    3ed2:	02cb      	lsls	r3, r1, #11
    3ed4:	1ac0      	subs	r0, r0, r3
    3ed6:	4152      	adcs	r2, r2
    3ed8:	0a83      	lsrs	r3, r0, #10
    3eda:	428b      	cmp	r3, r1
    3edc:	d301      	bcc.n	3ee2 <__aeabi_uidiv+0x82>
    3ede:	028b      	lsls	r3, r1, #10
    3ee0:	1ac0      	subs	r0, r0, r3
    3ee2:	4152      	adcs	r2, r2
    3ee4:	0a43      	lsrs	r3, r0, #9
    3ee6:	428b      	cmp	r3, r1
    3ee8:	d301      	bcc.n	3eee <__aeabi_uidiv+0x8e>
    3eea:	024b      	lsls	r3, r1, #9
    3eec:	1ac0      	subs	r0, r0, r3
    3eee:	4152      	adcs	r2, r2
    3ef0:	0a03      	lsrs	r3, r0, #8
    3ef2:	428b      	cmp	r3, r1
    3ef4:	d301      	bcc.n	3efa <__aeabi_uidiv+0x9a>
    3ef6:	020b      	lsls	r3, r1, #8
    3ef8:	1ac0      	subs	r0, r0, r3
    3efa:	4152      	adcs	r2, r2
    3efc:	d2cd      	bcs.n	3e9a <__aeabi_uidiv+0x3a>
    3efe:	09c3      	lsrs	r3, r0, #7
    3f00:	428b      	cmp	r3, r1
    3f02:	d301      	bcc.n	3f08 <__aeabi_uidiv+0xa8>
    3f04:	01cb      	lsls	r3, r1, #7
    3f06:	1ac0      	subs	r0, r0, r3
    3f08:	4152      	adcs	r2, r2
    3f0a:	0983      	lsrs	r3, r0, #6
    3f0c:	428b      	cmp	r3, r1
    3f0e:	d301      	bcc.n	3f14 <__aeabi_uidiv+0xb4>
    3f10:	018b      	lsls	r3, r1, #6
    3f12:	1ac0      	subs	r0, r0, r3
    3f14:	4152      	adcs	r2, r2
    3f16:	0943      	lsrs	r3, r0, #5
    3f18:	428b      	cmp	r3, r1
    3f1a:	d301      	bcc.n	3f20 <__aeabi_uidiv+0xc0>
    3f1c:	014b      	lsls	r3, r1, #5
    3f1e:	1ac0      	subs	r0, r0, r3
    3f20:	4152      	adcs	r2, r2
    3f22:	0903      	lsrs	r3, r0, #4
    3f24:	428b      	cmp	r3, r1
    3f26:	d301      	bcc.n	3f2c <__aeabi_uidiv+0xcc>
    3f28:	010b      	lsls	r3, r1, #4
    3f2a:	1ac0      	subs	r0, r0, r3
    3f2c:	4152      	adcs	r2, r2
    3f2e:	08c3      	lsrs	r3, r0, #3
    3f30:	428b      	cmp	r3, r1
    3f32:	d301      	bcc.n	3f38 <__aeabi_uidiv+0xd8>
    3f34:	00cb      	lsls	r3, r1, #3
    3f36:	1ac0      	subs	r0, r0, r3
    3f38:	4152      	adcs	r2, r2
    3f3a:	0883      	lsrs	r3, r0, #2
    3f3c:	428b      	cmp	r3, r1
    3f3e:	d301      	bcc.n	3f44 <__aeabi_uidiv+0xe4>
    3f40:	008b      	lsls	r3, r1, #2
    3f42:	1ac0      	subs	r0, r0, r3
    3f44:	4152      	adcs	r2, r2
    3f46:	0843      	lsrs	r3, r0, #1
    3f48:	428b      	cmp	r3, r1
    3f4a:	d301      	bcc.n	3f50 <__aeabi_uidiv+0xf0>
    3f4c:	004b      	lsls	r3, r1, #1
    3f4e:	1ac0      	subs	r0, r0, r3
    3f50:	4152      	adcs	r2, r2
    3f52:	1a41      	subs	r1, r0, r1
    3f54:	d200      	bcs.n	3f58 <__aeabi_uidiv+0xf8>
    3f56:	4601      	mov	r1, r0
    3f58:	4152      	adcs	r2, r2
    3f5a:	4610      	mov	r0, r2
    3f5c:	4770      	bx	lr
    3f5e:	e7ff      	b.n	3f60 <__aeabi_uidiv+0x100>
    3f60:	b501      	push	{r0, lr}
    3f62:	2000      	movs	r0, #0
    3f64:	f000 f8fc 	bl	4160 <__aeabi_idiv0>
    3f68:	bd02      	pop	{r1, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)

00003f6c <__aeabi_uidivmod>:
    3f6c:	2900      	cmp	r1, #0
    3f6e:	d0f7      	beq.n	3f60 <__aeabi_uidiv+0x100>
    3f70:	b503      	push	{r0, r1, lr}
    3f72:	f7ff ff75 	bl	3e60 <__aeabi_uidiv>
    3f76:	bc0e      	pop	{r1, r2, r3}
    3f78:	4342      	muls	r2, r0
    3f7a:	1a89      	subs	r1, r1, r2
    3f7c:	4718      	bx	r3
    3f7e:	46c0      	nop			; (mov r8, r8)

00003f80 <__aeabi_idiv>:
    3f80:	4603      	mov	r3, r0
    3f82:	430b      	orrs	r3, r1
    3f84:	d47f      	bmi.n	4086 <__aeabi_idiv+0x106>
    3f86:	2200      	movs	r2, #0
    3f88:	0843      	lsrs	r3, r0, #1
    3f8a:	428b      	cmp	r3, r1
    3f8c:	d374      	bcc.n	4078 <__aeabi_idiv+0xf8>
    3f8e:	0903      	lsrs	r3, r0, #4
    3f90:	428b      	cmp	r3, r1
    3f92:	d35f      	bcc.n	4054 <__aeabi_idiv+0xd4>
    3f94:	0a03      	lsrs	r3, r0, #8
    3f96:	428b      	cmp	r3, r1
    3f98:	d344      	bcc.n	4024 <__aeabi_idiv+0xa4>
    3f9a:	0b03      	lsrs	r3, r0, #12
    3f9c:	428b      	cmp	r3, r1
    3f9e:	d328      	bcc.n	3ff2 <__aeabi_idiv+0x72>
    3fa0:	0c03      	lsrs	r3, r0, #16
    3fa2:	428b      	cmp	r3, r1
    3fa4:	d30d      	bcc.n	3fc2 <__aeabi_idiv+0x42>
    3fa6:	22ff      	movs	r2, #255	; 0xff
    3fa8:	0209      	lsls	r1, r1, #8
    3faa:	ba12      	rev	r2, r2
    3fac:	0c03      	lsrs	r3, r0, #16
    3fae:	428b      	cmp	r3, r1
    3fb0:	d302      	bcc.n	3fb8 <__aeabi_idiv+0x38>
    3fb2:	1212      	asrs	r2, r2, #8
    3fb4:	0209      	lsls	r1, r1, #8
    3fb6:	d065      	beq.n	4084 <__aeabi_idiv+0x104>
    3fb8:	0b03      	lsrs	r3, r0, #12
    3fba:	428b      	cmp	r3, r1
    3fbc:	d319      	bcc.n	3ff2 <__aeabi_idiv+0x72>
    3fbe:	e000      	b.n	3fc2 <__aeabi_idiv+0x42>
    3fc0:	0a09      	lsrs	r1, r1, #8
    3fc2:	0bc3      	lsrs	r3, r0, #15
    3fc4:	428b      	cmp	r3, r1
    3fc6:	d301      	bcc.n	3fcc <__aeabi_idiv+0x4c>
    3fc8:	03cb      	lsls	r3, r1, #15
    3fca:	1ac0      	subs	r0, r0, r3
    3fcc:	4152      	adcs	r2, r2
    3fce:	0b83      	lsrs	r3, r0, #14
    3fd0:	428b      	cmp	r3, r1
    3fd2:	d301      	bcc.n	3fd8 <__aeabi_idiv+0x58>
    3fd4:	038b      	lsls	r3, r1, #14
    3fd6:	1ac0      	subs	r0, r0, r3
    3fd8:	4152      	adcs	r2, r2
    3fda:	0b43      	lsrs	r3, r0, #13
    3fdc:	428b      	cmp	r3, r1
    3fde:	d301      	bcc.n	3fe4 <__aeabi_idiv+0x64>
    3fe0:	034b      	lsls	r3, r1, #13
    3fe2:	1ac0      	subs	r0, r0, r3
    3fe4:	4152      	adcs	r2, r2
    3fe6:	0b03      	lsrs	r3, r0, #12
    3fe8:	428b      	cmp	r3, r1
    3fea:	d301      	bcc.n	3ff0 <__aeabi_idiv+0x70>
    3fec:	030b      	lsls	r3, r1, #12
    3fee:	1ac0      	subs	r0, r0, r3
    3ff0:	4152      	adcs	r2, r2
    3ff2:	0ac3      	lsrs	r3, r0, #11
    3ff4:	428b      	cmp	r3, r1
    3ff6:	d301      	bcc.n	3ffc <__aeabi_idiv+0x7c>
    3ff8:	02cb      	lsls	r3, r1, #11
    3ffa:	1ac0      	subs	r0, r0, r3
    3ffc:	4152      	adcs	r2, r2
    3ffe:	0a83      	lsrs	r3, r0, #10
    4000:	428b      	cmp	r3, r1
    4002:	d301      	bcc.n	4008 <__aeabi_idiv+0x88>
    4004:	028b      	lsls	r3, r1, #10
    4006:	1ac0      	subs	r0, r0, r3
    4008:	4152      	adcs	r2, r2
    400a:	0a43      	lsrs	r3, r0, #9
    400c:	428b      	cmp	r3, r1
    400e:	d301      	bcc.n	4014 <__aeabi_idiv+0x94>
    4010:	024b      	lsls	r3, r1, #9
    4012:	1ac0      	subs	r0, r0, r3
    4014:	4152      	adcs	r2, r2
    4016:	0a03      	lsrs	r3, r0, #8
    4018:	428b      	cmp	r3, r1
    401a:	d301      	bcc.n	4020 <__aeabi_idiv+0xa0>
    401c:	020b      	lsls	r3, r1, #8
    401e:	1ac0      	subs	r0, r0, r3
    4020:	4152      	adcs	r2, r2
    4022:	d2cd      	bcs.n	3fc0 <__aeabi_idiv+0x40>
    4024:	09c3      	lsrs	r3, r0, #7
    4026:	428b      	cmp	r3, r1
    4028:	d301      	bcc.n	402e <__aeabi_idiv+0xae>
    402a:	01cb      	lsls	r3, r1, #7
    402c:	1ac0      	subs	r0, r0, r3
    402e:	4152      	adcs	r2, r2
    4030:	0983      	lsrs	r3, r0, #6
    4032:	428b      	cmp	r3, r1
    4034:	d301      	bcc.n	403a <__aeabi_idiv+0xba>
    4036:	018b      	lsls	r3, r1, #6
    4038:	1ac0      	subs	r0, r0, r3
    403a:	4152      	adcs	r2, r2
    403c:	0943      	lsrs	r3, r0, #5
    403e:	428b      	cmp	r3, r1
    4040:	d301      	bcc.n	4046 <__aeabi_idiv+0xc6>
    4042:	014b      	lsls	r3, r1, #5
    4044:	1ac0      	subs	r0, r0, r3
    4046:	4152      	adcs	r2, r2
    4048:	0903      	lsrs	r3, r0, #4
    404a:	428b      	cmp	r3, r1
    404c:	d301      	bcc.n	4052 <__aeabi_idiv+0xd2>
    404e:	010b      	lsls	r3, r1, #4
    4050:	1ac0      	subs	r0, r0, r3
    4052:	4152      	adcs	r2, r2
    4054:	08c3      	lsrs	r3, r0, #3
    4056:	428b      	cmp	r3, r1
    4058:	d301      	bcc.n	405e <__aeabi_idiv+0xde>
    405a:	00cb      	lsls	r3, r1, #3
    405c:	1ac0      	subs	r0, r0, r3
    405e:	4152      	adcs	r2, r2
    4060:	0883      	lsrs	r3, r0, #2
    4062:	428b      	cmp	r3, r1
    4064:	d301      	bcc.n	406a <__aeabi_idiv+0xea>
    4066:	008b      	lsls	r3, r1, #2
    4068:	1ac0      	subs	r0, r0, r3
    406a:	4152      	adcs	r2, r2
    406c:	0843      	lsrs	r3, r0, #1
    406e:	428b      	cmp	r3, r1
    4070:	d301      	bcc.n	4076 <__aeabi_idiv+0xf6>
    4072:	004b      	lsls	r3, r1, #1
    4074:	1ac0      	subs	r0, r0, r3
    4076:	4152      	adcs	r2, r2
    4078:	1a41      	subs	r1, r0, r1
    407a:	d200      	bcs.n	407e <__aeabi_idiv+0xfe>
    407c:	4601      	mov	r1, r0
    407e:	4152      	adcs	r2, r2
    4080:	4610      	mov	r0, r2
    4082:	4770      	bx	lr
    4084:	e05d      	b.n	4142 <__aeabi_idiv+0x1c2>
    4086:	0fca      	lsrs	r2, r1, #31
    4088:	d000      	beq.n	408c <__aeabi_idiv+0x10c>
    408a:	4249      	negs	r1, r1
    408c:	1003      	asrs	r3, r0, #32
    408e:	d300      	bcc.n	4092 <__aeabi_idiv+0x112>
    4090:	4240      	negs	r0, r0
    4092:	4053      	eors	r3, r2
    4094:	2200      	movs	r2, #0
    4096:	469c      	mov	ip, r3
    4098:	0903      	lsrs	r3, r0, #4
    409a:	428b      	cmp	r3, r1
    409c:	d32d      	bcc.n	40fa <__aeabi_idiv+0x17a>
    409e:	0a03      	lsrs	r3, r0, #8
    40a0:	428b      	cmp	r3, r1
    40a2:	d312      	bcc.n	40ca <__aeabi_idiv+0x14a>
    40a4:	22fc      	movs	r2, #252	; 0xfc
    40a6:	0189      	lsls	r1, r1, #6
    40a8:	ba12      	rev	r2, r2
    40aa:	0a03      	lsrs	r3, r0, #8
    40ac:	428b      	cmp	r3, r1
    40ae:	d30c      	bcc.n	40ca <__aeabi_idiv+0x14a>
    40b0:	0189      	lsls	r1, r1, #6
    40b2:	1192      	asrs	r2, r2, #6
    40b4:	428b      	cmp	r3, r1
    40b6:	d308      	bcc.n	40ca <__aeabi_idiv+0x14a>
    40b8:	0189      	lsls	r1, r1, #6
    40ba:	1192      	asrs	r2, r2, #6
    40bc:	428b      	cmp	r3, r1
    40be:	d304      	bcc.n	40ca <__aeabi_idiv+0x14a>
    40c0:	0189      	lsls	r1, r1, #6
    40c2:	d03a      	beq.n	413a <__aeabi_idiv+0x1ba>
    40c4:	1192      	asrs	r2, r2, #6
    40c6:	e000      	b.n	40ca <__aeabi_idiv+0x14a>
    40c8:	0989      	lsrs	r1, r1, #6
    40ca:	09c3      	lsrs	r3, r0, #7
    40cc:	428b      	cmp	r3, r1
    40ce:	d301      	bcc.n	40d4 <__aeabi_idiv+0x154>
    40d0:	01cb      	lsls	r3, r1, #7
    40d2:	1ac0      	subs	r0, r0, r3
    40d4:	4152      	adcs	r2, r2
    40d6:	0983      	lsrs	r3, r0, #6
    40d8:	428b      	cmp	r3, r1
    40da:	d301      	bcc.n	40e0 <__aeabi_idiv+0x160>
    40dc:	018b      	lsls	r3, r1, #6
    40de:	1ac0      	subs	r0, r0, r3
    40e0:	4152      	adcs	r2, r2
    40e2:	0943      	lsrs	r3, r0, #5
    40e4:	428b      	cmp	r3, r1
    40e6:	d301      	bcc.n	40ec <__aeabi_idiv+0x16c>
    40e8:	014b      	lsls	r3, r1, #5
    40ea:	1ac0      	subs	r0, r0, r3
    40ec:	4152      	adcs	r2, r2
    40ee:	0903      	lsrs	r3, r0, #4
    40f0:	428b      	cmp	r3, r1
    40f2:	d301      	bcc.n	40f8 <__aeabi_idiv+0x178>
    40f4:	010b      	lsls	r3, r1, #4
    40f6:	1ac0      	subs	r0, r0, r3
    40f8:	4152      	adcs	r2, r2
    40fa:	08c3      	lsrs	r3, r0, #3
    40fc:	428b      	cmp	r3, r1
    40fe:	d301      	bcc.n	4104 <__aeabi_idiv+0x184>
    4100:	00cb      	lsls	r3, r1, #3
    4102:	1ac0      	subs	r0, r0, r3
    4104:	4152      	adcs	r2, r2
    4106:	0883      	lsrs	r3, r0, #2
    4108:	428b      	cmp	r3, r1
    410a:	d301      	bcc.n	4110 <__aeabi_idiv+0x190>
    410c:	008b      	lsls	r3, r1, #2
    410e:	1ac0      	subs	r0, r0, r3
    4110:	4152      	adcs	r2, r2
    4112:	d2d9      	bcs.n	40c8 <__aeabi_idiv+0x148>
    4114:	0843      	lsrs	r3, r0, #1
    4116:	428b      	cmp	r3, r1
    4118:	d301      	bcc.n	411e <__aeabi_idiv+0x19e>
    411a:	004b      	lsls	r3, r1, #1
    411c:	1ac0      	subs	r0, r0, r3
    411e:	4152      	adcs	r2, r2
    4120:	1a41      	subs	r1, r0, r1
    4122:	d200      	bcs.n	4126 <__aeabi_idiv+0x1a6>
    4124:	4601      	mov	r1, r0
    4126:	4663      	mov	r3, ip
    4128:	4152      	adcs	r2, r2
    412a:	105b      	asrs	r3, r3, #1
    412c:	4610      	mov	r0, r2
    412e:	d301      	bcc.n	4134 <__aeabi_idiv+0x1b4>
    4130:	4240      	negs	r0, r0
    4132:	2b00      	cmp	r3, #0
    4134:	d500      	bpl.n	4138 <__aeabi_idiv+0x1b8>
    4136:	4249      	negs	r1, r1
    4138:	4770      	bx	lr
    413a:	4663      	mov	r3, ip
    413c:	105b      	asrs	r3, r3, #1
    413e:	d300      	bcc.n	4142 <__aeabi_idiv+0x1c2>
    4140:	4240      	negs	r0, r0
    4142:	b501      	push	{r0, lr}
    4144:	2000      	movs	r0, #0
    4146:	f000 f80b 	bl	4160 <__aeabi_idiv0>
    414a:	bd02      	pop	{r1, pc}

0000414c <__aeabi_idivmod>:
    414c:	2900      	cmp	r1, #0
    414e:	d0f8      	beq.n	4142 <__aeabi_idiv+0x1c2>
    4150:	b503      	push	{r0, r1, lr}
    4152:	f7ff ff15 	bl	3f80 <__aeabi_idiv>
    4156:	bc0e      	pop	{r1, r2, r3}
    4158:	4342      	muls	r2, r0
    415a:	1a89      	subs	r1, r1, r2
    415c:	4718      	bx	r3
    415e:	46c0      	nop			; (mov r8, r8)

00004160 <__aeabi_idiv0>:
    4160:	4770      	bx	lr
    4162:	46c0      	nop			; (mov r8, r8)

00004164 <__ctzsi2>:
    4164:	4241      	negs	r1, r0
    4166:	4008      	ands	r0, r1
    4168:	211c      	movs	r1, #28
    416a:	2301      	movs	r3, #1
    416c:	041b      	lsls	r3, r3, #16
    416e:	4298      	cmp	r0, r3
    4170:	d301      	bcc.n	4176 <__ctzsi2+0x12>
    4172:	0c00      	lsrs	r0, r0, #16
    4174:	3910      	subs	r1, #16
    4176:	0a1b      	lsrs	r3, r3, #8
    4178:	4298      	cmp	r0, r3
    417a:	d301      	bcc.n	4180 <__ctzsi2+0x1c>
    417c:	0a00      	lsrs	r0, r0, #8
    417e:	3908      	subs	r1, #8
    4180:	091b      	lsrs	r3, r3, #4
    4182:	4298      	cmp	r0, r3
    4184:	d301      	bcc.n	418a <__ctzsi2+0x26>
    4186:	0900      	lsrs	r0, r0, #4
    4188:	3904      	subs	r1, #4
    418a:	a202      	add	r2, pc, #8	; (adr r2, 4194 <__ctzsi2+0x30>)
    418c:	5c10      	ldrb	r0, [r2, r0]
    418e:	1a40      	subs	r0, r0, r1
    4190:	4770      	bx	lr
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	1d1d1c1b 	.word	0x1d1d1c1b
    4198:	1e1e1e1e 	.word	0x1e1e1e1e
    419c:	1f1f1f1f 	.word	0x1f1f1f1f
    41a0:	1f1f1f1f 	.word	0x1f1f1f1f

000041a4 <__aeabi_lmul>:
    41a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41a6:	464f      	mov	r7, r9
    41a8:	4646      	mov	r6, r8
    41aa:	0405      	lsls	r5, r0, #16
    41ac:	0c2d      	lsrs	r5, r5, #16
    41ae:	1c2c      	adds	r4, r5, #0
    41b0:	b4c0      	push	{r6, r7}
    41b2:	0417      	lsls	r7, r2, #16
    41b4:	0c16      	lsrs	r6, r2, #16
    41b6:	0c3f      	lsrs	r7, r7, #16
    41b8:	4699      	mov	r9, r3
    41ba:	0c03      	lsrs	r3, r0, #16
    41bc:	437c      	muls	r4, r7
    41be:	4375      	muls	r5, r6
    41c0:	435f      	muls	r7, r3
    41c2:	4373      	muls	r3, r6
    41c4:	197d      	adds	r5, r7, r5
    41c6:	0c26      	lsrs	r6, r4, #16
    41c8:	19ad      	adds	r5, r5, r6
    41ca:	469c      	mov	ip, r3
    41cc:	42af      	cmp	r7, r5
    41ce:	d903      	bls.n	41d8 <__aeabi_lmul+0x34>
    41d0:	2380      	movs	r3, #128	; 0x80
    41d2:	025b      	lsls	r3, r3, #9
    41d4:	4698      	mov	r8, r3
    41d6:	44c4      	add	ip, r8
    41d8:	464b      	mov	r3, r9
    41da:	4351      	muls	r1, r2
    41dc:	4343      	muls	r3, r0
    41de:	0424      	lsls	r4, r4, #16
    41e0:	0c2e      	lsrs	r6, r5, #16
    41e2:	0c24      	lsrs	r4, r4, #16
    41e4:	042d      	lsls	r5, r5, #16
    41e6:	4466      	add	r6, ip
    41e8:	192c      	adds	r4, r5, r4
    41ea:	1859      	adds	r1, r3, r1
    41ec:	1989      	adds	r1, r1, r6
    41ee:	1c20      	adds	r0, r4, #0
    41f0:	bc0c      	pop	{r2, r3}
    41f2:	4690      	mov	r8, r2
    41f4:	4699      	mov	r9, r3
    41f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000041f8 <__libc_init_array>:
    41f8:	4b0e      	ldr	r3, [pc, #56]	; (4234 <__libc_init_array+0x3c>)
    41fa:	b570      	push	{r4, r5, r6, lr}
    41fc:	2500      	movs	r5, #0
    41fe:	1c1e      	adds	r6, r3, #0
    4200:	4c0d      	ldr	r4, [pc, #52]	; (4238 <__libc_init_array+0x40>)
    4202:	1ae4      	subs	r4, r4, r3
    4204:	10a4      	asrs	r4, r4, #2
    4206:	42a5      	cmp	r5, r4
    4208:	d004      	beq.n	4214 <__libc_init_array+0x1c>
    420a:	00ab      	lsls	r3, r5, #2
    420c:	58f3      	ldr	r3, [r6, r3]
    420e:	4798      	blx	r3
    4210:	3501      	adds	r5, #1
    4212:	e7f8      	b.n	4206 <__libc_init_array+0xe>
    4214:	f000 f880 	bl	4318 <_init>
    4218:	4b08      	ldr	r3, [pc, #32]	; (423c <__libc_init_array+0x44>)
    421a:	2500      	movs	r5, #0
    421c:	1c1e      	adds	r6, r3, #0
    421e:	4c08      	ldr	r4, [pc, #32]	; (4240 <__libc_init_array+0x48>)
    4220:	1ae4      	subs	r4, r4, r3
    4222:	10a4      	asrs	r4, r4, #2
    4224:	42a5      	cmp	r5, r4
    4226:	d004      	beq.n	4232 <__libc_init_array+0x3a>
    4228:	00ab      	lsls	r3, r5, #2
    422a:	58f3      	ldr	r3, [r6, r3]
    422c:	4798      	blx	r3
    422e:	3501      	adds	r5, #1
    4230:	e7f8      	b.n	4224 <__libc_init_array+0x2c>
    4232:	bd70      	pop	{r4, r5, r6, pc}
    4234:	00004324 	.word	0x00004324
    4238:	00004324 	.word	0x00004324
    423c:	00004324 	.word	0x00004324
    4240:	00004328 	.word	0x00004328

00004244 <memcpy>:
    4244:	2300      	movs	r3, #0
    4246:	b510      	push	{r4, lr}
    4248:	4293      	cmp	r3, r2
    424a:	d003      	beq.n	4254 <memcpy+0x10>
    424c:	5ccc      	ldrb	r4, [r1, r3]
    424e:	54c4      	strb	r4, [r0, r3]
    4250:	3301      	adds	r3, #1
    4252:	e7f9      	b.n	4248 <memcpy+0x4>
    4254:	bd10      	pop	{r4, pc}
    4256:	0000      	movs	r0, r0
    4258:	00006003 	.word	0x00006003
    425c:	0000172c 	.word	0x0000172c
    4260:	0000082d 	.word	0x0000082d
    4264:	0000f72d 	.word	0x0000f72d
    4268:	00363432 	.word	0x00363432
    426c:	00009f38 	.word	0x00009f38
    4270:	0000ed2f 	.word	0x0000ed2f
    4274:	0000182e 	.word	0x0000182e
    4278:	00000c2d 	.word	0x00000c2d
    427c:	35343332 	.word	0x35343332
    4280:	00003736 	.word	0x00003736

00004284 <_usb_device_irq_bits>:
    4284:	00080004 00800070 01000001 00000200     ....p...........
    4294:	42000000 42000400 42000800 42000c00     ...B...B...B...B
    42a4:	42001000 43000400 0000351a 00003516     ...B...C.5...5..
    42b4:	00003516 00003578 00003578 00003530     .5..x5..x5..05..
    42c4:	00003520 00003536 00003566 00003704      5..65..f5...7..
    42d4:	000036e4 000036e4 0000377e 000036f6     .6...6..~7...6..
    42e4:	00003712 000036e8 00003720 00003762     .7...6.. 7..b7..
    42f4:	000037bc 000037fe 000037fe 000037fe     .7...7...7...7..
    4304:	000037ae 000037ca 000037a0 000037d8     .7...7...7...7..
    4314:	000037ee                                .7..

00004318 <_init>:
    4318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    431e:	bc08      	pop	{r3}
    4320:	469e      	mov	lr, r3
    4322:	4770      	bx	lr

00004324 <__init_array_start>:
    4324:	000000dd 	.word	0x000000dd

00004328 <_fini>:
    4328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    432e:	bc08      	pop	{r3}
    4330:	469e      	mov	lr, r3
    4332:	4770      	bx	lr

00004334 <__fini_array_start>:
    4334:	000000b5 	.word	0x000000b5
